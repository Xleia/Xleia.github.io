<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构与算法---线性结构</title>
    <link href="/2023/06/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95---%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/"/>
    <url>/2023/06/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95---%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是数据结构与算法"><a href="#什么是数据结构与算法" class="headerlink" title="什么是数据结构与算法"></a>什么是数据结构与算法</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><blockquote><p>数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313?fromModule=lemma_inlink">数据元素</a>的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。</p></blockquote><p>数据结构有哪些，看下图</p><p><img src="/../img/mdImg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B.png" alt="数据结构类型"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><blockquote><p>算法是利用计算机解决问题的处理步骤，简而言之，<strong>算法就是解决问题的步骤</strong></p></blockquote><p>不同的算法，执行效率有很大的差别。衡量一个算法的复杂程度需要用到以下两个指标：</p><ul><li>时间复杂度T(n)：算法程序在执行时消耗的时间长度，一帮与输入数据的规模n有关。</li><li>空间复杂度S(n)：算法程序在执行时占用的存储单元长度，同样与数据的输入规模有关，大部分情况下，我们采用空间换时间。</li></ul><p>以下是常见的各种复杂度</p><table><thead><tr><th align="center">函数</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">O(1)</td><td align="center">常数阶</td><td align="center">最快的算法描述</td></tr><tr><td align="center">O(log<del>2</del>n)</td><td align="center">对数阶</td><td align="center">仅次于常数阶，比如二分搜索算法</td></tr><tr><td align="center">O(n)</td><td align="center">线性阶</td><td align="center">线性表的插入、删除，包括动态规划能够达到线性阶</td></tr><tr><td align="center">O(n log<del>2</del>n)</td><td align="center">线性对数阶</td><td align="center">相当于在对数阶的基础上再套了一层线性阶循环</td></tr><tr><td align="center">$O(n^2)$</td><td align="center">平方阶</td><td align="center">需要进行两轮循环的，一般都为平方阶。比如：冒泡排序</td></tr><tr><td align="center">$O(n^3)$</td><td align="center">立方阶</td><td align="center">三层循环。比如：暴力枚举</td></tr><tr><td align="center">$O(2^n)$</td><td align="center">指数阶</td><td align="center">递归，比如：斐波那契数递归算</td></tr><tr><td align="center">$O(n!)$</td><td align="center">阶乘</td><td align="center">比指数阶还复杂，一般很少算法到达</td></tr></tbody></table><h3 id="案例：二分搜索"><a href="#案例：二分搜索" class="headerlink" title="案例：二分搜索"></a>案例：二分搜索</h3><p>现有一个从小到大的排序数组，给你一个目标值<code>target</code>，现请你找到数组中的对应下标，如果没有，则返回-1</p><p>方法一：</p><p>暴力循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> numsSize,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(nums[i]==target) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：</p><p>二分查找–循环（推荐）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> numsSize,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = numsSize - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(left &gt; right)&#123;<br>        <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == target)&#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>二分查找–递归（推荐）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;<br>    <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(nums[mid] == target) <span class="hljs-keyword">return</span> mid;<br>    <span class="hljs-keyword">if</span>(nums[mid] &lt; target) <br>        <span class="hljs-keyword">return</span> binarySearch(nums, target, mid + <span class="hljs-number">1</span>, right);<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> binarySearch(nums, target, left,  mid - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> numsSize,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">return</span> binarySearch(nums, target, <span class="hljs-number">0</span>, numsSize - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>我们希望将这些数据顺序存放，并且支持在某个位置插入一条数据、删除一条数据、修改一些数据，这时候，数组就显得乏力了。因此需要使用更加高级的数据结构，就是线性表（Linear List）</p><blockquote><p>线性表是由一个类型的数据元素构成的有序存放的线性结构。线性表中元素的个数为线性表的长度，表的起始位称为表头，结束位称为表尾。当表中没有一个数据时，称为空表。</p></blockquote><p>线性表一包含以下功能：</p><ul><li><strong>初始化线性表：</strong>将一个线性表初始化，得到一个空表。</li><li><strong>获取指定位置的元素：</strong>直接获取线性表指定位置 $i$ 上的元素</li><li><strong>获取元素位置：</strong>获取某个元素在线性表上的位置 $i$</li><li><strong>插入元素：</strong>在指定位置 $i$ 上插入一个元素</li><li><strong>删除元素：</strong>删除指定位置 $i$ 上的一个元素</li><li><strong>获取长度：</strong>返回线性表的长度</li></ul><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>前面我们说到，既然数组无法实现这样的高级表结构，那么我就基于数组，对其进行强化，也就是说，我们存放数据还是使用数组,但是我们可以为其编写一些额外的操作来强化为线性表，像这样底层依然采用顺序存储实现的线性表，我们称为顺序表。</p><p>这里可以定义一个新的结构体类型，将</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span>&#123;</span><br>    E * <span class="hljs-built_in">array</span>;    <span class="hljs-comment">// 表示指向顺序表的底层数组</span><br>    <span class="hljs-type">int</span> capacity; <span class="hljs-comment">// 表示数组的容量</span><br>    <span class="hljs-type">int</span> size;  <span class="hljs-comment">// 表示表中元素的数量</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>初始化线性表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> * <span class="hljs-title">ArrayList</span>;</span>  <span class="hljs-comment">// 起别名</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = molloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">10</span>);<span class="hljs-comment">// 给array分配内存空间</span><br><span class="hljs-built_in">list</span>-&gt;capacity = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 设置容量大小为10</span><br>    <span class="hljs-built_in">list</span>-&gt;size = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 设置元素个数为0，因为没有插入值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还有一种情况需要考虑，如果申请内存空间失败，需要返回一个结果告诉使用者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = molloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 如果申请内存失败</span><br><span class="hljs-built_in">list</span>-&gt;capacity = <span class="hljs-number">10</span>;  <br>    <span class="hljs-built_in">list</span>-&gt;size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 正常返回1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样一个简单的顺序表就定义好了，我们可以通过<code>initList</code>函数来初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> <span class="hljs-title">list</span>;</span><span class="hljs-comment">// 创建新的结构体变量</span><br>    <span class="hljs-keyword">if</span>(initList(&amp;<span class="hljs-built_in">list</span>))&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化成功，可进行后续操作！&quot;</span>)<br>        ...<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败！&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>插入数据到线性表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>,E element,<span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-comment">// 判断插入的位置是否越界</span><br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size + <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果顺序表里的元素已经到达底层数组的最大值，此时需扩容</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;size == <span class="hljs-built_in">list</span>.capacity)&#123;<br>        <span class="hljs-comment">// 我们先计算一下容器的大小，这里用的1.5倍</span><br>        <span class="hljs-type">int</span> newCapacity = <span class="hljs-built_in">list</span>-&gt;capacity + (<span class="hljs-built_in">list</span>-&gt;capacity &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 这里使用新的函数realloc重新申请内存空间</span><br>        E * newArray = <span class="hljs-built_in">realloc</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>, newCapacity * <span class="hljs-keyword">sizeof</span>(E));<br>        <span class="hljs-comment">// 如果申请失败则返回空</span><br>        <span class="hljs-keyword">if</span> (newArray == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = newArray;<br>        <span class="hljs-built_in">list</span>-&gt;capacity = newCapacity;<br>    &#125;<br>    <span class="hljs-comment">// 在指定位置插入数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-built_in">list</span>-&gt;size; i &gt; index - <span class="hljs-number">1</span>; --i)&#123;<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-comment">// 首先刚初始化线性表时，插入数据</span><br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>] = element;<br>    <span class="hljs-built_in">list</span>-&gt;size++;  <span class="hljs-comment">// 表中元素加一</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>删除数据</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> index)</span><br>&#123;<br>    <span class="hljs-comment">// 判断越界条件</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 删除数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index - <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">list</span>-&gt;size--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取元素个数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>-&gt;size;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取指定位置数据</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">E <span class="hljs-title function_">get</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>,<span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-comment">// 如果越界则返回-1</span><br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>.size)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取指定数据的索引</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>,E element)</span>&#123;<br>    <span class="hljs-comment">// 遍历，如果找到返回索引下标，如果没找到就返回-1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] == element)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表不同于顺序表，顺序表底层采用数组作为存储容器，需要分配一块连续且完整的内存空间进行使用，而链表则不需要，它通过一个指针来连接各个分散的结点，形成了一个链状的结构，每个结点存放一个元素，以及一个指向下一个结点的指针，通过这样一个一个相连，最后形成了链表。它不需要申请连续的空间，只需要按照顺序连接即可，虽然物理上可能不相邻，但是在逻辑上依然是每个元素相邻存放的，这样的结构叫做链表（单链表)。</p><p>链表分为带头结点的链表和不带头结点的链表。戴头结点的链表就是会有一个头结点指向后续的整个链表，但是头结点不存放数据。如下图</p><p><img src="/../img/mdImg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%A6%E5%A4%B4%E9%93%BE%E8%A1%A8.png" alt="带头链表"></p><p>而不带头结点的链表就是第一个节点就是存放数据的结点，一般设计链表都会采用带头结点的结构，因为操作更加方便。如下图</p><p><img src="/../img/mdImg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%8D%E5%B8%A6%E5%A4%B4%E9%93%BE%E8%A1%A8.png" alt="不带头链表"></p><p>下面我们写一个带头节点的链表并且初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;  <span class="hljs-comment">// 保存当前元素</span><br>    Node next;  <span class="hljs-comment">// 指向下一个结点</span><br>&#125;;<br><br><span class="hljs-comment">// 初始化函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(Node node)</span> &#123;<br>    node-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着我们来设计链表的插入和删除，前面顺序表是通过移动数据的位置来进行插入和删除，那么链表插入应该怎么样呢？</p><ul><li>首先我们得让新插入结点的指针指向当前位置结点的地址，使当前结点变为新的结点的<strong>后继结点</strong></li><li>然后上一个结点的指针指向新插入的结点的地址，使上一个结点变为新的结点的<strong>前驱结点</strong></li></ul><p>插入结点具体代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 插入结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 判断是否越界</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 到指定位置去</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-comment">// 判断是否越界</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 申请结点</span><br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-comment">// 判断结点是否为空</span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    node-&gt;element = element;<br>    <span class="hljs-comment">// 连接结点</span><br>    node-&gt;next = head-&gt;next;<br>    head-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除结点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 删除结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-comment">// 判断是否越界</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 先用临时变量存放待删除结点，之后释放</span><br>    Node temp = head-&gt;next;<br>    head-&gt;next = head-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(temp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>查找指定位置数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取指定位置的数据</span><br>E <span class="hljs-title function_">get</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">while</span> (--index);<br>    <span class="hljs-keyword">return</span> head-&gt;element;<br>&#125;<br></code></pre></td></tr></table></figure><p>查找对应元素的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(Node head, E element)</span> &#123;<br>    <span class="hljs-comment">// 因为头节点没数据，所以先移到第一个节点</span><br>    head = head-&gt;next;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 计数器，求该数据在链表的位置</span><br>    <span class="hljs-keyword">while</span> (head) &#123;<br>        <span class="hljs-keyword">if</span> (head-&gt;element == element) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取链表长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(Node head)</span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(head-&gt;next)&#123;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by User on 2023/6/22.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;  <span class="hljs-comment">// 保存当前元素</span><br>    Node next;  <span class="hljs-comment">// 指向下一个结点</span><br>&#125;;<br><br><span class="hljs-comment">// 初始化函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(Node node)</span> &#123;<br>    node-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 插入结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 判断是否越界</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 到指定位置去</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-comment">// 判断是否越界</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 申请结点</span><br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-comment">// 判断结点是否为空</span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    node-&gt;element = element;<br>    <span class="hljs-comment">// 连接结点</span><br>    node-&gt;next = head-&gt;next;<br>    head-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-comment">// 判断是否越界</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 先用临时变量存放待删除结点，之后释放</span><br>    Node temp = head-&gt;next;<br>    head-&gt;next = head-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(temp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取指定位置的数据</span><br>E <span class="hljs-title function_">get</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">while</span> (--index);<br>    <span class="hljs-keyword">return</span> head-&gt;element;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(Node head, E element)</span> &#123;<br>    head = head-&gt;next;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (head) &#123;<br>        <span class="hljs-keyword">if</span> (head-&gt;element == element) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (head-&gt;next) &#123;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-comment">// 打印</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">while</span> (head-&gt;next) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, head-&gt;element);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initList(&amp;head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sizeList(&amp;head));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; ++i) &#123;<br>        insertList(&amp;head, i * <span class="hljs-number">100</span>, i);<br>    &#125;<br>    printList(&amp;head);<br>    deleteList(&amp;head, <span class="hljs-number">2</span>);<br>    printList(&amp;head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, get(&amp;head, <span class="hljs-number">2</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, getIndex(&amp;head, <span class="hljs-number">300</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sizeList(&amp;head));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题：</strong>什么情况使用顺序表，什么情况使用链表呢？</p><ul><li>通过分析顺序表和链表的特性我们不难发现，链表在随机访问元素时，需要通过遍历来完成，而顺序表则利用数组的特性直接访问得到，所以，当我们读取数据多于插入或是删除数据的情况下时，使用顺序表会更好。</li><li>而顺序表在插入元素时就显得有些鸡肋了，因为需要移动后续元素，整个移动操作会浪费时间，而链表则不需要，只需要修改结点指向即可完成插入，所以在频繁出现插入或删除的情况下，使用链表会更好。</li></ul><p>总结：当<strong>读大于写</strong>时，顺序表比链表好；当<strong>写大于读</strong>时，链表比顺序表好。</p><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>前面我们介绍了单链表，通过这样的链式存储，我们不用再像顺序表那样一次性申请一段连续的空间，而是只需要单独为结点申请内存空间，同时在插入和删除的速度上也比顺序表轻松。不过有一个问题就是，如果我们想要操作某一个结点，比如删除或是插入，那么由于单链表的性质，我们只能先去找到它的前驱结点，才能进行。</p><p>为了解决这种查找前驱结点非常麻烦的问题，我们可以让结点不仅保存指向后续结点的指针，同时也保存指向前驱结点的指针;</p><p><img src="/../img/mdimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" alt="双向链表"></p><p>下面我们尝试实现下双向链表，首先自定义好结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;<br>    Node prev;<br>    Node next;<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后初始化方法，初始化时前驱和后继都要设置为NULL：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 初始化方法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(Node head)</span> &#123;<br>    head-&gt;prev = head-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initList(&amp;head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 插入操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 首先判断是否越界</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 移到指定位置</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    node-&gt;element = element;<br><br>    <span class="hljs-keyword">if</span> (head-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        node-&gt;next = head-&gt;next;<br>        head-&gt;next-&gt;prev = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    head-&gt;next = node;<br>    node-&gt;prev = head;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 删除操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    Node temp = head-&gt;next;<br>    <span class="hljs-keyword">if</span> (head-&gt;next-&gt;next) &#123;<br>        head-&gt;next = temp-&gt;next;<br>        temp-&gt;next-&gt;prev = head;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>     <span class="hljs-built_in">free</span>(temp);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by User on 2023/6/23.</span><br><span class="hljs-comment">// 双向链表</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;<br>    Node prev;<br>    Node next;<br>&#125;;<br><br><span class="hljs-comment">// 初始化方法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(Node head)</span> &#123;<br>    head-&gt;prev = head-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 插入操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 首先判断是否越界</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 移到指定位置</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    node-&gt;element = element;<br><br>    <span class="hljs-keyword">if</span> (head-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        node-&gt;next = head-&gt;next;<br>        head-&gt;next-&gt;prev = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    head-&gt;next = node;<br>    node-&gt;prev = head;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    Node temp = head-&gt;next;<br>    <span class="hljs-keyword">if</span> (head-&gt;next-&gt;next) &#123;<br>        head-&gt;next = temp-&gt;next;<br>        temp-&gt;next-&gt;prev = head;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>     <span class="hljs-built_in">free</span>(temp);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initList(&amp;head);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; ++i) &#123;<br>        insertList(&amp;head, i * <span class="hljs-number">10</span>, i);<br>    &#125;<br><br>    Node node = &amp;head;<br><br>    deleteList(node,<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        node = node-&gt;next;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, node-&gt;element);<br>    &#125; <span class="hljs-keyword">while</span> (node-&gt;next != <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>接着我们再来简单认识一下另一种类型的链表，循环链表，这种链表实际上和前面我们讲的链表是一样的，但是它的最后一个结点是与头结点相连的，双向链表和单向链表都可以做成这样的环形结构，我们这里以单链表为例:</p><p><img src="/../img/mdimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt="循环链表"></p><p>这种类型的链表实际上与普通链表的唯一区别就在于最后是否连接到头结点，因此循环链表支持从任意一个结点出发都可以到达任何的结点，而普通的链表则只能从头结点出发才能到达任意结点，同样也是为了更灵活而设计的。</p><h2 id="特殊线性表"><a href="#特殊线性表" class="headerlink" title="特殊线性表"></a>特殊线性表</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈（也叫堆栈，stack）是一种特殊的线性表，只能在表尾进行插入和删除操作。如下图：</p><p><img src="/../img/mdimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88.png" alt="栈"></p><p>因此，它具有<strong>先进后出</strong>的特点。</p><p><img src="/../img/mdimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%87%BA%E5%85%A5%E6%A0%88%E9%A1%BA%E5%BA%8F.png" alt="操作次序"></p><p>底部称为<strong>栈底</strong>，顶部称为<strong>栈顶</strong>，所有操作只能在<strong>栈顶</strong>进行操作。之后栈顶操作完之后才能操作下面的，它是一种先进后出的数据结构（FILO，First In，Last Out）</p><ul><li><code>pop</code>：出栈操作，在栈顶取出一个元素</li><li><code>push</code>：入栈操作，在栈顶压入一个元素</li></ul><p>代码实现，首先定义结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> *<span class="hljs-title">ArrayStack</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> &#123;</span><br>    E *<span class="hljs-built_in">array</span>;<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> top;  <span class="hljs-comment">// 这里使用top来表示但前栈顶的位置</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>初始化操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">initStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(E) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">stack</span>-&gt;capacity = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">stack</span>-&gt;top = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 初始化栈的时候，栈顶元素默认是-1，因为此时栈里还没有一个元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>入栈操作（插入）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pushStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>, E element)</span> &#123;<br>    <span class="hljs-comment">// 扩容</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stack</span>-&gt;top + <span class="hljs-number">1</span> == <span class="hljs-built_in">stack</span>-&gt;capacity) &#123;<br>        <span class="hljs-type">int</span> newCapacity = <span class="hljs-built_in">stack</span>-&gt;capacity + (<span class="hljs-built_in">stack</span>-&gt;capacity &gt;&gt; <span class="hljs-number">1</span>);<br>        E *newArray = <span class="hljs-built_in">realloc</span>(<span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>, newCapacity * <span class="hljs-keyword">sizeof</span>(E));<br>        <span class="hljs-keyword">if</span> (newArray == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> = newArray;<br>        <span class="hljs-built_in">stack</span>-&gt;capacity = newCapacity;<br>    &#125;<br>    <span class="hljs-built_in">stack</span>-&gt;top++;<br>    <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">stack</span>-&gt;top] = element;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断栈是否为空：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">stack</span>-&gt;top == <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>出栈操作（删除）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 出栈</span><br>E <span class="hljs-title function_">popStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    E num = <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">stack</span>-&gt;top];<br>    <span class="hljs-built_in">stack</span>-&gt;top--;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by User on 2023/6/23.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> *<span class="hljs-title">ArrayStack</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> &#123;</span><br>    E *<span class="hljs-built_in">array</span>;<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> top;  <span class="hljs-comment">// 这里使用top来表示但前栈顶的位置</span><br>&#125;;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">initStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(E) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">stack</span>-&gt;capacity = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">stack</span>-&gt;top = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 初始化栈的时候，栈顶元素默认是-1，因为此时栈里还没有一个元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">stack</span>-&gt;top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pushStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>, E element)</span> &#123;<br>    <span class="hljs-comment">// 扩容</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stack</span>-&gt;top + <span class="hljs-number">1</span> == <span class="hljs-built_in">stack</span>-&gt;capacity) &#123;<br>        <span class="hljs-type">int</span> newCapacity = <span class="hljs-built_in">stack</span>-&gt;capacity + (<span class="hljs-built_in">stack</span>-&gt;capacity &gt;&gt; <span class="hljs-number">1</span>);<br>        E *newArray = <span class="hljs-built_in">realloc</span>(<span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>, newCapacity * <span class="hljs-keyword">sizeof</span>(E));<br>        <span class="hljs-keyword">if</span> (newArray == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> = newArray;<br>        <span class="hljs-built_in">stack</span>-&gt;capacity = newCapacity;<br>    &#125;<br>    <span class="hljs-built_in">stack</span>-&gt;top++;<br>    <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">stack</span>-&gt;top] = element;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈</span><br>E <span class="hljs-title function_">popStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    E num = <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">stack</span>-&gt;top];<br>    <span class="hljs-built_in">stack</span>-&gt;top--;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><br><br><span class="hljs-comment">// 打印</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-built_in">stack</span>-&gt;top; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> <span class="hljs-title">stack</span>;</span><br>    initStack(&amp;<span class="hljs-built_in">stack</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; ++i) &#123;<br>        pushStack(&amp;<span class="hljs-built_in">stack</span>, i * <span class="hljs-number">10</span>);<br>    &#125;<br>    printStack(&amp;<span class="hljs-built_in">stack</span>);<br>    <span class="hljs-keyword">while</span> (!isEmpty(&amp;<span class="hljs-built_in">stack</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, popStack(&amp;<span class="hljs-built_in">stack</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有时候，栈的利用率比较低，这时候我们可以将一个固定长度的数组共享给两个栈使用：</p><p><img src="/../img/mdimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%85%B1%E4%BA%AB%E6%A0%88.png" alt="共享栈"></p><p>数组的两头分别作为两个栈的栈底，当两个栈的栈顶指计相遇时（栈顶指针下标之差绝对值为1时)，表示栈已满。通过这种方式，我们就可以将数组占用的空间更充分地使用，这样的栈我们称为<strong>共享栈</strong></p><p>前面我们使用了顺序表实现栈，下面我们演示通过链表来实现栈。</p><p><img src="/../img/mdimg/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E6%A0%88.png" alt="链栈"></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot3学习笔记--Spring3-核心特性</title>
    <link href="/2023/06/21/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/21/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot3快速入门"><a href="#SpringBoot3快速入门" class="headerlink" title="SpringBoot3快速入门"></a>SpringBoot3快速入门</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><h4 id="1-1-环境要求"><a href="#1-1-环境要求" class="headerlink" title="1.1 环境要求"></a>1.1 环境要求</h4><table><thead><tr><th align="center">工具</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">Springboot</td><td align="center">3.x+</td></tr><tr><td align="center">IDEA</td><td align="center">2021.2.1+</td></tr><tr><td align="center">JDK</td><td align="center">17+</td></tr><tr><td align="center">Maven</td><td align="center">3.5+</td></tr><tr><td align="center">Tomcat</td><td align="center">10.0+</td></tr><tr><td align="center">Servlet</td><td align="center">5.0+</td></tr><tr><td align="center">GraalVM Community</td><td align="center">22.3+</td></tr><tr><td align="center">Native Build Tools</td><td align="center">0.0.19+</td></tr></tbody></table><h4 id="1-2-Springboot是什么"><a href="#1-2-Springboot是什么" class="headerlink" title="1.2 Springboot是什么"></a>1.2 Springboot是什么</h4><p>Springboot帮我们简单、快速地创建一个独立的生产级别的Spring应用。大多数Springboot应用只需要编写少量配置即可快速整合Spring平台以及第三方技术。</p><p><strong>特性：</strong></p><ul><li>能够<strong>快速创建</strong>独立Spring应用</li><li>直接<strong>嵌入</strong>Tomcat，Jetty和Undertow（无需部署war包）</li><li>提供可选的<strong>starter</strong>，简化应用整合</li><li>按需<strong>自动配置</strong>Spring以及第三方库</li><li>提供<strong>生产级特性</strong>：如 监控指标、健康检查、外部化部署等</li><li>无代码生成，<strong>无xml</strong></li></ul><p>总结：简化开发、简化配置、简化整合、简化部署、简化监控、简化运维</p><h3 id="2、快速体验"><a href="#2、快速体验" class="headerlink" title="2、快速体验"></a>2、快速体验</h3><h4 id="2-1-开发流程"><a href="#2-1-开发流程" class="headerlink" title="2.1 开发流程"></a>2.1 开发流程</h4><ol><li>创建maven项目，并继承springboot父maven</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--所有springboot项目木都必须继承spring-boot-starter-parent--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>导入场景（场景启动器）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--web开发场景启动器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>主程序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>编写业务类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello,Spring Boot&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>测试</li></ol><p>默认访问：localhost:8080</p><ol start="6"><li>打包（引入打包插件）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>mvn clean</code>先清除target文件，在使用<code>mvn package</code>把项目打成jar包</p><p><code>java -jar xxxxx.jar</code>启动项目</p><p>还可以使用Spring Initializer来快速创建</p><h3 id="3、应用分析"><a href="#3、应用分析" class="headerlink" title="3、应用分析"></a>3、应用分析</h3><h4 id="3-1-依赖管理机制"><a href="#3-1-依赖管理机制" class="headerlink" title="3.1 依赖管理机制"></a>3.1 依赖管理机制</h4><p><img src="/../img/mdimg/springboot/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6.png" alt="依赖管理机制"></p><h4 id="3-2自动配置机制"><a href="#3-2自动配置机制" class="headerlink" title="3.2自动配置机制"></a>3.2自动配置机制</h4><h5 id="1、初步理解"><a href="#1、初步理解" class="headerlink" title="1、初步理解"></a>1、初步理解</h5><ul><li><p>自动配置的Tomcat、SpringMVC等</p><ul><li><p>导入场景，容器中就会自动配置这个场景的核心组件。</p></li><li><p>以前：DispatcherServlet、ViewResolver、CharacterEncodingFilter …</p></li><li><p>现在：自动配置好这些组件</p></li><li><p>验证：容器中有什么组件，就具有什么功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// java10：局部变量类型的自动推断</span><br>    <span class="hljs-type">var</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>    <span class="hljs-comment">// 1、获取容器中所有组件的名字</span><br>    String[] names = ioc.getBeanDefinitionNames();<br>    <span class="hljs-comment">// spring boot把以前配置的核心组件现在都配置好了</span><br>    <span class="hljs-keyword">for</span> (String name : names) &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>默认的包扫描规则</p><ul><li><p><code>@SpringBootApplication</code>标注的类就是主程序类</p></li><li><p>SpringBoot只会扫描主程序所在的包及其下面的子包，自动的component-scan功能</p></li><li><p>自定义扫描路经</p><ul><li><code>@SpringBootApplication(scanBasePackages = &quot;xxx.xxx&quot;)</code></li><li><code>@ComponentScan(xxx.xxx)</code>：直接指定扫描的路径</li></ul></li><li><p>配置默认值</p><ul><li>配置文件的所有配置项是和某个类的对象值进行一一绑定的</li><li>绑定了配置文件中每一项的值的类：<strong>配置属性类</strong></li><li>比如：<ul><li><code>ServerProperties</code>绑定了所有Tomcat服务器有关的配置</li><li><code>MultipartProperties</code>绑定了所有文件上传的相关的配置</li><li>其他参照[官网文档](<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">Common Application Properties (spring.io)</a>)</li></ul></li></ul></li><li><p>按需加载自动配置</p><ul><li>导入场景<code>spring-boot-starter-web</code></li><li>场景启动器除了会导入相关功能依赖，还导入了一个<code>spring-boot-starter</code>，是所有的<code>starter</code>的<code>starter</code>，基础核心<strong>starter</strong></li><li><code>spring-boot-starter</code>还导入了一个包，<code>spring-boot-autoconfigure</code>。包里面都是各种场景的<code>AutoConfiguration</code><strong>自动配置类</strong></li><li>虽然全场景的自动配置都在<code>spring-boot-autoconfigure</code>这个包，但是不全是开启的</li></ul></li></ul></li></ul><h5 id="2、完整流程"><a href="#2、完整流程" class="headerlink" title="2、完整流程"></a>2、完整流程</h5><p><img src="/../img/mdimg/springboot/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%9C%BA%E5%88%B6%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B.png" alt="自动配置机制流程"></p><ul><li>一：导入<code>starter</code>：比如<code>starter-web</code>就是导入了web开发场景<ul><li>1、每个<code>starter</code>都引入了<code>spring-boot-autoconfigure</code>包</li><li>2、<code>spring-boot-autoconfigure</code>里面囊括了所有场景的所有配置</li><li>3、只要这个包下的所有类都能生效，相当于springBoot官方写好的所有整合功能生效了</li><li>4、SpringBoot默认扫描不到<code>spring-boot-autoconfigure</code>下写好的所有配置类</li></ul></li><li>二：主程序：<code>@SpringBootApplication</code><ul><li>1、<code>@SpringBootApplication</code>由三个注解组成<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code></li><li>2、SpringBoot默认只扫描自己主程序所在的包及其下面的子包，扫描不到<code>spring-boot-autoconfigure</code>包中官方写好的配置类</li><li>3、<code>@EnableAutoConfiguration</code>：SpringBoot开启自动配置的核心<ul><li>1、是由<code>@Import(&#123;AutoConfigurationImportSelector.class&#125;)</code>提供功能：批量给容器中导入组件</li><li>2、SpringBoot启动会默认加载146个配置类（版本3.1.0）</li><li>3、这146个来自于<code>METAINF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></li><li>4、按需生效：并不是这<code>146</code>个自动装配类都能生效，每一个自动装配类都有条件注解<code>@ConditionalOnXxx</code>,只有条件成立，才能生效</li></ul></li></ul></li><li>三：写业务，全程无需关心各种整合（底层都整合好了，且生效了）</li></ul><h5 id="3、如何学好SpringBoot"><a href="#3、如何学好SpringBoot" class="headerlink" title="3、如何学好SpringBoot"></a>3、如何学好SpringBoot</h5><blockquote><p>框架的框架，底层基于Spring。</p></blockquote><ol><li><p>理解<strong>自动装配原理</strong></p><p>a、<strong>导入starter</strong> –&gt; 生效xxxAutoConfiguration –&gt; <strong>组件</strong> –&gt; xxxPreperties –&gt; <strong>配置文件</strong></p></li><li><p>理解<strong>其他框架底层</strong></p></li><li><p>可以随时<strong>定制化任何组件</strong></p><p>a、改配置文件</p><p>b、自定义组件</p></li></ol><p>核心：</p><ul><li>这个场景自动配置导入了哪些组件，我们能不能Autowired进来使用</li><li>能不能通过修改配置改变组件的一些默认参数</li><li>需不需要完全定义这个组件</li><li><strong>场景定制化</strong></li></ul><h3 id="4、核心技能"><a href="#4、核心技能" class="headerlink" title="4、核心技能"></a>4、核心技能</h3><h4 id="4-1-常用注解"><a href="#4-1-常用注解" class="headerlink" title="4.1. 常用注解"></a>4.1. 常用注解</h4><blockquote><p>SpringBoot摒弃xml配置方式，改为全注解驱动</p></blockquote><h5 id="1、组件注解"><a href="#1、组件注解" class="headerlink" title="1、组件注解"></a>1、组件注解</h5><p><code>@Configuration</code>：替代以前的xml配置文件，配置类本身也是容器中的组件<br><code>@SpringBootConfiguration</code>：与@Configuration无区别，就是名字不一样<br><code>@Bean</code>：替代以前的Bean标签，组件在容器中的名字默认是方法名，如果修改了注解的值，则名字是注解的值<br><code>@Scope</code>：替代以前Bean标签里的scpoe属性，设置组件是否为单实例或多实例（默认都是单实例的）<br><code>@Import</code>：导入第三方的的组件到 ioc 容器中，组件名默认是全类名<br>@Controller、@Service、@Repository、@Component、@ComponentScan</p><p>使用步骤：</p><ol><li>编写一个配置类使用@Configuration修饰</li><li>在配置类中，自定义方法给容器中注册组件，配合@Bean</li><li>或使用@Import导入第三方的组件</li></ol><h5 id="2、条件注解"><a href="#2、条件注解" class="headerlink" title="2、条件注解"></a>2、条件注解</h5><blockquote><p>如果注解指定的条件成立，则触发指定行为</p></blockquote><p><span style="color:red">@ConditionalOnXxx</span></p><p><span style="color:blue">@ConditionalOnClass：如果类路径中存在这个类，则触发指定行为</span></p><p><span style="color:blue">@ConditionalOnMissClass：如果类路径中不存在这个类，则触发指定行为</span></p><p><span style="color:blue">@ConditionalOnBean：如果容器中存在这个Bean，则触发指定行为</span></p><p><span style="color:blue">@ConditionalOnMissBean：如果容器中不存在这个Bean，则触发指定行为</span></p><blockquote><p>场景：</p><ul><li>如果存在<code>FastsqlException</code>这个类，给容器中放一个<code>cat</code>组件，名为cat01，否则就在容器中放一个<code>Dog</code>组件，名为dog01</li><li>如果系统中有<code>dog01</code>这个组件，就在容器中放一个User组件，名为zhangsan，否则，就名叫lisi<br>实现：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig2</span> &#123;<br><br>    <span class="hljs-meta">@ConditionalOnClass(name = &quot;com.alibaba.druid.FastsqlException&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">cat01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@ConditionalOnMissingClass(value = &quot;com.alibaba.druid.FastsqlException&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">dog01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@ConditionalOnBean(name = &quot;dog01&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">zhangsan</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;dog01&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">lisi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h5 id="3、属性绑定"><a href="#3、属性绑定" class="headerlink" title="3、属性绑定"></a>3、属性绑定</h5><p>@ConfigurationProperties<br>@EnableConfigurationProperties ：开启某个类与配置文件的绑定</p><blockquote><p>在容器中任意组件（Bean）的<strong>属性值</strong>和<strong>配置文件</strong>的配置项的值进行绑定</p><p>1、给容器中注册组件（@Component、@Bean）</p><p>2、使用@ConfigurationProperties 声明组件和配置文件的哪些配置项进行绑定</p></blockquote><h4 id="4-2-YAML配置文件"><a href="#4-2-YAML配置文件" class="headerlink" title="4.2. YAML配置文件"></a>4.2. YAML配置文件</h4><p>加载顺序：yml &gt; yaml &gt; properties</p><blockquote><p>痛点：SpringBoot集中化管理配置，<code>application.properties</code></p><p>问题：配置多以后很难阅读和修改，层次结构辨识度不高</p></blockquote><blockquote><p><strong>YAML</strong> 目前的官方全称为 “<strong>YAML Ain’t Markup Language</strong>（YAML 不是标记语言）”，但有意思的是，其实 YAML 最初的含义是 “<strong>Yet Another Markup Language</strong>（还是一种标记语言）”</p></blockquote><blockquote><p>设计目标：为了<strong>方便阅读</strong></p><p>层次分明，更适合做配置文件</p><p>使用.yaml和.yml作为文件后缀</p></blockquote><h5 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h5><ul><li>大小写敏感</li><li>使用缩进表示层级关系，k:v，使用空格分割k，v</li><li>缩进时不允许使用Tab，只允许<strong>使用空格</strong></li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><strong># 表示注释</strong>，从这个字符一直到行尾，都会被解析器忽略</li></ul><p>支持的写法</p><ul><li>对象：<strong>键值对</strong>的集合，如：映射（map）&#x2F;哈希（hash）&#x2F;字典（dictionary）</li><li>数组：一组按次序排列的值，如：序列（sequence）&#x2F;列表（list）</li><li>纯量：单个的、不可分割的值，如：字符串、数字、bool、日期</li></ul><h5 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h5><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span>  <span class="hljs-comment">// 和配置文件中所有以person前缀进行绑定</span><br><span class="hljs-meta">@Data</span>  <span class="hljs-comment">// 自动生成JavaBean属性的getter/setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> Boolean like;<br>    <span class="hljs-keyword">private</span> Child child;<br>    <span class="hljs-keyword">private</span> List&lt;Dog&gt; dogs;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Cat&gt; cats;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; text;  <span class="hljs-comment">// 集合类型的</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>properties文件和yaml文件都是配置文件</p></blockquote><p>properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">person.name</span>=<span class="hljs-string">zhangsan</span><br><span class="hljs-attr">person.age</span>=<span class="hljs-string">18</span><br><span class="hljs-attr">person.birthday</span>=<span class="hljs-string">2001/10/10 10:10:10</span><br><span class="hljs-attr">person.like</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">person.child.name</span>=<span class="hljs-string">lisi</span><br><span class="hljs-attr">person.child.age</span>=<span class="hljs-string">12</span><br><span class="hljs-attr">person.child.birthday</span>=<span class="hljs-string">2008/10/10 10:10:10</span><br><span class="hljs-attr">person.child.text[0]</span>=<span class="hljs-string">abc</span><br><span class="hljs-attr">person.child.text[1]</span>=<span class="hljs-string">def</span><br><span class="hljs-attr">person.dogs[0].name</span>=<span class="hljs-string">xiaob</span><br><span class="hljs-attr">person.dogs[1].name</span>=<span class="hljs-string">xiaoh</span><br><span class="hljs-attr">person.cats.c1.name</span>=<span class="hljs-string">xiaol</span><br><span class="hljs-attr">person.cats.c2.name</span>=<span class="hljs-string">xiaog</span><br></code></pre></td></tr></table></figure><p>yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zhangs</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">birthday:</span> <span class="hljs-number">2001</span><span class="hljs-string">/10/10</span> <span class="hljs-number">10</span><span class="hljs-string">:10:10</span><br>  <span class="hljs-attr">like:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">child:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">lisi</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">birthday:</span> <span class="hljs-number">2008</span><span class="hljs-string">/10/10</span> <span class="hljs-number">10</span><span class="hljs-string">:10:10</span><br>    <span class="hljs-attr">text:</span> [ <span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span> ]<br>  <span class="hljs-attr">dogs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xb</span><br>  <span class="hljs-attr">cats:</span><br>    <span class="hljs-attr">c1:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">xx</span><br>    <span class="hljs-attr">c2:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">xy</span>&#125;  <span class="hljs-comment"># 对象也可这么表示</span><br></code></pre></td></tr></table></figure><h5 id="3、使用细节"><a href="#3、使用细节" class="headerlink" title="3、使用细节"></a>3、使用细节</h5><ul><li>驼峰命名的推荐使用 - 连接。比如：birthDay &#x3D;&#x3D; birth-day</li><li>文本：<ul><li><strong>单引号</strong>不会转义【认为 \n 为普通字符】</li><li><strong>双引号</strong>会转义【 \n 为<strong>换行符</strong>】</li></ul></li><li>大文本：<ul><li><code>|</code>开头，大文本写在下层，保留文本格式，换行符正确显示</li><li><code>&gt;</code>开头，大文本写在下层，折叠换行符，以空格代替</li></ul></li><li>多文档合并<ul><li>使用<code>---</code>可以把多个yaml文档合并在一个文档中，每个文档依然内容独立</li></ul></li></ul><h4 id="4-3-日志配置"><a href="#4-3-日志配置" class="headerlink" title="4.3. 日志配置"></a>4.3. 日志配置</h4><blockquote><p>规范：项目开发不要编写<code>System.out.println() </code>，应该用<strong>日志</strong>记录信息</p></blockquote><p><img src="/../img/mdimg/springboot/%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2%E5%92%8C%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0.png" alt="日志门面和日志实现"></p><h5 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h5><ol><li>Spring使用<code>commons-logging</code>作为内部日志，但底层日志实现是开放的。可对接其他日志框架。</li><li>支持<code>java.util.logging</code>、<code>log4j</code>、<code>logback</code>。SpringBoot提供了默认的控制台输出配置，也可以配置输出文件。</li><li><code>logback</code>是默认使用的</li><li>SpringBoot使用的是<code>slf4j</code>+<code>logback</code>组合</li></ol><p>SpringBoot怎么把日志默认配置好的</p><ol><li>每个<code>starter</code>场景，都会导入一个核心场景<code>spring-boot-starter</code></li><li>核心场景引入了日志的所有功能<code>spring-boot-starter-longging</code></li><li>默认使用了<code>slf4j</code>+<code>logback</code>组合作为默认底层日志</li><li>日志系统一启动就要用，<code>xxxAutoConfiguration</code>是系统启动好后，再用到的自动配置组件</li><li>日志是利用监听器机制配置好的，<code>ApplicationListener</code></li><li>日志所有的配置都可以通过配置文件修改实现</li></ol><h5 id="2、日志格式"><a href="#2、日志格式" class="headerlink" title="2、日志格式"></a>2、日志格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">2023-06-22T23:28:38.274+08:00  INFO 17680 --- [           main] com.huang.Boot303LoggingApplication      : No active profile set, falling back to 1 default profile: &quot;default&quot;<br>2023-06-22T23:28:39.275+08:00  INFO 17680 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)<br></code></pre></td></tr></table></figure><p>默认输出格式：</p><ul><li>时间日期：毫秒级精度</li><li>日志级别：<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code>、<code>TRACE</code></li><li>进程ID</li><li><code>---</code>：消息分隔符</li><li>线程名：使用[]包括</li><li>Logger名：通常为产生日志的类名</li><li>消息：日志记录的内容</li></ul><p>注意：logback没有<code>FATAL</code>级别，对应的是<code>ERROR</code></p><h5 id="3、记录日志"><a href="#3、记录日志" class="headerlink" title="3、记录日志"></a>3、记录日志</h5><ul><li><p>方案一：可以在类中定义变量来记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br></code></pre></td></tr></table></figure></li><li><p>方案二：使用lombak注解<code>@Slf4j</code></p></li></ul><h5 id="4、日志级别"><a href="#4、日志级别" class="headerlink" title="4、日志级别"></a>4、日志级别</h5><ul><li>由低到高：<code>ALL</code>、<code>TRACE</code>、<code>DEBUG</code>、<code>INFO</code>、<code>WARN</code>、<code>ERROR</code>、<code>FATAL</code>、<code>OFF</code>；<ul><li><strong>只会打印指定级别及以上级别的日志</strong></li><li>ALL：打印所有日志</li><li>TRACE：追踪框架详细流程日志，一般不使用</li><li>DEBUG：开发调试细节日志</li><li>INFO：关键信息日志</li><li>WARN：警告但不是错误的信息日志</li><li>ERROR：业务错误日志</li><li>FATAL：致命错误日志，比如JVM系统奔溃</li><li>OFF：关闭所有日志记录</li></ul></li><li>不指定级别的所有类，都是用root指定的级别作为默认级别</li><li><span style="color:red">SpringBoot日志默认级别是INFO</span></li></ul><p>在<code>application.yaml</code>中配置<code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code>指定日志级别</p><h5 id="5、日志分组"><a href="#5、日志分组" class="headerlink" title="5、日志分组"></a>5、日志分组</h5><p>比较有用的技巧。</p><p>将相关的<strong>logger</strong>分组在一起，统一配置，SpringBoot也支持。比如：Tomcat相关的日志统一设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.grougl.tomcat</span>=<span class="hljs-string">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span><br><span class="hljs-attr">logging.level.tomcat</span>=<span class="hljs-string">trace</span><br></code></pre></td></tr></table></figure><p>SpringBoot 预定义两个组</p><table><thead><tr><th align="center">Name</th><th align="left">Loggers</th></tr></thead><tbody><tr><td align="center">web</td><td align="left"><code>org.springframework.core.codec,org.springframework.http,</code><br /><code>org.springframework.web,</code><br /><code>org.springframework.boot.actuate.endpoint.web</code>,<br /><code>org.springframework.boot.web.servlet.ServletContextinitializerBeans</code></td></tr><tr><td align="center">sql</td><td align="left"><code>org.springframework.jdbc.core</code>, <br /><code>org.hibernate.SQL</code>,<br /><code> org.jooq.tools.LoggerListener</code></td></tr></tbody></table><h5 id="6、文件输出"><a href="#6、文件输出" class="headerlink" title="6、文件输出"></a>6、文件输出</h5><p>SpringBoot默认把日志打印到控制台，如果想将日志文件保存到磁盘，可以在<code>application.yaml</code>中添加<code>logging.file.name</code>或则<code>logging.file.path</code>配置项</p><table><thead><tr><th align="center">logging.file.name</th><th align="center">logging.file.path</th><th align="center">示例</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">未指定</td><td align="center">未指定</td><td align="center"></td><td align="center">仅控制台输出</td></tr><tr><td align="center"><strong>指定</strong></td><td align="center">未指定</td><td align="center">my.log</td><td align="center">在此项目下出现<code>my.log</code>文件，也可<code>加路径</code>将其指定到其他磁盘上</td></tr><tr><td align="center">未指定</td><td align="center"><strong>指定</strong></td><td align="center">D:&#x2F;</td><td align="center">写入指定目录，文件名为<code>spring.log</code></td></tr><tr><td align="center"><strong>指定</strong></td><td align="center"><strong>指定</strong></td><td align="center"></td><td align="center">以<code>logging.file.name</code>为准</td></tr></tbody></table><h5 id="7、文件归档与滚动切割"><a href="#7、文件归档与滚动切割" class="headerlink" title="7、文件归档与滚动切割"></a>7、文件归档与滚动切割</h5><blockquote><p>归档：每一天的日志单独存到一个文档中。</p><p>切割：每个文件10MB，如果超过则切割成另一个文件。</p></blockquote><ul><li>每天的日志应该独立分割出来存档，如果使用<code>logback</code>（SpringBoot）默认整合，可以通过<code>applicaiton.preperties/yaml</code>文件指定日志滚动规则</li><li>如果是其他日志系统，需自行配置配置文件（添加<code>log4j.xml</code>或<code>log4j2-spring.xml</code>）</li><li>支持的滚动规则设置如下：</li></ul><table><thead><tr><th align="center">配置项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>logging.logback.rollingpolicy.file-name-pattern</code></td><td align="center">日志存档的文件名称格式（默认值：<code>$&#123;LOG_FILE&#125;.%d[yyyy-MM-dd].%i.gz</code>）</td></tr><tr><td align="center"><code>logging.logback.rollingpolicy.max-file-size</code></td><td align="center">存档前，每个日志文件的最大大小（默认值：10MB）</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地Java连接虚拟机Redis报错</title>
    <link href="/2023/06/20/%E6%9C%AC%E5%9C%B0Java%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BARedis%E6%8A%A5%E9%94%99/"/>
    <url>/2023/06/20/%E6%9C%AC%E5%9C%B0Java%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BARedis%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>报错：Exception in thread “main” redis.clients.jedis.exceptions.JedisConnectionException: Failed to connect to any host resolved for DNS name.</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>连接超时错误。这种情况下先要确认虚拟机是否开启redis服务（我就是没有开启，哈哈尴尬）。如何查看服务是否开启，可以用这个命令（我的虚拟机操作系统是centos7）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ps -ef | grep redis<br></code></pre></td></tr></table></figure><p>如果出现redis进程则说明服务开启了。还报错那八成是防火墙的问题。有两个解决方案。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>一是直接关闭防火墙</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 关闭防火墙<br>systemctl stop firewalld.service <br># 重新加载防火墙<br>firewalld-<span class="hljs-built_in">cmd</span> --reload<br># 查看防火墙状态<br>systemctl status firewalld.service<br></code></pre></td></tr></table></figure><p>另一个是将redis的端口设置为开放端口</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">firewall-<span class="hljs-built_in">cmd</span> --zone=public --add-port=端口号/tcp --parmanent<br># 重新加载防火墙<br>firewall-<span class="hljs-built_in">cmd</span> --reload<br># 查看防火墙已开放的端口<br>firewall-<span class="hljs-built_in">cmd</span> --list-ports<br></code></pre></td></tr></table></figure><p><span style="color:red">另外可能还会出现以下两种报错！！！</span></p><h2 id="Connection-refused-拒绝访问"><a href="#Connection-refused-拒绝访问" class="headerlink" title="Connection refused 拒绝访问"></a>Connection refused 拒绝访问</h2><p>报错：Exception in thread “main” redis.clients.jedis.exceptions.JedisConnectionException: Connection refused</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>修改redis.conf配置文件，注释掉 bind 那行，然后重启redis服务</p><h2 id="DENIED-Redis-is-running-in-protected-mode（保护模式）"><a href="#DENIED-Redis-is-running-in-protected-mode（保护模式）" class="headerlink" title="DENIED Redis is running in protected mode（保护模式）"></a>DENIED Redis is running in protected mode（保护模式）</h2><p>报错：redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. </p><p>只截了一部分报错信息。</p><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>这是因为在redis.conf中开启了保护模式<code>protected-mode yes</code></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>将yes 改为 no即可，然后重启redis服务</p>]]></content>
    
    
    <categories>
      
      <category>DEBUG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Redis</title>
    <link href="/2023/06/20/SpringBoot%E6%95%B4%E5%90%88Redis/"/>
    <url>/2023/06/20/SpringBoot%E6%95%B4%E5%90%88Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot集成Redis"><a href="#SpringBoot集成Redis" class="headerlink" title="SpringBoot集成Redis"></a>SpringBoot集成Redis</h1><p>本地Java连接Redis常见问题</p><ul><li>bind配置注释掉</li><li>保护模式设置为no</li><li>Linux系统的防火墙设置</li><li>redis服务器的IP地址和密码是否正确</li><li>redis的服务的端口号和auth密码</li></ul><h2 id="集成Jedis"><a href="#集成Jedis" class="headerlink" title="集成Jedis"></a>集成Jedis</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Jedis Client是Redis官网推荐的一个面向Java客户端，库文件实现了对各类API进行封装调用</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1、新建项目模块</p><p>2、在<code>pom.xml</code>引入依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0-alpha2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.demo;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 9:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REDIS_IP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;192.168.197.132&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">REDIS_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-number">6379</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、指定IP和端口获得连接</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(REDIS_IP, REDIS_PORT);<br><br>        <span class="hljs-comment">// 2、指定访问服务器的密码</span><br>        jedis.auth(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-comment">// 3、获得到jedis客户端，可以操作了</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ping</span> <span class="hljs-operator">=</span> jedis.ping();<br>        System.out.println(ping);<br><br>        <span class="hljs-comment">// keys</span><br>        Set&lt;String&gt; keys = jedis.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        System.out.println(keys);<br><br>        <span class="hljs-comment">// string</span><br>        jedis.set(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;hello-jedis&quot;</span>);<br>        System.out.println(jedis.get(<span class="hljs-string">&quot;k3&quot;</span>));<br>        System.out.println(jedis.ttl(<span class="hljs-string">&quot;k3&quot;</span>));<br>        jedis.expire(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-number">20L</span>);<br><br>        <span class="hljs-comment">// list</span><br>        jedis.lpush(<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>);<br>        List&lt;String&gt; list = jedis.lrange(<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (String element : list) &#123;<br>            System.out.print(element + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// set</span><br>        jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;jd001&quot;</span>);<br>        jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;jd002&quot;</span>);<br>        jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;jd003&quot;</span>);<br>        Set&lt;String&gt; orders = jedis.smembers(<span class="hljs-string">&quot;orders&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (Iterator&lt;String&gt; iterator = orders.iterator(); iterator.hasNext(); ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.print(next + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        jedis.srem(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;jd002&quot;</span>);<br>        System.out.println(jedis.smembers(<span class="hljs-string">&quot;orders&quot;</span>).size());<br><br>        <span class="hljs-comment">// hash</span><br>        jedis.hset(<span class="hljs-string">&quot;hash1&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>);<br>        System.out.println(jedis.hget(<span class="hljs-string">&quot;hash1&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>));<br><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;telephone&quot;</span>, <span class="hljs-string">&quot;124421521414&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;safas&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;qeaf@qq.com&quot;</span>);<br>        jedis.hmset(<span class="hljs-string">&quot;hash2&quot;</span>, map);<br><br>        <span class="hljs-comment">// zset</span><br>        jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">60D</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>        jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">70D</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>        jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">80D</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br><br>        List&lt;String&gt; zset01 = jedis.zrange(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        zset01.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="集成Lettuce"><a href="#集成Lettuce" class="headerlink" title="集成Lettuce"></a>集成Lettuce</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​jedis和Lettuce都是Redis的客户端，它们都可以连接Redis服务器，但是在SpringBoot2.0之后默认都是使用的Lettuce这个客户端连接Redis服务器。因为当使用Jedis客户端连接Redis服务器的时候，每个线程都要拿自己创建的Jedis实例去连接Redis客户端，当有很多个线程的时候，不仅开销大需要反复的创建关闭一个Jedis连接，而且也是线程不安全的，一个线程通过Jedis实例更改Redis服务器中的数据之后会影响另一个线程。</p><p>​但是如果使用Lettuce这个客户端连接Redis服务器的时候，就不会出现上面的情况,Lettuce底层使用的是Netty,当有多个线程都需要连接Redis服务器的时候，可以保证只创建一个Lettuce连接，使所有的线程共享这一个Lettuce连接，这样可以减少创建关闭一个Lettuce连接时候的开销;而且这种方式也是线程安全的，不会出现一个线程通过Lettuce更改Redis服务器中的数据之后而影响另—个线程的情况。</p><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1、导入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.lettuce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lettuce-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.demo;<br><br><span class="hljs-keyword">import</span> io.lettuce.core.RedisClient;<br><span class="hljs-keyword">import</span> io.lettuce.core.RedisURI;<br><span class="hljs-keyword">import</span> io.lettuce.core.SortArgs;<br><span class="hljs-keyword">import</span> io.lettuce.core.api.StatefulRedisConnection;<br><span class="hljs-keyword">import</span> io.lettuce.core.api.sync.RedisCommands;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 16:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LettuceDemo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REDIS_IP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;192.168.197.132&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">REDIS_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-number">6379</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、使用构建器链式编程来builder RedisURI</span><br>        <span class="hljs-type">RedisURI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> RedisURI.Builder<br>                .redis(REDIS_IP)<br>                .withPort(REDIS_PORT)<br>                .withAuthentication(<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)<br>                .build();<br><br>        <span class="hljs-comment">// 2、创建连接客户端</span><br>        <span class="hljs-type">RedisClient</span> <span class="hljs-variable">redisClient</span> <span class="hljs-operator">=</span> RedisClient.create(uri);<br>        <span class="hljs-type">StatefulRedisConnection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> redisClient.connect();<br><br>        <span class="hljs-comment">// 3、创建操作的command</span><br>        <span class="hljs-type">RedisCommands</span> <span class="hljs-variable">commands</span> <span class="hljs-operator">=</span> connect.sync();<br><br>        <span class="hljs-comment">// =======各种操作========</span><br>        <span class="hljs-comment">// keys</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> commands.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        System.out.println(keys);<br>        <span class="hljs-comment">// string</span><br>        commands.set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;11111&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">k1</span> <span class="hljs-operator">=</span> (String) commands.get(<span class="hljs-string">&quot;k1&quot;</span>);<br>        System.out.println(k1);<br>        <span class="hljs-comment">//list</span><br>        commands.lpush(<span class="hljs-string">&quot;myList2&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>        <span class="hljs-type">List</span> <span class="hljs-variable">myList2</span> <span class="hljs-operator">=</span> commands.lrange(<span class="hljs-string">&quot;myList2&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (Object o : myList2) &#123;<br>            System.out.println(o);<br>        &#125;<br>        <span class="hljs-comment">//set</span><br>        commands.sadd(<span class="hljs-string">&quot;mySet2&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">mySet2</span> <span class="hljs-operator">=</span> commands.smembers(<span class="hljs-string">&quot;mySet2&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object o : mySet2) &#123;<br>            System.out.println(o);<br>        &#125;<br>        <span class="hljs-comment">//hash</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;12124521312&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;asfadf&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;gsasaf@qq.com&quot;</span>);<br>        commands.hset(<span class="hljs-string">&quot;myHash2&quot;</span>, map);<br>        Map&lt;String, String&gt; myHash2 = commands.hgetall(<span class="hljs-string">&quot;myHash2&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String k : myHash2.keySet()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hash k=&quot;</span> + k + <span class="hljs-string">&quot;,v=&quot;</span> + myHash2.get(k));<br>        &#125;<br>        <span class="hljs-comment">//zset</span><br>        commands.zadd(<span class="hljs-string">&quot;myZset2&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-number">110</span>, <span class="hljs-string">&quot;s2&quot;</span>, <span class="hljs-number">90</span>, <span class="hljs-string">&quot;s3&quot;</span>);<br>        <span class="hljs-type">List</span> <span class="hljs-variable">myZset2</span> <span class="hljs-operator">=</span> commands.zrange(<span class="hljs-string">&quot;myZset2&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (Object o : myZset2) &#123;<br>            System.out.println(o);<br>        &#125;<br>        <span class="hljs-comment">// sort</span><br>        <span class="hljs-type">SortArgs</span> <span class="hljs-variable">sortArgs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SortArgs</span>();<br>        sortArgs.alpha();<br>        sortArgs.desc();<br><br>        <span class="hljs-type">List</span> <span class="hljs-variable">myList21</span> <span class="hljs-operator">=</span> commands.sort(<span class="hljs-string">&quot;myList2&quot;</span>, sortArgs);<br>        <span class="hljs-keyword">for</span> (Object o : myList21) &#123;<br>            System.out.println(o);<br>        &#125;<br>        <span class="hljs-comment">// =======各种操作========</span><br><br>        <span class="hljs-comment">// 4、各种关闭释放资源</span><br>        connect.close();<br>        redisClient.shutdown();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="集成RedisTemplate-–-推荐使用"><a href="#集成RedisTemplate-–-推荐使用" class="headerlink" title="集成RedisTemplate – 推荐使用"></a>集成RedisTemplate – 推荐使用</h2><h4 id="连接单机"><a href="#连接单机" class="headerlink" title="连接单机"></a>连接单机</h4><h5 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2、修改yml文件"><a href="#2、修改yml文件" class="headerlink" title="2、修改yml文件"></a>2、修改yml文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server.port=7777</span><br><span class="hljs-string">spring.application.name=springboot_redis</span><br><span class="hljs-comment"># ========================logging=====================</span><br><span class="hljs-string">logging.level.root=info</span><br><span class="hljs-string">logging.level.com.atguigu.redis7=info</span><br><span class="hljs-string">logging.pattern.console=%d&#123;yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss.SSS&#125;</span> [<span class="hljs-string">%thread</span>] <span class="hljs-string">%-5level</span> <span class="hljs-string">%logger-</span> <span class="hljs-string">%msg%n</span> <br><span class="hljs-string">logging.file.name=D:/mylogs2023/redis7_study.log</span><br><span class="hljs-string">logging.pattern.file=%d&#123;yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss.SSS&#125;</span> [<span class="hljs-string">%thread</span>] <span class="hljs-string">%-5level</span> <span class="hljs-string">%logger-</span> <span class="hljs-string">%msg%n</span><br><span class="hljs-comment"># ========================swagger=====================</span><br><span class="hljs-string">spring.swagger2.enabled=true</span><br><span class="hljs-comment">#在springboot2.6.X结合swagger2.9.X会提示documentationPluginsBootstrapper空指针异常，</span><br><span class="hljs-comment">#原因是在springboot2.6.X中将SpringMVC默认路径匹配策略从AntPathMatcher更改为PathPatternParser，</span><br><span class="hljs-comment"># 导致出错，解决办法是matching-strategy切换回之前ant_path_matcher</span><br><span class="hljs-string">spring.mvc.pathmatch.matching-strategy=ant_path_matcher</span><br><span class="hljs-comment"># ========================redis单机=====================</span><br><span class="hljs-string">spring.redis.database=0</span><br><span class="hljs-comment"># 修改为自己真实IP</span><br><span class="hljs-string">spring.redis.host=192.168.197.132</span><br><span class="hljs-string">spring.redis.port=6379</span><br><span class="hljs-string">spring.redis.password=123456</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-active=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-wait=-1ms</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-idle=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.min-idle=0</span><br></code></pre></td></tr></table></figure><h5 id="3、配置类"><a href="#3、配置类" class="headerlink" title="3、配置类"></a>3、配置类</h5><p>RedisConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 17:14</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * redis序列化的工具配置类，下面这个请一定开启配置</span><br><span class="hljs-comment">     * 127.0.0.1:6379&gt; keys *</span><br><span class="hljs-comment">     * 1) &quot;ord:102&quot;  序列化过</span><br><span class="hljs-comment">     * 2) &quot;\xac\xed\x00\x05t\x00\aord:102&quot;   野生，没有序列化过</span><br><span class="hljs-comment">     * this.redisTemplate.opsForValue(); //提供了操作string类型的所有方法</span><br><span class="hljs-comment">     * this.redisTemplate.opsForList(); // 提供了操作list类型的所有方法</span><br><span class="hljs-comment">     * this.redisTemplate.opsForSet(); //提供了操作set的所有方法</span><br><span class="hljs-comment">     * this.redisTemplate.opsForHash(); //提供了操作hash表的所有方法</span><br><span class="hljs-comment">     * this.redisTemplate.opsForZSet(); //提供了操作zset的所有方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(LettuceConnectionFactory lettuceConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br><br>        redisTemplate.setConnectionFactory(lettuceConnectionFactory);<br>        <span class="hljs-comment">//设置key序列化方式string</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        <span class="hljs-comment">//设置value的序列化方式json，使用GenericJackson2JsonRedisSerializer替换默认序列化</span><br>        redisTemplate.setValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br><br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br><br>        redisTemplate.afterPropertiesSet();<br><br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SwaggerConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 17:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.swagger2.enabled&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean enabled;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .enable(enabled)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.huang.springboot_redis&quot;</span>)) <span class="hljs-comment">//你自己的package</span><br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;springboot利用swagger2构建api接口文档 &quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> +<br>                        DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>).format(LocalDateTime.now()))<br>                .description(<span class="hljs-string">&quot;springboot+redis整合&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .termsOfServiceUrl(<span class="hljs-string">&quot;https://haomin.blog.csdn.net/&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OrderService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadLocalRandom;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 21:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ORDER_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ord:&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><span class="hljs-comment">//    private StringRedisTemplate redisTemplate;</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">keyId</span> <span class="hljs-operator">=</span> ThreadLocalRandom.current().nextInt(<span class="hljs-number">1000</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">serialNo</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> ORDER_KEY + keyId;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;京东订单&quot;</span> + serialNo;<br><br>        redisTemplate.opsForValue().set(key, value);<br><br>        log.info(<span class="hljs-string">&quot;key:&#123;&#125;&quot;</span>, key);<br>        log.info(<span class="hljs-string">&quot;value:&#123;&#125;&quot;</span>, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(Integer keyId)</span> &#123;<br>        <span class="hljs-keyword">return</span> (String) redisTemplate.opsForValue().get(ORDER_KEY + keyId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OrderController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.controller;<br><br><span class="hljs-keyword">import</span> com.huang.springboot_redis.service.OrderService;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 21:39</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;订单接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;新增订单&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/order/add&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOrder</span><span class="hljs-params">()</span> &#123;<br>        orderService.addOrder();<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;按照keyId查订单&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/order/&#123;keyId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;keyId&quot;)</span> Integer keyId)</span> &#123;<br>        <span class="hljs-keyword">return</span> orderService.getOrderById(keyId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h5><p>访问 <a href="http://localhost:7777/swagger-ui.html">http://localhost:7777/swagger-ui.html</a></p><p>使用RedisTemplate会出现序列化乱码的问题，所以配置了RedisConfig.java这个配置类。这样就解决乱码了。为什么会乱码？是因为序列化默认使用的是jdk的序列化方法<code>JdkSerializationRedisSerializer</code>。使用<code>StringRedisSerializer</code>就不会乱码了。</p><h4 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h4><p>在前面单机的基础上，进一步修改</p><h6 id="1、修该yml文件"><a href="#1、修该yml文件" class="headerlink" title="1、修该yml文件"></a>1、修该yml文件</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ========================redis集群=====================</span><br><span class="hljs-string">spring.redis.password=111111</span><br><span class="hljs-comment"># 获取失败 最大重定向次数</span><br><span class="hljs-string">spring.redis.cluster.max-redirects=3</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-active=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-wait=-1ms</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-idle=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.min-idle=0</span><br><span class="hljs-string">spring.redis.cluster.nodes=***.***.***.***:6381,***.***.***.***:6382</span> <span class="hljs-string">(主机:port)</span><br></code></pre></td></tr></table></figure><h5 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h5><p>访问 <a href="http://localhost:7777/swagger-ui.html">http://localhost:7777/swagger-ui.html</a></p><h5 id="3、一台master宕机，java报错"><a href="#3、一台master宕机，java报错" class="headerlink" title="3、一台master宕机，java报错"></a>3、一台master宕机，java报错</h5><ul><li><p>让master-6381宕机，shutdown</p></li><li><p>查看集群信息 ，看slave是否上位 Cluster nodes</p></li><li><p>我们客户端再次读写</p></li><li><p>原因是因为SpringBoot客户端没有动态感知到RedisCluster的最新集群信息</p></li><li><p>导致这个的原因是：</p><ol><li>Spring Boot 2.x，Redis默认的连接池是 Lettuce</li><li>当Redis集群节点发生变化后，Lettuce默认是不会刷新节点拓扑</li></ol></li><li><p>解决方法：</p><ol><li><p>排除Lettuce采用jedis（不推荐）<br><img src="/../img/mdimg/redis/redis%E8%BF%9E%E6%8E%A5%E9%9B%86%E7%BE%A4%E9%97%AE%E9%A2%981.png" alt="解决方法1"></p></li><li><p>重写连接工厂实例（极度不推荐）</p></li><li><p>刷新节点集群拓扑动态感应（推荐）</p><p>重新修改yml文件，增加定时刷新，开启动态感应</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ========================redis集群=====================</span><br><span class="hljs-string">spring.redis.password=111111</span><br><span class="hljs-comment"># 获取失败 最大重定向次数</span><br><span class="hljs-string">spring.redis.cluster.max-redirects=3</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-active=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-wait=-1ms</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-idle=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.min-idle=0</span><br> <br><span class="hljs-comment"># ========================新增=====================</span><br><span class="hljs-comment">#支持集群拓扑动态感应刷新,自适应拓扑刷新是否使用所有可用的更新，默认false关闭</span><br><span class="hljs-string">spring.redis.lettuce.cluster.refresh.adaptive=true</span><br><span class="hljs-comment">#定时刷新</span><br><span class="hljs-string">spring.redis.lettuce.cluster.refresh.period=2000</span><br> <br><span class="hljs-string">spring.redis.cluster.nodes=***.***.***.***:6381,***.***.***.***:6382</span> <span class="hljs-string">(主机:port)</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><hr><p>在此redis基础已全部完成！！</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>indexOf()与lastIndexOf()区别</title>
    <link href="/2023/06/19/indexOf-%E4%B8%8ElastIndexOf-%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/06/19/indexOf-%E4%B8%8ElastIndexOf-%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="indexOf-与lastIndexOf-区别"><a href="#indexOf-与lastIndexOf-区别" class="headerlink" title="indexOf()与lastIndexOf()区别"></a>indexOf()与lastIndexOf()区别</h2><p><strong>直接上代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//indexOf()与lastIndexOf()的区别</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456789&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;888000888&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456778&quot;</span>;<br>System.out.println(s1.indexOf(<span class="hljs-string">&quot;8&quot;</span>));<span class="hljs-comment">//7</span><br>System.out.println(s1.lastIndexOf(<span class="hljs-string">&quot;8&quot;</span>));<span class="hljs-comment">//7</span><br><br>System.out.println(s1.indexOf(<span class="hljs-string">&quot;0&quot;</span>));<span class="hljs-comment">//-1</span><br>System.out.println(s1.lastIndexOf(<span class="hljs-string">&quot;0&quot;</span>));<span class="hljs-comment">//-1</span><br><br>System.out.println(s2.indexOf(<span class="hljs-string">&quot;8&quot;</span>));<span class="hljs-comment">//0</span><br>System.out.println(s2.lastIndexOf(<span class="hljs-string">&quot;8&quot;</span>));<span class="hljs-comment">//8</span><br><br>System.out.println(s3.indexOf(<span class="hljs-string">&quot;7&quot;</span>));<span class="hljs-comment">//6</span><br>System.out.println(s3.lastIndexOf(<span class="hljs-string">&quot;7&quot;</span>));<span class="hljs-comment">//7</span><br>&#125;<br></code></pre></td></tr></table></figure><p><span style="color:red">得出结论！！</span></p><ol><li><code>indexOf()</code>是从左往右查询，如果查到则返回该字符在字符串中的索引（都是从0开始）</li><li><code>lastIndexOf()</code>是从右往左查询，如果查到则返回该字符在字符串中的索引（都是从0开始）</li><li>如果没查到都是返回-1</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM框架Mybatis分页PageHelper遇到的问题</title>
    <link href="/2023/06/16/SSM%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AEPageHelper%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <url>/2023/06/16/SSM%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AEPageHelper%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p><strong>报错：</strong>Cannot convert value of type ‘com.github.pagehelper.PageHelper’ to required type ‘org.apache.ibatis.plugin.Interceptor’ for property ‘plugins[0]’: no matching editors or conversion strategy found</p><h2 id="问题描述：sqlSessionFactory初始化失败"><a href="#问题描述：sqlSessionFactory初始化失败" class="headerlink" title="问题描述：sqlSessionFactory初始化失败"></a>问题描述：sqlSessionFactory初始化失败</h2><p>修改前的applicationContext-dao.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.huang.pojo&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plugins&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--此时这里报错--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>helperDialect=mysql<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:sqlMapConfig.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h2><p>通过查阅<a href="https://pagehelper.github.io/docs/">官网</a>得知，因为上面的相关PageHelper配置是4.x版本的，老版的拦截器<code>Interceptor</code>和分页插件实现类<code>dialect</code>都是在<code>com.github.pagehelper.PageHelper</code>这个类下，但是5.x版本的<code>PageHelper</code>只是<code>dialect</code>的实现类，而新版的拦截器则是在<code>com.github.pagehelper.PageInterceptor</code>下，所以需要配置<code>PageInterceptor</code>。</p><p>pageHelper是如何在<a href="https://so.csdn.net/so/search?q=mybatis&spm=1001.2101.3001.7020">mybatis</a>中工作呢，是通过mybatis的pulgin实现了Interceptor接口，从而获得要执行的sql语句实现分页技术。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>修改后的applicationContext-dao.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.huang.pojo&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plugins&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>helperDialect=mysql<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:sqlMapConfig.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改后成功运行。</p>]]></content>
    
    
    <categories>
      
      <category>DEBUG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/15/hello-world/"/>
    <url>/2023/06/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>helloworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记（一）</title>
    <link href="/2023/06/11/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/11/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis-数据持久化"><a href="#Redis-数据持久化" class="headerlink" title="Redis 数据持久化"></a>Redis 数据持久化</h2><p>redis提供了两种持久化操作，分别是 <strong>RDB（Redis Database）</strong> 和 <strong>AOF（Append Only File）</strong> </p><p>RDB持久化：是将redis上存储的数据在指定的时间间隔内执行的次数来将之前操作的数据集保存到指定的磁盘位置。</p><p>AOF持久化：与RDB不同的是，RDB保存的是数据集，而AOF则保存的是写操作的命令，每次写入都会被Redis放入AOF保存的缓冲区，等待被保存到磁盘上。</p><blockquote><p>同时官方文档还有关于，不使用持久化操作和RDB+AOF组合使用的操作介绍。</p></blockquote><p><strong>OK，我们知道了数据持久化的两种方式，那我们应该如何使用呢？</strong></p><p>有两种使用方法，一种是自动持久化，另一种是手动持久化。</p><h3 id="自动持久化方式"><a href="#自动持久化方式" class="headerlink" title="自动持久化方式"></a>自动持久化方式</h3><p><strong>RDB：</strong>在redsi.config配置文件里面配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf">save &quot;&quot;          # 表示不使用RDB存储<br>save 900 1<br>save 300 10<br>save 60 10000<br></code></pre></td></tr></table></figure><p>上面意思是，表示在15分钟（900秒）内至少有1个键被修改就进行快照存储，其他两个意思相同。</p><p><strong>AOF：</strong>同样在redis.cofig配置文件中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf">appendonly yes    # 通过修改参数来表示是否开启（yes/no）<br><br># appendfsync always<br>appendfsync everysec<br># appendfsync no<br></code></pre></td></tr></table></figure><p>这里主要解释以下下面三段代码，表示的是保存策略，默认是<code>everysec</code>每秒保存一次，<code>always</code>是一直执行保存，<code>no</code>是不保存。</p><h3 id="手动持久化方式"><a href="#手动持久化方式" class="headerlink" title="手动持久化方式"></a>手动持久化方式</h3><p><strong>RDB：</strong>在redis服务端通过命令的方式保存，保存路径默认是<code>./</code>，保存的名称默认为<code>dump.rdb</code></p><ul><li><code>save</code>：（不推荐使用）输入save命令后，会对redis进行进程阻塞，然后进行备份，备份完成之后恢复正常。在<strong>生产环境</strong>中不允许使用此命令！！！</li><li><code>bgsave</code>：（推荐使用）输入bgsave命令后，不影响redis正常服务，后台会fork出一个子进程，不会阻塞，以异步的方式进行备份。</li></ul><p><strong>AOF：</strong>在redis服务端通过命令的方式保存，保存路径默认<code>是RDB存储路径下出现的appendonlydir文件夹</code>，保存的名称默认为<code>appendonly.aof</code></p><ul><li><code>bgrewriteaof</code>：此命令与<code>bgsave</code>命令执行操作差不多。</li></ul><h3 id="RDB和AOF混合使用"><a href="#RDB和AOF混合使用" class="headerlink" title="RDB和AOF混合使用"></a>RDB和AOF混合使用</h3><p>两种方式可以同时打开，但是由AOF说了算。RDB作为备用恢复手段，也可以保持启用。</p><p>在同时开启RDB和AOF持久化时，重启时只会加载AOF文件，不会加载RDB文件。</p><p>通过设置redis.conf的<code>aof-use-rdb-preamble yes</code>启用混合方式，设置为no表示禁用。</p><h2 id="Redis事务（Transactions）"><a href="#Redis事务（Transactions）" class="headerlink" title="Redis事务（Transactions）"></a>Redis事务（Transactions）</h2><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>说到数据库事务，我们先能够想到<strong>关系型数据库</strong>里的事务，它包括四大特性（ACID）：原子性、一致性、隔离性、持久性。由一个或则多个SQL语句组成的、逻辑上的工件单元，必须将其视为一个不可分割的“操作序列”，这个序列中的所有SQL语句只能全部执行成功，或者全部不执行。用通俗易懂的话来说就是，在事务里的SQL语句要么全部执行，要么全部不执行。</p><p>那<strong>非关系性数据库</strong>（比如：Redsi）中的事务是什么呢？</p><p>他们执行的事情其实都是差不多的，都是为了保证命令的一致性。但是他们还是有<strong>区别</strong>的：</p><ul><li>关系型数据库采用悲观锁机制来保证了事务的隔离性和原子性；而非关系型数据库通常采用乐观锁来控制并发和保持数据一致</li><li>关系型数据库通常支持复杂的事务处理和多表关联查询，而非关系型数据库通常不支持多表关联的查询操作。Redis的事务操作采用<code>multi</code>和<code>exec</code>命令配合使用，通过一系列的命令操作来实现事务。</li></ul><p><img src="/../img/mdImg/redis/redisTransalationDifference.png" alt="redis事务区别"></p><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><ul><li><code>DISCARD</code>：取消事务，放弃执行事务块内全部命令</li><li><code>EXEC</code>：执行所有事务块内的命令</li><li><code>MULTI</code>：标记一个事务块的开始（开启事务）</li><li><code>WATCH key [key...]</code>：监视一个或多个key，如果在事务执行之前在这个key被其他命令所改动，则事务将被打断</li><li><code>UNWATCH</code>：取消<code>WATCH</code>命令对所有key的监视</li></ul><p>正常执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs redis">127.0.0.1:6379&gt; MULTI   # 开启事务<br>OK<br>127.0.0.1:6379(TX)&gt; set k1 v1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; set k3 v3<br>QUEUED<br>127.0.0.1:6379(TX)&gt; incr count<br>QUEUED<br>127.0.0.1:6379(TX)&gt; EXEC  # 执行事务<br>1) OK<br>2) OK<br>3) OK<br>4) (integer) 3<br>127.0.0.1:6379&gt; mget k1 k2 k3 count  # 查看，全部执行成功<br>1) &quot;v1&quot;<br>2) &quot;v2&quot;<br>3) &quot;v3&quot;<br>4) &quot;3&quot;<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><p>中断执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs redis">127.0.0.1:6379&gt; multi       # 开启事务<br>OK<br>127.0.0.1:6379(TX)&gt; set k1 v11<br>QUEUED<br>127.0.0.1:6379(TX)&gt; set k2 v22<br>QUEUED<br>127.0.0.1:6379(TX)&gt; DISCARD# 终止事务<br>OK<br>127.0.0.1:6379&gt; mget k1 k2<br>1) &quot;v1&quot;<br>2) &quot;v2&quot;<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><h2 id="Redis主从复制（replication）"><a href="#Redis主从复制（replication）" class="headerlink" title="Redis主从复制（replication）"></a>Redis主从复制（replication）</h2><p>高并发机制</p><p>主服务称为master，从服务称为salve。主从复制主要针对解决高并发问题。master主要负责写，slave主要负责读。</p><h3 id="主从复制如何实现"><a href="#主从复制如何实现" class="headerlink" title="主从复制如何实现"></a>主从复制如何实现</h3><h4 id="方式一：修改配置文件"><a href="#方式一：修改配置文件" class="headerlink" title="方式一：修改配置文件"></a>方式一：修改配置文件</h4><p>在配置文件redis.config中修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 老版本，redis 5 之前配置<br>slaveof &lt;masterip&gt; &lt;masterport&gt;<br># 新版本，redis 5 之后使用 replicaof 替代 slaveof<br>replicaof &lt;masterip&gt; &lt;masterport&gt;<br></code></pre></td></tr></table></figure><h4 id="方式二：启动服务参数配置"><a href="#方式二：启动服务参数配置" class="headerlink" title="方式二：启动服务参数配置"></a>方式二：启动服务参数配置</h4><p>在开启服务时输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 老版本，redis <span class="hljs-number">5</span> 之前配置<br>redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;<br># 新版本，redis <span class="hljs-number">5</span> 之后使用 replicaof 替代 slaveof<br>redis-server -replicaof &lt;masterip&gt; &lt;masterport&gt;<br></code></pre></td></tr></table></figure><h4 id="方式三：客户端发送命令连接"><a href="#方式三：客户端发送命令连接" class="headerlink" title="方式三：客户端发送命令连接"></a>方式三：客户端发送命令连接</h4><p>进入客服端之后通过输入命令的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs redis"># 老版本，redis 5 之前配置<br>127.0.0.1:6380&gt; slaveof &lt;masterip&gt; &lt;masterport&gt;<br># 新版本，redis 5 之后使用 replicaof 替代 slaveof<br>127.0.0.1:6380&gt; replicaof &lt;masterip&gt; &lt;masterport&gt;<br></code></pre></td></tr></table></figure><p>所有方式都可以在进入客户端之后，输入<code>info replication</code>查看信息。</p><h3 id="取消主从关系命令"><a href="#取消主从关系命令" class="headerlink" title="取消主从关系命令"></a>取消主从关系命令</h3><p><code>slaveof no one</code>：取消当前数据库的主从关系，使当前数据库为master身份</p><h3 id="主从复制优缺点"><a href="#主从复制优缺点" class="headerlink" title="主从复制优缺点"></a>主从复制优缺点</h3><p><strong>优点：</strong></p><ul><li>一个master，可同步多个slave</li><li>读写分离，读取效率高</li><li>数据热备份，有多个数据副本</li></ul><p><strong>缺点：</strong></p><ul><li>主机宕机，则所有的从机都无法工作</li><li>主机写操作压力大</li><li>主节点存储能力受到单机限制</li></ul><p>为了改善缺点则引入了哨兵和集群</p><h2 id="Redis哨兵模式（sentinel）"><a href="#Redis哨兵模式（sentinel）" class="headerlink" title="Redis哨兵模式（sentinel）"></a>Redis哨兵模式（sentinel）</h2><p>高可用机制</p><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>哨兵模式是一种特殊的模式，redis提供了开启哨兵的命令。哨兵是一个独立的进程，负责监控运行中的redis服务。在服务宕机后给出响应的操作。</p><h3 id="有什么作用？"><a href="#有什么作用？" class="headerlink" title="有什么作用？"></a>有什么作用？</h3><ol><li>监控redis运行的状态</li><li>当master服务宕机后，通过一种投票算法将某一个slave选举为新的master</li></ol><h3 id="能干嘛-？"><a href="#能干嘛-？" class="headerlink" title="能干嘛 ？"></a>能干嘛 ？</h3><ul><li>监控：监控redis主从机是否正常运行</li><li>通知：通过api接口将故障转移的结果发送给客户端或系统管理员</li><li>自动故障切换：如果主机master宕机，sentinel启动故障转移，将某一个slave升级为master，并使其他的salve重新指向新的master，并通知使用redis服务器的应用程序连接时要使用新的master服务地址</li><li>配置中心：客户端通过连接哨兵来获得当前redis服务的master节点</li></ul><h3 id="怎么配置？"><a href="#怎么配置？" class="headerlink" title="怎么配置？"></a>怎么配置？</h3><ol><li>配置<code>sentinel.conf</code>哨兵配置文件里的下面这条命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 在配置文件中配置这段命令<br># 其中各个参数的意思如下 <br>sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;<br></code></pre></td></tr></table></figure><p><code>master-name</code>：要监控的master服务器的名称</p><p><code>ip</code>：其IP地址</p><p><code>port</code>：其端口号</p><p><code>quorum</code>：（重点）表示最少需要几个哨兵认为此master主机为客观下线，然后才允许故障迁移（说通俗点就是选举的数量）</p><ol start="2"><li>如果master设置了密码，则需要配置以下命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;<br></code></pre></td></tr></table></figure><p><strong>配置文件里其他的命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 指定多少毫秒之后，主节点没有应答哨兵，此时哨兵主观上认为主节点下线<br>sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;<br><br># 表示允许并行同步的slave个数，当Master挂了后，哨兵会选出新的Master，剩余的slave会向新的master发起同步数据<br>sentinel parallel-syncs &lt;master-name&gt; &lt;nums&gt;<br><br># 故障转移的超时时间，进行故障转移时，如果超过设置的毫秒，表示故障转移失败<br>sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;<br><br># 配置当某一事件发生时所需要执行的脚本<br>sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;<br><br># 客户端重新配置主节点参数脚本<br>sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;<br></code></pre></td></tr></table></figure><h3 id="怎么用-（怎么运行）"><a href="#怎么用-（怎么运行）" class="headerlink" title="怎么用?（怎么运行）"></a>怎么用?（怎么运行）</h3><p>在命令窗口启动</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">redis-server 你的sentinel配置文件 --sentinel<br></code></pre></td></tr></table></figure><p>说明：启动哨兵一般是以集群的方式启动，一般不单独启动一个（推荐奇数个）</p><p>此时可以通过linux命令查看redis进程（不出意外是有三个哨兵进程运行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">ps -ef | grep redis<br></code></pre></td></tr></table></figure><p>另外：如果sentinel出现问题，还可以查看日志文件<code>sentinel.log</code>（路径到配置文件中查看）</p><p><span style="color:red">思考？？</span>如果此时master宕机之后，sentinel将会选举哪一个slave为新的master<br>回答：通过选举算法选举，权限（priority）&gt;复制偏移量（replication offset）&gt; Run ID<br><span style="color:red">思考？？</span>如果此时master宕机之后，sentinel将会选举了一个新的master，此时原来的master连上来，会出现什么情况？<br>回答：会变为新的master的slave</p><h3 id="哨兵使用建议"><a href="#哨兵使用建议" class="headerlink" title="哨兵使用建议"></a>哨兵使用建议</h3><ul><li>哨兵节点的数量应该为多个，哨兵本身就是一个集群，保证高可用</li><li>哨兵节点的数量应该是单数</li><li>各个哨兵节点的配置应该保持一致</li><li>如果哨兵节点部署在Docker等容器中，尤其要保证端口的正确映射</li><li>哨兵集群+主从 复制没并不能保证数据的零丢失（因此引入了集群）</li></ul><h2 id="Redis集群（cluster）"><a href="#Redis集群（cluster）" class="headerlink" title="Redis集群（cluster）"></a>Redis集群（cluster）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Redis集群是一个可以在多个Redis节点之间进行数据共享的程序集。并且Redis集群可以支持多个master节点。</p><p><img src="/../img/mdimg/redis/redisCluster.png" alt="redis集群"></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>Redis集群支持多个master，每个master又可以挂载多个slave。<ul><li>支持数据的读写分离，</li><li>支持高可用</li><li>支持海量数据的读写存储</li></ul></li><li>由于cluster自带sentinel的故障转移机制，内置了高可用的支持，所以再去使用哨兵功能</li><li>客户端与redis的节点连接，不再需要连接集群中的所有节点，只需要任意连接集群中的一个可用节点即可</li><li>槽位slot负责分配各个物理服务节点，由对应的集群来负责维护节点、插槽和数据之间的关系</li></ul><h3 id="集群算法-分片-槽位slot"><a href="#集群算法-分片-槽位slot" class="headerlink" title="集群算法 -分片 -槽位slot"></a>集群算法 -分片 -槽位slot</h3><p>集群的密钥空间被分成16384个槽，有效地设置了16384个主节点的集群大小上限（但是，建议的最大节点大小约为1000个节点)。<br>集群中的每个主节点处理16384个哈希槽的一个子集。当没有集群重新配置正在进行时(即哈希槽从一个节点移动到另一个节点)，集群是稳定的。当集群稳定时，单个哈希槽将由单个节点提供服务(但是，服务节点可以有一个或多个副本，在网络分裂或故障的情况下替换它，并且可以用于扩展读取陈旧数据是可接受的操作)。</p><h4 id="槽位slot"><a href="#槽位slot" class="headerlink" title="槽位slot"></a>槽位slot</h4><p>redis集群中没有使用一致性hash，而是导入了hash槽的概念。redis集群有16384个hash槽，每个key通过CRC16校验后对16384取模来决定数据放在哪个槽。集群的每个节点负责一部分hash槽。例如以下：</p><p><img src="/../img/mdimg/redis/redisSlot.png" alt="redis槽位"></p><h4 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h4><p>使用redis集群是我们会将存储的数据分散到多台redis机器上，这就称为<code>分片</code>。集群中的每个redis实例都被认为是整个数据的分片。</p><p>为了找到给定key的分片，我们对key进行CRC16(key)算法处理并通过对总分片数量取模。然后，使用确定性hash函数，这意味着给定的key将多次始终映射到同一个分片。</p><h4 id="槽位与分片的优势"><a href="#槽位与分片的优势" class="headerlink" title="槽位与分片的优势"></a>槽位与分片的优势</h4><ol><li>方便节点的扩容与缩容</li><li>方便数据分派查找</li></ol><h4 id="slot槽位映射"><a href="#slot槽位映射" class="headerlink" title="slot槽位映射"></a>slot槽位映射</h4><ul><li><p>哈希取余分区<br><img src="/../img/mdimg/redis/redis%E5%93%88%E5%B8%8C%E5%8F%96%E4%BD%99%E5%88%86%E5%8C%BA.png" alt="reids哈希取余分区"></p><p><strong>优点：</strong>简单粗暴，只需要预估好数据，规划好节点</p><p><strong>缺点：</strong>原来规划好的节点，进行扩容或缩容比较麻烦，映射关系需全部重新计算，导致数据混乱</p></li><li><p>一致性哈希算法分区</p><p>提出一致性哈希算法的目的：当服务器个数发生变动时，尽量减少影响客户端到服务器的映射关系</p><p><span style="color:red">3大步骤</span></p><ol><li><p>算法构建一致性哈希环</p></li><li><p>redis服务器IP节点映射</p></li><li><p>key落到服务器的落键规则</p></li></ol><p><strong>优点：</strong>具备<strong>容错性</strong>和<strong>扩容性</strong></p><p><strong>缺点：</strong>容易出现<strong>数据倾斜</strong>问题</p></li><li><p>哈希槽分区</p><p><strong>概述</strong></p><p>哈希槽分区为了解决一致性哈希算法的数据倾斜问题而出现。哈希槽本质上就是一个数组，大小为 <code>2^14</code></p><p><strong>作用</strong></p><p>解决均匀分配的问题，在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系，现在就相当于节点上放的是槽，槽里放的是数据。</p><p><img src="/../img/mdimg/redis/slot.png" alt="slot"></p><p>槽解决了粒度问题，便于数据移动</p></li></ul><h4 id="为什么redis集群的最大槽数是16384个？"><a href="#为什么redis集群的最大槽数是16384个？" class="headerlink" title="为什么redis集群的最大槽数是16384个？"></a>为什么redis集群的最大槽数是16384个？</h4><p>原作者给出了回答，<br>地址如下：<a href="https://github.com/antirez/redis/issues/2576">https://github.com/antirez/redis/issues/2576</a></p><ol><li><span style="color:blue">如果槽位为65536，发送心跳信息的消息头达8k，发送的心跳包过于庞大。</span><br>在消息头中最占空间的是myslots[CLUSTER_SLOTS&#x2F;8]。当槽位为65536时，这块的大小是:65536÷8÷1024&#x3D;8kb<br>在消息头中最占空间的是myslots[CLUSTER_SLOTS&#x2F;8]。当槽位为16384时，这块的大小是:16384÷8÷1024&#x3D;2kb<br>因为每秒钟，redis节点需要发送一定数量的ping消息作为心跳包，如果槽位为65536，这个ping消息的消息头太大了，浪费带宽。</li><li><span style="color:blue">redis的集群主节点数量基本不可能超过1000个。</span><br>如上所述，集群节点越多，心跳包的消息体内携带的数据越多。如果节点过1000个，也会导致网络拥堵。因此redis作者，不建议redis cluster节点数量超过1000个。<br>那么，对于节点数在1000以内的redis cluster集群，16384个槽位够用了。没有必要拓展到65536个。</li><li><span style="color:blue">槽位越小，节点少的情况下，压缩比高</span><br>Redis主节点的配置信息中，它所负责的哈希槽是通过一张bitmap的形式来保存的，在传输过程中，会对bitmap进行压缩，但是如果bitmap的填充率slots &#x2F; N很高的话(N表示节点数)，bitmap的压缩率就很低。如果节点数很少，而哈希槽数量很多的话，bitmap的压缩率就很低。</li></ol><p>Redis集群并不保证强一致性，这意味着特定的条件下，Redis集群可能会丢掉一些被系统收到的写入请求命令</p><h3 id="集群环境配置案例"><a href="#集群环境配置案例" class="headerlink" title="集群环境配置案例"></a>集群环境配置案例</h3><p>这里准备6台redis服务器。端口：6381~6386</p><p><img src="/../img/mdimg/redis/cluster.png" alt="cluster"></p><h4 id="一、首先要新建配置文件（有几个redis服务器就有新建几个），名字自取，然后将下面配置在配置文件中保存"><a href="#一、首先要新建配置文件（有几个redis服务器就有新建几个），名字自取，然后将下面配置在配置文件中保存" class="headerlink" title="一、首先要新建配置文件（有几个redis服务器就有新建几个），名字自取，然后将下面配置在配置文件中保存"></a><strong>一、</strong>首先要新建配置文件（有几个redis服务器就有新建几个），名字自取，然后将下面配置在配置文件中保存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs conf">bind 0.0.0.0<br>daemonize yes<br>protected-mode no<br>port 6381 <br>logfile &quot;/myredis/cluster/cluster6381.log&quot;   <br>pidfile /myredis/cluster6381.pid<br>dir /myredis/cluster<br>dbfilename dump6381.rdb<br>appendonly yes<br>appendfilename &quot;appendonly6381.aof&quot;<br>requirepass 123456<br>masterauth 123456<br>cluster-enabled yes <br>cluster-config-file nodes-6381.conf<br>cluster-node-timeout 5000<br></code></pre></td></tr></table></figure><h4 id="二、启动redis服务"><a href="#二、启动redis服务" class="headerlink" title="二、启动redis服务"></a>二、启动redis服务</h4><p>分别启动6个服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">redis-server /myredis/cluster/redisCluster6381.conf<br>redis-server /myredis/cluster/redisCluster6382.conf<br>redis-server /myredis/cluster/redisCluster6383.conf<br>redis-server /myredis/cluster/redisCluster6384.conf<br>redis-server /myredis/cluster/redisCluster6385.conf<br>redis-server /myredis/cluster/redisCluster6386.conf<br></code></pre></td></tr></table></figure><h4 id="三、构建集群节点"><a href="#三、构建集群节点" class="headerlink" title="三、构建集群节点"></a>三、构建集群节点</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">redis-cli -a <span class="hljs-number">123456</span> --cluster create --cluster-replicas <span class="hljs-number">1</span> 真实IP:<span class="hljs-number">6381</span> 真实IP:<span class="hljs-number">6382</span> 真实IP:<span class="hljs-number">6383</span> 真实IP:<span class="hljs-number">6384</span> 真实IP:<span class="hljs-number">6385</span> 真实IP:<span class="hljs-number">6386</span><br></code></pre></td></tr></table></figure><ul><li><p><code>redis-cli --cluster create --cluster-replicas 1</code> 中的1代表每个主机有一个从机,所以会有3主3从</p></li><li><p>执行之后要再输入一次yes</p></li><li><p>如果没有输密码可能会报错（前提，你有密码）</p></li></ul><h4 id="四、查看集群节点"><a href="#四、查看集群节点" class="headerlink" title="四、查看集群节点"></a>四、查看集群节点</h4><p>通过输入命令</p><p><code>cluster nodes</code>：可以查看所有集群节点的关系以及身份。</p><p><code>info replication</code>：查看主从关系</p><p><code>cluster info</code>：查看某一个节点的相关信息</p><p><code>cluster keyslot 键名称</code>：可以查看此键的槽位为多少</p><p>此时集群就搭建完成了！！</p><p><strong>集群常用命令：</strong></p><p><code>cluster failover</code>：调整因主机宕机之后变为从机又想让其重新为主机的命令</p><p><code>cluster-require-full-coverage</code>：集群是否完整才能对外提供服务</p><p><code>clustter countkeysinslot 槽位数字编号</code>：查看该槽位是否被占用（1被占用，0没被占用）</p><p><code>cluster keyslot 键名称</code>：查看槽位号</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC注册驱动推荐</title>
    <link href="/2023/06/09/DriverManager.register()%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%B3%A8%E5%86%8C%E4%B8%A4%E6%AC%A1%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/06/09/DriverManager.register()%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%B3%A8%E5%86%8C%E4%B8%A4%E6%AC%A1%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="关于使用JDBC注册驱动时为什么推荐使用Class-forName-“…”-（反射）来注册，而不推荐使用DriverManager-register-来注册！！"><a href="#关于使用JDBC注册驱动时为什么推荐使用Class-forName-“…”-（反射）来注册，而不推荐使用DriverManager-register-来注册！！" class="headerlink" title="关于使用JDBC注册驱动时为什么推荐使用Class.forName(“…”)（反射）来注册，而不推荐使用DriverManager.register()来注册！！"></a>关于使用JDBC注册驱动时为什么推荐使用Class.forName(“…”)（反射）来注册，而不推荐使用DriverManager.register()来注册！！</h2><p style="font-weight:bold;font-size:20px;color:red">先说结论!!</p><p><strong>原因一：使用DriverManager.register()会注册两次驱动，在内存中会有两个Driver对象。</strong></p><p><strong>原因二：程序依赖mysql的jar包，一旦脱离mysql的jar包，程序将无法编译。</strong></p><p style="color:red">ok，我们知道了原因，但是具体为什么会这样呢？<p>通过查看<code>com.mysql.jdbc.Driver</code>源码，发现有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mysql.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Driver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NonRegisteringDriver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.sql.Driver &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Driver</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var1) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Can&#x27;t register driver!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​通过上面源码我们发现当我们执行Driver这个类的时候，它就调用了<code>DriverManager.registerDriver(new Driver())</code>这个注册方法并且new了一个Driver实例，如果我们使用<code>DriverManager.register()</code>来注册Driver驱动，我们自己new了一个Driver实例，然后Driver类下的静态代码块里面的代码也会随着Driver的执行而运行，就会再次的运行<code>DriverManager.registerDriver(new Driver())</code>这个代码，所以就注册了两次驱动。</p><p>因此在开发中更推荐使用Class.forName(“…”)来进行加载Driver驱动。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
