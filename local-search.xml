<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringCloud学习笔记</title>
    <link href="/2023/07/18/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/18/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="微服务基础"><a href="#微服务基础" class="headerlink" title="微服务基础"></a>微服务基础</h1><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>微服务既是一种架构，也是构建软件的方法。在微服务中，应用被拆分成最小的组件，彼此独立。不同于将所有组件内置于一个架构中的传统单体式应用构建方法，在微服务架构中，所有部分相互独立，通过合作来完成同一个任务。其中的每一个组件或流程都是一个微服务。这种软件开发方法强调细粒度、轻量化，力求<a href="https://www.redhat.com/zh/topics/integration">在多个应用中共享相似的流程</a>。它是<a href="https://www.redhat.com/zh/topics/cloud-native-apps">针对云原生模型优化应用开发</a>的主要组件。</p><p>但现在更应思考的一个问题是：为什么要使用基于微服务的基础架构？简单来说，微服务架构有助于更快地交付高质量的软件。使用微服务有助实现这一点，但也需要注意一些细节。仅仅将应用拆分成微服务是不够的，还必须对微服务进行管理和编排，处理微服务创建和修改的数据。</p><p>我们可以先从技术的演变开始看起，在我们学习JavaWeb之后，一般的网站开发模式为Servlet+-JSP，但是实际上我们在学习了SSM之后，会发现这种模式已经远远落后了，第一，一个公司不可能去招那么多同时会前端+后端的开发人员，就算招到，也并不一定能保证两个方面都比较擅长，相比前后端分开学习的开发人员，显然后者的学习成本更低，专注度更高。因此前后端分离成为了一种新的趋势。通过使用SpringBoot，我们几乎可以很快速地开发一个高性能的单体应用，只需要启动一个服务端，我们整个项目就开始运行了，各项功能融于一体，开发起来也更加轻松。</p><p>但是随着我们项目的不断扩大，单体应用似乎显得有点乏力了。</p><p>随着越来越多的功能不断地加入到一个SpringBoot项目中，随着接口不断增加，整个系统就要在同一时间内响应更多类型的请求，显然，这种扩展方式是不可能无限使用下去的，总有一天，这个SpringBoot项目会庞大到运行缓慢。并且所有的功能如果都集成在单端上，那么所有的请求都会全部汇集到一台服务器上，对此服务器造成巨大压力。</p><p>可以试想一下，如果我们的电脑已经升级到i9-12900K，但是依然在运行项目的时候缓慢，无法同一时间响应成千上万的请求，那么这个问题就已经不是单纯升级机器配置可以解决的了。</p><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><p>前面我们介绍了微服务架构的优点，那么同样的，这些优点的背后也存在着诸多的问题：</p><ul><li>要实现微服务并不是说只需要简单地将项目进行拆分，我们还需要考虑对各个微服务进行管理、监控等，这样我们才能够及时地寻找和排查问题。因此微服务往往需要的是一整套解决方案，包括服务注册和发现、容灾处理、负载均衡、配置管理等。</li><li>它不像单体架构那种方便维护，由于部署在多个服务器，我们不得不去保证各个微服务能够稳定运行，在管理难度上肯定是高于传统单体应用的。</li><li>在分布式的环境下，单体应用的某些功能可能会变得比较麻烦，比如分布式事务。</li></ul><p>所以，为了更好地解决这些问题,SpringCloud正式登场。</p><p>SpringCloud是Spring提供的一套分布式解决方案，集合了一些大型互联网公司的开源产品，包括诸多组件，共同组成SpringCloud框架。并且，它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、熔断机制、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。</p><p>由于中小型公司没有独立开发自己的分布式基础设施的能力，使用SpringCloud解决方案能够以最低的成本应对当前时代的业务发展。</p><p>SpringCloud整体分布式架构下的各个场景，都有对应的组件来处理，比如基于Netfix(奈飞)的开源分布式解决方案提供的组件：</p><ul><li><code>Eureka</code> ：实现服务治理(服务注册与发现)，我们可以对所有的微服务进行集中管理，包括他们的运行状态、信息等。</li><li><code>Ribbon</code> ：为服务之间相互调用提供负载均衡算法(现在被SpringCloudLoadBalancer取代)</li><li><code>Hystrix</code>：断路器，保护系统，控制故障范围。暂时可以跟家里电闸的保险丝类比，当触电危险发生时能够防止进一步的发展。</li><li><code>Zuul </code>     ：api网关，路由，负载均衡等多种作用，就像我们的路由器，可能有很多个设备都连接了路由器，但是数据包要转发给谁则是由路由器在进行(已经被SpringCloudGateway取代)</li><li><code>Config</code> ：配置管理，可以实现配置文件集中管理</li></ul><h2 id="Eureka-注册中心"><a href="#Eureka-注册中心" class="headerlink" title="Eureka 注册中心"></a>Eureka 注册中心</h2><p><a href="https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/">Eureka 官方文档</a></p><h3 id="微服务项目结构"><a href="#微服务项目结构" class="headerlink" title="微服务项目结构"></a>微服务项目结构</h3><p>我们假设以下场景来模拟</p><ul><li><p>登录验证服务：用于处理用户注册、登录、密码重置等，反正就是一切与账户相关的内容，包括用户信息获取等。</p></li><li><p>图书管理服务：用于进行图书添加、删除、更新等操作，图书管理相关的服务，包括图书的存储等和信息获取。</p></li><li><p>图书借阅服务：交互性比较强的服务，需要和登陆验证服务和图书管理服务进行交互。</p></li></ul><p>过程：</p><ol><li>首先我们创建一个父级别的SpringBoot项目，删除其他无用的文件</li><li>然后在此项目下创建三个Maven子项目分别继承父级别的SpringBoot项目，</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.huang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringCloudStudy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="/../img/mdImg/springcloud/1.png"></p><ol start="3"><li>创建好子项目之后在各个子项目中创建SpringBoot启动类</li></ol><p>这样一个模拟的微服务结构就创建好了。</p><p>然后创建一下表，表的数量根据业务来定</p><p>接下来就可以稍微写业务了，比如用户信息查询业务，我们先把数据库相关的依赖进行导入，这里依然使用Mybatis框架，首先在父项目中添加MySQL驱动和Lombok依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于不是所有的子项目都需要用到Mybatis，我们在父项目中只进行版本管理即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着我们就可以在用户服务子项目中添加此依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着添加数据源信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/cloudstudy</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>接着编写用户相应的业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select uid,name,sex from tb_user where uid=#&#123;uid&#125;&quot;)</span><br>    User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span> &#123;<br>        <span class="hljs-keyword">return</span> userMapper.findUserById(uid);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;uid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;uid&quot;)</span> <span class="hljs-type">int</span> uid)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.findUserById(uid);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着就可以访问地址了。其他两个也类似</p><h3 id="服务间调用"><a href="#服务间调用" class="headerlink" title="服务间调用"></a>服务间调用</h3><p>前面我们完成了用户信息查询和图书信息查询，现在我们来接着完成借阅服务。</p><p>借阅服务是一个关联性比较强的服务，它不仅仅需要查询借阅信息，同时可能还需要获取借阅信息下的详细信息，比如具体那个用户借阅了哪本书，并且用户和书籍的详情也需要同时出现，那么这种情况下，我们就需要去访问除了借阅表以外的用户表和图书表。</p><p><img src="/../img/mdImg/springcloud/2.png"></p><p>但是这显然是违反我们之前所说的单一职责的，相同的业务功能不应该重复出现，但是现在由需要在此服务中查询用户的信息和图书信息，那怎么办呢？我们可以让一个服务去调用另一个服务来获取信息。</p><p><img src="/../img/mdImg/springcloud/3.png"></p><p>这样，图书管理微服务和用户管理微服务相对于借阅记录，就形成了一个生产者和消费者的关系，前者是生产者，后者便是消费者。</p><p>我们先将借阅关联信息查询完善：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Borrow</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> bid;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BorrowMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from tb_borrow where uid=#&#123;uid&#125;&quot;)</span><br>    List&lt;Borrow&gt; <span class="hljs-title function_">getBorrowByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from tb_borrow where bid=#&#123;bid&#125;&quot;)</span><br>    List&lt;Borrow&gt; <span class="hljs-title function_">getBorrowByBid</span><span class="hljs-params">(<span class="hljs-type">int</span> bid)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from tb_borrow where uid=#&#123;uid&#125; and bid=#&#123;bid&#125;&quot;)</span><br>    List&lt;Borrow&gt; <span class="hljs-title function_">getBorrow</span><span class="hljs-params">(<span class="hljs-type">int</span> uid,<span class="hljs-type">int</span> bid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在有一个需求，需要查询用户的借阅详细信息，也就是说需要查询某个用户具体借了那些书，并且需要此用户的信息和所有已借阅的书籍信息一起返回，那么我们先来设计一下返回实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBorrowDetail</span> &#123;<br>    User user;<br>    List&lt;Book&gt; bookList;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现User和Book实体实际上是在另外两个微服务中定义的，相当于当前项目并没有定义这些实体类，那么怎么解决呢？</p><p>因此，我们可以将所有服务需要用到的实体类单独放入另一个一个项目中，然后让这些项目引用集中存放实体类的那个项目，这样就可以保证每个微服务的实体类信息都可以共用了：</p><p><img src="/../img/mdImg/springcloud/4.png"></p><p>然后只需要在对应的类中引用此项目作为依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.huang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之后新的公共实体类都可以在<code>commons</code>项目中进行定义了，现在我们接着来完成刚刚的需求，先定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BorrowService</span> &#123;<br>    UserBorrowDetail <span class="hljs-title function_">getUserBorrowDetailByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorrowServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BorrowService</span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    BorrowMapper mapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserBorrowDetail <span class="hljs-title function_">getUserBorrowDetailByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span> &#123;<br>        List&lt;Borrow&gt; borrow = mapper.getBorrowsByUid(uid);<br>        <span class="hljs-comment">//现在拿到借阅关联信息了，怎么调用其他服务获取信息呢？</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要进行服务远程调用我们需要用到<code>RestTemplate</code>来进行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorrowServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BorrowService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    BorrowMapper borrowMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserBorrowDetail <span class="hljs-title function_">getUserBorrowDetailByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span> &#123;<br>        List&lt;Borrow&gt; borrow = borrowMapper.getBorrowByUid(uid);<br>        System.out.println(borrow);<br>        <span class="hljs-comment">//现在拿到借阅关联信息了，怎么调用其他服务获取信息呢？</span><br>        <span class="hljs-comment">//RestTemplate支持多种方式的远程调用</span><br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>        <span class="hljs-comment">//这里通过调用getForObject来请求其他服务，并将结果自动进行封装</span><br>        <span class="hljs-comment">//获取User信息</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> template.getForObject(<span class="hljs-string">&quot;http://localhost:9002/user/&quot;</span> + uid, User.class);<br>        <span class="hljs-comment">//获取每一本书的详细信息</span><br>        List&lt;Book&gt; books = borrow<br>                .stream()<br>                .map(b -&gt; template.getForObject(<span class="hljs-string">&quot;http://localhost:9000/book/&quot;</span> + b.getBid(), Book.class))<br>                .collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserBorrowDetail</span>(user, books);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再最后完善一下<code>Controller</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorrowController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    BorrowService service;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/borrow/&#123;uid&#125;&quot;)</span><br>    UserBorrowDetail <span class="hljs-title function_">findUserBorrows</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;uid&quot;)</span> <span class="hljs-type">int</span> uid)</span> &#123;<br>        <span class="hljs-keyword">return</span> service.getUserBorrowDetailByUid(uid);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们访问<code>/borrow/&#123;uid&#125;</code>这个接口就实现了获取当前uid学生的详细信息，以及他的详细借阅信息。这样一个简易的分布式项目就搭建完成了。</p><p>注意：一定要保证三个服务都处于开启状态，否则远程调用会失败。</p><h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h3><p>前面我们了解了如何对单体应用进行拆分，并且也学习了如何进行服务之间的相互调用，但是存在一个问题，就是虽然服务拆分完成，但是没有一个比较合理的管理机制，如果单纯只是这样编写，在部署和维护起来，肯定是很麻烦的。可以想象一下，如果某一天这些微服务的端口或是地址大规模地发生改变，我们就不得不将服务之间的调用路径大规模的同步进行修改，这是多么可怕的事情。我们需要削弱这种服务之间的强关联性，因此我们需要一个集中管理微服务的平台，这时就要借助我们这一部分的主角了。</p><p>Eureka能够自动注册并发现微服务，然后对服务的状态、信息进行集中管理，这样当我们需要获取其他服务的信息时，我们只需要向Eureka进行查询就可以了。</p><p><img src="/../img/mdImg/springcloud/5.png"></p><p>接下来，搭建一个Eureka服务器。需要创建一个新的Maven项目，然后在父工程中添加SpringCloud的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>2022.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着为新创建的项目添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着创建主类</p><p>注意：创建好主类，除了加上<code>@SpringBootApplication</code>注解之外，还需要开启eureka服务，需要加上<code>@EnableEurekaServer</code>注解</p><p>接着配置配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9999</span><br><span class="hljs-comment">#配置eureka信息</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#由于是作为服务端角色，所以不需要获取服务器</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#暂时也不需要自己注册到eureka，如果是做集群就改为true</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#设置eureka服务的名称和地址（k:v），目的为了让需要被管理的服务来指向它。key可以自定义</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:9999/eureka</span><br></code></pre></td></tr></table></figure><p>此时就可以直接访问eureka的管理平台了</p><p><img src="/../img/mdImg/springcloud/6.png"></p><p>目前还没有任何的服务注册到Eureka，我们接着来配置一下我们的三个微服务，首先还是需要导入Eureka客户端依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后修改配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>      <span class="hljs-comment"># 跟上面一样，需要指向Eureka服务端地址，这样才能进行注册</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:9999/eureka</span><br></code></pre></td></tr></table></figure><p>无需在启动类添加注解，直接启动就可以了，然后打开Eureka的服务管理页面，可以看到我们刚刚开启的服务：</p><p><img src="/../img/mdImg/springcloud/7.png"></p><p>就可以看到我们三个被注册到eureka上了，由于没有指定名称所以显示的是UNKNOWN，只需要修改一下：</p><p><code>book项目里的配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">bookservice</span><br></code></pre></td></tr></table></figure><p>其他两个操作都一样。</p><p>当我们的服务启动之后，会每隔一段时间跟Eureka发送一次心跳包，这样Eureka就能够感知到我们的服务是否处于正常运行状态。</p><p>那么，现在我们怎么实现服务发现呢？</p><p>也就是说，我们之前如果需要对其他微服务进行远程调用，那么就必须要知道其他服务的地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> template.getForObject(<span class="hljs-string">&quot;http://localhost:9002/user/&quot;</span> + uid, User.class);<br></code></pre></td></tr></table></figure><p>而现在有了Eureka之后，我们可以直接向其进行查询，得到对应的微服务地址，这里直接将服务名称替换即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorrowServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BorrowService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    BorrowMapper borrowMapper;<br><br>    <span class="hljs-meta">@Resource</span><br>    RestTemplate template;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserBorrowDetail <span class="hljs-title function_">getUserBorrowDetailByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span> &#123;<br>        List&lt;Borrow&gt; borrow = borrowMapper.getBorrowByUid(uid);<br>        System.out.println(borrow);<br><span class="hljs-comment">// 注意看地址有变化</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> template.getForObject(<span class="hljs-string">&quot;http://userservice/user/&quot;</span> + uid, User.class);<br><span class="hljs-comment">//这里不用再写IP，直接写服务名称bookservice</span><br>        List&lt;Book&gt; books = borrow<br>            .stream()<br>            .map(b -&gt; template.getForObject(<span class="hljs-string">&quot;http://bookservice/book/&quot;</span> + b.getBid(), Book.class))<br>            .collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserBorrowDetail</span>(user, books);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着我们手动将RestTemplate声明为一个Bean，然后添加<code>@LoadBalanced</code>注解，这样Eureka就会对服务的调用进行自动发现，并提供负载均衡：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>怎么个负载均衡呢？</p><p>我们先来看看，同一个服务器实际上是可以注册很多个的，但是它们的端口不同，比如我们这里创建多个用户查询服务，我们现在将原有的端口配置修改一下，由IDEA中设定启动参数来决定，这样就可以多创建几个不同端口的启动项了：</p><p><img src="/../img/mdImg/springcloud/8.png"></p><p>eureka中也会有两个实例。</p><p>现在我们稍微修改一下用户查询，然后进行远程调用，看看请求是不是均匀地分配到这两个服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(UserController.class);<br><br>    <span class="hljs-meta">@Resource</span><br>    UserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;uid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;uid&quot;)</span> <span class="hljs-type">int</span> uid)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;被调用了&quot;</span>);<br>        <span class="hljs-keyword">return</span> userService.findUserById(uid);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们查看控制台，两个实例都能够均匀地被分配请求：</p><p><img src="/../img/mdImg/springcloud/9.png"></p><p><img src="/../img/mdImg/springcloud/10.png"></p><p>这样，服务自动发现以及简单的负载均衡就实现完成了，并且，如果某个微服务挂掉了，只要存在其他同样的微服务实例在运行，那么就不会导致整个微服务不可用，极大地保证了安全性。</p><h3 id="注册中心高可用"><a href="#注册中心高可用" class="headerlink" title="注册中心高可用"></a>注册中心高可用</h3><p>虽然Eureka能够实现服务注册和发现，但是如果Eureka服务器崩溃了，岂不是所有需要用到服务发现的微服务就挂了？</p><p>为了避免，这种问题，我们也可以像上面那样，搭建Eureka集群，存在多个Eureka服务器，这样就算挂掉其中一个，其他的也还在正常运行，就不会使得服务注册与发现不可用。</p><p><img src="/../img/mdImg/springcloud/11.png"></p><p>如何搭建Eureka集群呢？（此实验只配置两个）</p><p>首先我们需要修改一下Eureka服务端的配置文件，这里我们创建两个配置文件：</p><p><code>application-01.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9901</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eurekaserver</span><br><span class="hljs-comment">#配置eureka信息</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-comment"># 由于不支持多个localhost的Eureka服务器，但是又只有本地测试环境，所以就只能自定义主机名称了</span><br>  <span class="hljs-comment"># 主机名称改为eureka01</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka01</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#由于是作为服务端角色，所以不需要获取服务器</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#暂时也不需要自己注册到eureka，如果是做集群就改为true</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#设置eureka服务的名称和地址（k:v），目的为了让需要被管理的服务来指向它</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka02:9902/eureka</span><br></code></pre></td></tr></table></figure><p><code>application-02.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9902</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eurekaserver</span><br><span class="hljs-comment">#配置eureka信息</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka02</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#由于是作为服务端角色，所以不需要获取服务器</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#暂时也不需要自己注册到eureka，如果是做集群就改为true</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#设置eureka服务的名称和地址（k:v），目的为了让需要被管理的服务来指向它</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka01:9901/eureka</span><br></code></pre></td></tr></table></figure><p>这里由于我们修改成自定义的地址，需要在本机的hosts文件中将其解析到127.0.0.1才能回到localhost。</p><p>对创建的两个配置文件分别添加启动配置，直接使用<code>spring.profiles.active</code>指定启用的配置文件即可：</p><p><img src="/../img/mdImg/springcloud/12.png"></p><p>可以看到下方<code>replicas</code>中已经包含了另一个Eureka服务器的地址，并且是可用状态。</p><p>接着我们需要将我们的微服务配置也进行修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment"># 指定eureka服务，将自己注册进去</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka01:9901/eureka,http://eureka02:9902/eureka</span><br></code></pre></td></tr></table></figure><p>接着启动。可以看到，服务全部成功注册，并且两个Eureka服务端都显示为已注册：</p><p><img src="/../img/mdImg/springcloud/13.png"></p><p>接着我们模拟一下，将其中一个Eureka服务器关闭掉，可以看到它会直接变成不可用状态，但是另一个还会继续服务。</p><h2 id="LoadBalancer-负载均衡"><a href="#LoadBalancer-负载均衡" class="headerlink" title="LoadBalancer 负载均衡"></a>LoadBalancer 负载均衡</h2><p>前面我们讲解了如何对服务进行拆分、如何通过Eureka服务器进行服务注册与发现，那么现在我们来看看，它的负载均衡到底是如何实现的，实际上之前演示的负载均衡是依靠LoadBalancer实现的。</p><p>在2020年前的SpringCloud版本是采用Ribbon作为负载均衡实现，但是2020年的版本之后SpringCloud把Ribbon移除了，进而用自己编写的LoadBalancer替代。</p><p>那么，负载均衡是如何进行的呢？</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>实际上，在添加<code>@LoadBalanced</code>注解之后，会启用拦截器对我们发起的服务调用请求进行拦截（注意这里是针对我们发起的请求进行拦截），叫做<code>LoadBalancerInterceptor</code>，它实现<code>ClientHttpRequestInterceptor</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ClientHttpRequestInterceptor</span> &#123;<br>    ClientHttpResponse <span class="hljs-title function_">intercept</span><span class="hljs-params">(HttpRequest request, <span class="hljs-type">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="hljs-keyword">throws</span> IOException;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是对<code>intercept</code>方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title function_">intercept</span><span class="hljs-params">(<span class="hljs-keyword">final</span> HttpRequest request, <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] body, <span class="hljs-keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">URI</span> <span class="hljs-variable">originalUri</span> <span class="hljs-operator">=</span> request.getURI();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">serviceName</span> <span class="hljs-operator">=</span> originalUri.getHost();<br>    Assert.state(serviceName != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);<br>    <span class="hljs-keyword">return</span> (ClientHttpResponse)<span class="hljs-built_in">this</span>.loadBalancer.execute(serviceName, <span class="hljs-built_in">this</span>.requestFactory.createRequest(request, body, execution));<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端会在发起请求时执行这些拦截器。</p><p>那么这个拦截器做了什么事情呢，首先我们要明确，我们给过来的请求地址，并不是一个有效的主机名称，而是服务名称，那么怎么才能得到真正需要访问的主机名称呢，肯定是得找Eureka获取的。</p><p>我们来看看<code>loadBalancer.execute()</code>做了什么，它的具体实现为<code>BlockingLoadBalancerClient</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从上面给进来了服务的名称和具体的请求实体</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">execute</span><span class="hljs-params">(String serviceId, LoadBalancerRequest&lt;T&gt; request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">hint</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getHint(serviceId);<br>    LoadBalancerRequestAdapter&lt;T, DefaultRequestContext&gt; lbRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancerRequestAdapter</span>(request, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRequestContext</span>(request, hint));<br>    Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors = <span class="hljs-built_in">this</span>.getSupportedLifecycleProcessors(serviceId);<br>    supportedLifecycleProcessors.forEach((lifecycle) -&gt; &#123;<br>        lifecycle.onStart(lbRequest);<br>    &#125;);<br>    <span class="hljs-comment">//可以看到在这里会调用choose方法自动获取对应的服务实例信息，此时的serviceInstance就是进行选择之后的了</span><br>    <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">serviceInstance</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.choose(serviceId, lbRequest);<br>    <span class="hljs-keyword">if</span> (serviceInstance == <span class="hljs-literal">null</span>) &#123;<br>        supportedLifecycleProcessors.forEach((lifecycle) -&gt; &#123;<br>            lifecycle.onComplete(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletionContext</span>(Status.DISCARD, lbRequest, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmptyResponse</span>()));<br>        &#125;);<br>        <span class="hljs-comment">//没有发现任何此服务的实例就抛异常（之前的测试中可能已经遇到了）</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No instances available for &quot;</span> + serviceId);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//成功获取到对应服务的实例，这时就可以发起HTTP请求获取信息了</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.execute(serviceId, serviceInstance, lbRequest);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h3><p>LoadBalancer默认提供了两种负载均衡策略：</p><ul><li>RandomLoadBalancer - 随机分配策略</li><li><strong>(默认)</strong> RoundRobinLoadBalancer - 轮询分配策略</li></ul><p>现在我们希望修改默认的负载均衡策略，可以进行指定，比如我们现在希望用户服务采用随机分配策略，我们需要先创建随机分配策略的配置类（不用加<code>@Configuration</code>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoadBalancerConfig</span> &#123;<br>    <span class="hljs-comment">//将官方提供的 RandomLoadBalancer 注册为Bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="hljs-title function_">randomLoadBalancer</span><span class="hljs-params">(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomLoadBalancer</span>(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着我们需要为对应的服务指定负载均衡策略，直接使用注解即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@LoadBalancerClient(value = &quot;userservice&quot;,      //指定为 userservice 服务，只要是调用此服务都会使用我们指定的策略</span><br><span class="hljs-meta">        configuration = LoadBalancerConfiguration.class)</span>   <span class="hljs-comment">//指定我们刚刚定义好的配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时访问userservice服务的策略已经更改为我们指定的策略了。</p><h3 id="OpenFeign实现负载均衡"><a href="#OpenFeign实现负载均衡" class="headerlink" title="OpenFeign实现负载均衡"></a>OpenFeign实现负载均衡</h3><p>Feign和RestTemplate一样，也是HTTP客户端请求工具，但是它的使用方式更加便捷。首先导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着在启动类添加<code>@EnableFeignClients</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorrowApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(BorrowApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们的这个服务需要调用其他微服务接口，创建一个对应的服务接口类，然后写对应的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;userservice&quot;)</span>  <span class="hljs-comment">//声明为userservice服务的HTTP请求客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/user/&#123;uid&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;uid&quot;)</span> <span class="hljs-type">int</span> uid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们之前的写法需要使用RestTemplate的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RestTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> template.getForObject(<span class="hljs-string">&quot;http://userservice/user/&quot;</span>+uid, User.class);<br></code></pre></td></tr></table></figure><p>而现在不需要了。然后我们直接注入使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorrowServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BorrowService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    BorrowMapper borrowMapper;<br><br>    <span class="hljs-meta">@Resource</span><br>    UserClient userClient;<br><br>    <span class="hljs-meta">@Resource</span><br>    BookClient bookClient;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserBorrowDetail <span class="hljs-title function_">getUserBorrowDetailByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span> &#123;<br>        List&lt;Borrow&gt; borrow = borrowMapper.getBorrowByUid(uid);<br>        System.out.println(borrow);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userClient.findUserById(uid);<br>        List&lt;Book&gt; books = borrow<br>            .stream()<br>            .map(b -&gt; bookClient.findBookById(b.getBid()))<br>            .collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserBorrowDetail</span>(user, books);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>上面代码流程：</strong>就是直接通过注入的<code>Client</code>类对象调用里面的方法，而这个方法呢就是通过<code>@FeignClient(&quot;userservice&quot;)</code>来声明去访问userservice这个服务的（名字是之前在配置文件里取的），访问的路径呢是通过<code>@RequestMapping(&quot;/user/&#123;uid&#125;&quot;)</code>来告诉的，<code>&#123;uid&#125;</code>是通过<code>(@PathVariable(&quot;uid&quot;)</code>这个注解来解析然后将<code>int uid</code>的uid传入路径的。</p><p>最后测试，启动所有服务并且访问，也是能够访问到的。</p><h2 id="Hystrix-服务熔断"><a href="#Hystrix-服务熔断" class="headerlink" title="Hystrix 服务熔断"></a>Hystrix 服务熔断</h2><p>微服务之间可以相互调用，但是如果出现了其中一个服务出现故障，怎么办呢？就像如下的情况一样。</p><p><img src="/../img/mdImg/springcloud/14.png"></p><p>由于位于最底端的服务提供者E发生故障，那么此时会直接导致服务ABCD全线崩溃，就像雪崩了一样。</p><p><img src="/../img/mdImg/springcloud/15.png"></p><p>这种问题实际上是不可避免的，由于多种因素，比如网络卡顿、系统故障、硬件问题等，都存在一定可能，会导致这种极端的情况发生。因此，我们需要寻找一个应对这种极端情况的解决方案。</p><p>为了解决分布式系统的雪崩问题，SpringCloud提供了Hystrix熔断器组件。</p><p>我们来详细看看它的工作机制。</p><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>首先我们来看看服务降级，注意一定要区分开服务降级和服务熔断的区别，服务降级并不会直接返回错误，而是可以提供一个补救措施，正常响应给请求者。这样相当于服务依然可用，但是服务能力肯定是下降了的。</p><p>我们就基于借阅管理服务来进行讲解，我们不开启用户服务和图书服务，表示用户服务和图书服务已经挂掉了。</p><p>这里我们导入Hystrix的依赖（此项目已经停止维护，SpringCloud依赖中已经不自带了，所以说需要自己单独导入）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着我们在需要使用hystrix的服务的启动类上添加注解开启：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableHystrix</span>  <span class="hljs-comment">//启用Hystrix</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span>  <span class="hljs-comment">//启用FeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorrowApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(BorrowApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么现在，由于用户服务和图书服务不可用，所以查询借阅信息的请求肯定是没办法正常响应的，这时我们可以提供一个备选方案，也就是说当服务出现异常时，返回我们的备选方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorrowController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    BorrowService service;<br><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;onError&quot;)</span> <span class="hljs-comment">//指定指定备选方案</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/borrow/&#123;uid&#125;&quot;)</span><br>    UserBorrowDetail <span class="hljs-title function_">findUserBorrows</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;uid&quot;)</span> <span class="hljs-type">int</span> uid)</span> &#123;<br>        <span class="hljs-keyword">return</span> service.getUserBorrowDetailByUid(uid);<br>    &#125;<br><br>    <span class="hljs-comment">//备选方案</span><br>    <span class="hljs-comment">//注意：参数和返回值要和被备选的一致</span><br>    UserBorrowDetail <span class="hljs-title function_">onError</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserBorrowDetail</span>(<span class="hljs-literal">null</span>, Collections.emptyList());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们启动服务并访问，可以看到虽然我们服务无法正常运行了，但是依然还是会响应给浏览器我们设置的备选方案的数据。</p><p>服务降级是一种比较温柔的解决方案，虽然服务本身的不可用，但是能够保证正常响应数据。</p><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>熔断机制是应对雪崩效应的一种微服务链路保护机制，当检测出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回”错误”的响应信息。当检测到该节点微服务响应正常后恢复调用链路。</p><p>实际上，熔断就是在降级的基础上进一步升级形成的，在一段时间内多次调用失败，那么就直接升级为熔断。</p><p>比如说：当我们访问一个故障了的服务时，刚开始还会正常先去访问原来该访问的服务，看是否真的故障了，true就访问备选方案，当我们访问到一定次数且每次都是true的时候，就会升级到熔断状态（就不会访问原来的服务了，而是直接访问备选方案）。在一定次数中（次数非常多的），过一段时间，它会尝试的访问原来服务，如果还是true，熔断会保持，否则说明服务正常了，熔断关闭。</p><p><img src="/../img/mdImg/springcloud/16.png"></p><h3 id="OpenFeign实现降级"><a href="#OpenFeign实现降级" class="headerlink" title="OpenFeign实现降级"></a>OpenFeign实现降级</h3><p>Hystrix也可以配合Feign进行降级，我们可以对应接口中定义的远程调用单独进行降级操作。</p><p>比如我们还是以用户服务挂掉为例，那么这个时候肯定是会远程调用失败的，也就是说我们的Controller中的方法在执行过程中会直接抛出异常，进而被Hystrix监控到并进行服务降级。</p><p>而实际上导致方法执行异常的根源就是远程调用失败，所以我们换个思路，既然用户服务调用失败，那么我就给这个远程调用添加一个替代方案，如果此远程调用失败，那么就直接上替代方案。那么怎么实现替代方案呢？我们知道Feign都是以接口的形式来声明远程调用，那么既然远程调用已经失效，我们就自行对其进行实现，创建一个实现类，对原有的接口方法进行替代方案实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>   <span class="hljs-comment">//注意，需要将其注册为Bean，Feign才能自动注入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFallbackClient</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserClient</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span> &#123;   <span class="hljs-comment">//这里我们自行对其进行实现，并返回我们的替代方案</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;我是替代方案&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现完成后，我们只需要在原有的接口中指定失败替代实现<code>fallback</code>即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//fallback参数指定为我们刚刚编写的实现类</span><br><span class="hljs-meta">@FeignClient(value = &quot;userservice&quot;, fallback = UserFallbackClient.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user/&#123;uid&#125;&quot;)</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;uid&quot;)</span> <span class="hljs-type">int</span> uid)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后我们在配置文件中开启<code>feign</code>熔断支持：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">circuitbreaker:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>启动服务，调用接口，返回的就是备选。</p><h3 id="监控页面部署"><a href="#监控页面部署" class="headerlink" title="监控页面部署"></a>监控页面部署</h3><p>除了对服务的降级和熔断处理，我们也可以对其进行实时监控，只需要安装监控页面即可，这里我们创建一个新的项目，导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着添加配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8900</span><br><span class="hljs-attr">hystrix:</span><br>  <span class="hljs-attr">dashboard:</span><br>    <span class="hljs-comment"># 将localhost添加到白名单，默认是不允许的</span><br>    <span class="hljs-attr">proxy-stream-allow-list:</span> <span class="hljs-string">&quot;localhost&quot;</span><br></code></pre></td></tr></table></figure><p>接着创建主类，注意需要添加<code>@EnableHystrixDashboard</code>注解开启管理页面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableHystrixDashboard</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HystrixDashBoardApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(HystrixDashBoardApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动Hystrix管理页面服务，然后我们需要在要进行监控的服务中添加Actuator依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Actuator是SpringBoot程序的监控系统，可以实现健康检查，记录信息等。在使用之前需要引入spring-boot-starter-actuator，并做简单的配置即可。</p></blockquote><p>然后在配置文件中配置Actuator添加暴露：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>不添加暴露，Actuator将不能在浏览器被访问、</p></blockquote><p>接着我们打开刚刚启动的管理页面，地址为：<a href="http://localhost:自定义的端口号/hystrix/">http://localhost:自定义的端口号/hystrix/</a></p><p><img src="/../img/mdImg/springcloud/17.png"></p><p>在中间填写要监控的服务：比如借阅服务：<a href="http://localhost:服务的端口号/actuator/hystrix.stream">http://localhost:服务的端口号/actuator/hystrix.stream</a>，注意后面要添加<code>/actuator/hystrix.stream</code>，然后点击Monitor Stream即可进入监控页面：</p><p><img src="/../img/mdImg/springcloud/18.png"></p><p>可以看到现在都是Loading状态，这是因为还没有开始统计，我们现在尝试调用我们的服务，就可以看到有信息数据了。</p><h2 id="Gateway-路由网关"><a href="#Gateway-路由网关" class="headerlink" title="Gateway 路由网关"></a>Gateway 路由网关</h2><p>这里的路由网关就跟平时使用的路由器一样，充当一个中转站以及一个守卫的作用。比如，我们的微服务一般情况下，可能并不是所有的微服务都需要直接暴露给外部调用，这时我们就可以使用路由机制，添加一层防护，让所有的请求全部通过路由来转发到各个微服务，并且转发给多个相同微服务实例也可以实现负载均衡。</p><p><img src="/../img/mdImg/springcloud/19.png"></p><p>之前的时候，路由的实现一般使用Zuul，但是已经停更，而现在新出现了由SpringCloud官方开发的Gateway路由，它相比Zuul不仅性能上得到了一定的提升，并且是官方推出，契合性也会更好。</p><h3 id="部署路由网关"><a href="#部署路由网关" class="headerlink" title="部署路由网关"></a>部署路由网关</h3><p>首先创建一个新的项目，来作为路由网关，需要添加两个依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一个依赖就是网关的依赖，而第二个则跟其他微服务一样，需要注册到Eureka才能生效</p><p><strong>注意：</strong>此项目不要添加Web依赖，因为使用的WebFlux框架。但是因为此项目继承的父项目中有Web依赖，继承了那个项目就自动使用了Web依赖，所以我们需要添加配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">web-application-type:</span> <span class="hljs-string">reactive</span><br></code></pre></td></tr></table></figure><p>然后就是添加其他配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9500</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka01:9901/eureka,http://eureka02:9902/eureka</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span><br></code></pre></td></tr></table></figure><p>现在就将此服务注册到Eureka中去了。</p><p>但是现在还没有配置任何的路由功能，我们接着将路由功能进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>        <span class="hljs-comment"># 配置路由，注意这里是个列表，每一项都包含了很多信息</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">borrow-service</span>   <span class="hljs-comment"># 路由名称</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://borrowservice</span>  <span class="hljs-comment"># 路由的地址，lb表示使用负载均衡到微服务，也可以使用http正常转发</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment"># 路由规则，断言什么请求会被路由</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/borrow/**</span>  <span class="hljs-comment"># 只要是访问的这个路径，一律都被路由到上面指定的服务</span><br></code></pre></td></tr></table></figure><p>路由规则的详细列表（断言工厂列表）在这里：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">Spring Cloud Gateway</a>，可以指定多种类型，包括指定时间段、Cookie携带情况、Header携带情况、访问的域名地址、访问的方法、路径、参数、访问者IP等。也可以使用配置类进行配置，但是还是推荐直接配置文件，省事。</p><p>接着启动网关，然后我们就可以直接通过访问网关来访问我们的服务了。不过此时依然还是可以使用原来的服务地址进行访问。</p><p>这样我们就可以将不需要外网直接访问的微服务全部放到内网环境下，而只依靠网关来对外进行交涉。</p><h3 id="路由过滤器"><a href="#路由过滤器" class="headerlink" title="路由过滤器"></a>路由过滤器</h3><p>路由过滤器支持以某种方式修改传入的 HTTP 请求或传出的 HTTP 响应，路由过滤器的范围是某一个路由，跟之前的断言一样，Spring Cloud Gateway 也包含许多内置的路由过滤器工厂，详细列表：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories">Spring Cloud Gateway</a></p><p>比如我们现在希望在请求到达时，在请求头中添加一些信息再转发给我们的服务，那么这个时候就可以使用路由过滤器来完成，我们只需要对配置文件进行修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">borrow-service</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://borrowservice</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/borrow/**</span><br>      <span class="hljs-comment"># 继续添加新的路由配置，这里就以书籍管理服务为例</span><br>      <span class="hljs-comment"># 注意-要对齐routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">book-service</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://bookservice</span><br>        <span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/book/**</span><br>        <span class="hljs-attr">filters:</span>   <span class="hljs-comment"># 添加过滤器</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Test,</span> <span class="hljs-string">HelloWorld!</span><br>        <span class="hljs-comment"># AddRequestHeader 就是添加请求头信息，其他工厂请查阅官网</span><br></code></pre></td></tr></table></figure><p>接着我们在BorrowController中获取并输出一下，看看是不是成功添加了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorrowController</span> &#123;<br>    <br>    <span class="hljs-meta">@Resource</span><br>    BorrowService service;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/borrow/&#123;uid&#125;&quot;)</span><br>    UserBorrowDetail <span class="hljs-title function_">findUserBorrows</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;uid&quot;)</span> <span class="hljs-type">int</span> uid,</span><br><span class="hljs-params">                                     HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Test&quot;</span>);<br>        System.out.println(test);<br>        <span class="hljs-keyword">return</span> service.getUserBorrowDetailByUid(uid);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们通过Gateway访问我们的图书管理服务：</p><p><img src="/../img/mdImg/springcloud/20.png"></p><p>可以看到这里成功获取到由网关添加的请求头信息了。</p><p>除了针对于某一个路由配置过滤器之外，我们也可以自定义全局过滤器，它能够作用于全局。但是我们需要通过代码的方式进行编写，比如我们要实现拦截没有携带指定请求参数的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>   <span class="hljs-comment">//需要注册为Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;   <span class="hljs-comment">//只需要实现此方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着我们编写业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>    <span class="hljs-comment">//先获取ServerHttpRequest对象，注意不是HttpServletRequest</span><br>    <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>    <span class="hljs-comment">//打印一下所有的请求参数</span><br>    System.out.println(request.getQueryParams());<br>    <span class="hljs-comment">//判断是否包含test参数，且参数值为1</span><br>    List&lt;String&gt; value = request.getQueryParams().get(<span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-keyword">if</span>(value != <span class="hljs-literal">null</span> &amp;&amp; value.contains(<span class="hljs-string">&quot;1&quot;</span>)) &#123;<br>        <span class="hljs-comment">//将ServerWebExchange向过滤链的下一级传递（跟JavaWeb中介绍的过滤器其实是差不多的）</span><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//直接在这里不再向下传递，然后返回响应</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过网关地址访问，可以看到成功实现拦截操作。</p><p>当然，过滤器肯定是可以存在很多个的，所以我们可以手动指定过滤器之间的顺序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;   <span class="hljs-comment">//实现Ordered接口</span><br>  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>注意Order的值越小优先级越高，并且无论是在配置文件中编写的单个路由过滤器还是全局路由过滤器，都会受到Order值影响（单个路由的过滤器Order值按从上往下的顺序从1开始递增），最终是按照Order值决定哪个过滤器优先执行，当Order值一样时 全局路由过滤器执行 <code>优于</code> 单独的路由过滤器执行。</p><h2 id="Config-配置中心"><a href="#Config-配置中心" class="headerlink" title="Config 配置中心"></a>Config 配置中心</h2><p>通过前面的学习我们能够发现，当所有的配置都设置在当前项目中，如果后期随着微服务的增多并且又需要更改配置文件中的信息。那肯定是非常麻烦的。</p><p>所以，就可以使用一种更加高级的集中化地配置文件管理工具，集中地对配置文件进行配置。</p><p><img src="/../img/mdImg/springcloud/21.png"></p><p>实际上Spring Cloud Config就是一个配置中心，所有的服务都可以从配置中心取出配置，而配置中心又可以从GitHub远程仓库中获取云端的配置文件，这样我们只需要修改GitHub中的配置即可对所有的服务进行配置管理了。</p><h3 id="部署配置中心"><a href="#部署配置中心" class="headerlink" title="部署配置中心"></a>部署配置中心</h3><p>这里我们接着创建一个新的项目，并导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动类，注意使用注解<code>@EnableConfigServer</code>开启config的服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ConfigApplication.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9700</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">configserver</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka01:9901/eureka,http://eureka02:9902/eureka</span><br></code></pre></td></tr></table></figure><p>接着我们创建远程仓库（gitee、github都行），如果远程仓库卡的话在学习阶段也可以使用本地仓库。</p><p>创建好之后，在本地创建好配置文件然后推送上去，注意：名称最好是<code>&#123;服务名称&#125;-&#123;环境&#125;.yml</code></p><p><img src="/../img/mdImg/springcloud/22.png"></p><p>然后我们在配置文件中，添加远程仓库的一些信息（本地仓库同理），详细使用教程：<a href="https://docs.spring.io/spring-cloud-config/docs/current/reference/html/#_git_backend">Spring Cloud Config</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">configserver</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br>          <span class="hljs-comment">#这里填写配置的地址，本地仓库的话：file://$&#123;user.home&#125;/Desktop/config-repo</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://gitee.com/xxxxx/config-repo</span><br>          <span class="hljs-comment">#默认分支设定为本地或者远程的分支名称</span><br>          <span class="hljs-attr">default-label:</span> <span class="hljs-string">master</span><br><span class="hljs-comment">#          force-pull: true</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">xxxxx</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">xxxxx</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>本地仓库不用使用用户名（远程仓库用户名）和密码。</p><p>然后启动我们的配置服务器，通过以下格式进行访问：</p><ul><li><a href="http://localhost:9700/%7B%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%7D/%7B%E7%8E%AF%E5%A2%83%7D/%7BGit%E5%88%86%E6%94%AF%7D">http://localhost:9700/{服务名称}/{环境}/{Git分支}</a></li><li><a href="http://localhost:9700/%7BGit%E5%88%86%E6%94%AF%7D/%7B%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%7D-%7B%E7%8E%AF%E5%A2%83%7D.yml">http://localhost:9700/{Git分支}/{服务名称}-{环境}.yml</a></li></ul><p>通过访问之后就可以看到浏览器上显示有自己编写的配置信息。</p><p>当然，除了使用Git来保存之外，还支持一些其他的方式，详细情况请查阅官网。</p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>服务端配置完成之后，我们接着来配置一下客户端，那么现在我们的服务既然需要从服务器读取配置文件，那么就需要进行一些配置，我们删除原来的<code>application.yml</code>文件（也可以保留，最后无论是远端配置还是本地配置都会被加载），改用<code>bootstrap.yml</code>（在application.yml之前加载，可以实现配置文件远程获取）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--连接云端配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-comment">#名称：文件名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">bookservice</span><br>      <span class="hljs-comment">#配置服务器的地址</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9700</span><br>      <span class="hljs-comment">#环境</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span><br>      <span class="hljs-comment">#分支</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>配置完成之后，启动图书服务，就可以正常访问了。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot3学习笔记 --SpringBoot3-场景整合</title>
    <link href="/2023/07/13/SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20--SpringBoot3-%E5%9C%BA%E6%99%AF%E6%95%B4%E5%90%88/"/>
    <url>/2023/07/13/SpringBoot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20--SpringBoot3-%E5%9C%BA%E6%99%AF%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot3-场景整合"><a href="#SpringBoot3-场景整合" class="headerlink" title="SpringBoot3-场景整合"></a>SpringBoot3-场景整合</h1><p>在Linux系统上安装docker容器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd">sudo yum install -y yum-utils<br>sudo yum-config-manager \<br>&gt; --add-repo \<br>&gt; https://download.docker.com/linux/centos/docker-ce.repo<br>sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br><br>sudo systemctl enable docker --now<br><br># 调试工作<br>docker ps<br># 批量安装所有软件<br>docker compose<br></code></pre></td></tr></table></figure><p>创建<code>/prod</code>文件夹（有则不需要），准备以下文件</p><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;6379:6379&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis-data:/data</span><br><br>  <span class="hljs-attr">prometheus:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/prometheus:latest</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9090:9090&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./prometheus.yml:/etc/prometheus/prometheus.yml</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">prometheus-data:/prometheus</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span><br><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wurstmeister/kafka</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9092:9092&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">KAFKA_ADVERTISED_HOST_NAME=kafka</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">kafka-data:/kafka</span><br><br>  <span class="hljs-attr">kafka-ui:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">provectuslabs/kafka-ui</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;8080:8080&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">KAFKA_CLUSTERS_0_NAME=local</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">KAFKA_CLUSTERS_0_ZOOKEEPER_CONNECT=zookeeper:2181</span><br><br>  <span class="hljs-attr">grafana:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">grafana/grafana:latest</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3000:3000&#x27;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">prometheus</span><br><br>  <span class="hljs-attr">zookeeper:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wurstmeister/zookeeper</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;2181:2181&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ZOOKEEPER_SERVER_ID=1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ZOOKEEPER_CLIENT_PORT=2181</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ZOOKEEPER_TICK_TIME=2000</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">zookeeper-data:/data</span><br><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:latest</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3306:3306&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=yourpassword</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_DATABASE=yourdatabase</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql-data:/var/lib/mysql</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">redis-data:</span><br>  <span class="hljs-attr">prometheus-data:</span><br>  <span class="hljs-attr">kafka-data:</span><br>  <span class="hljs-attr">zookeeper-data:</span><br>  <span class="hljs-attr">mysql-data:</span><br></code></pre></td></tr></table></figure><p>prometheus.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">15s</span><br>  <span class="hljs-attr">evaluation_interval:</span> <span class="hljs-string">15s</span><br><br><span class="hljs-attr">scrape_configs:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;prometheus&#x27;</span><br>   <span class="hljs-attr">static_configs:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:9090&#x27;</span>]<br><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;redis&#x27;</span><br>   <span class="hljs-attr">static_configs:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;redis:6379&#x27;</span>]<br><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;kafka &#x27;</span><br>   <span class="hljs-attr">static_configs:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;kafka:9092&#x27;</span>]<br></code></pre></td></tr></table></figure><p>启动环境</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker compose -f docker-compose.yml up -d<br></code></pre></td></tr></table></figure><h2 id="1、NoSQL"><a href="#1、NoSQL" class="headerlink" title="1、NoSQL"></a>1、NoSQL</h2><h3 id="1-1-Redis整合"><a href="#1-1-Redis整合" class="headerlink" title="1.1 Redis整合"></a>1.1 Redis整合</h3><h4 id="1-1-1-场景整合"><a href="#1-1-1-场景整合" class="headerlink" title="1.1.1 场景整合"></a>1.1.1 场景整合</h4><p>导入redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置数据源</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.data.redis.host</span>=<span class="hljs-string">111.230.48.114(此host为需要连接的redis的服务器的IP)</span><br><span class="hljs-attr">spring.data.redis.port</span>=<span class="hljs-string">6379</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/count&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">count</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;访问了【&quot;</span> + hello + <span class="hljs-string">&quot;】&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-1-2-自动配置原理"><a href="#1-1-2-自动配置原理" class="headerlink" title="1.1.2 自动配置原理"></a>1.1.2 自动配置原理</h4><p>SpringBoot启动是会加载<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件中的<code>RedisAutoConfiguration</code>类。</p><ul><li><code>RedisAutoConfiguration</code>类配置了以下组件<ul><li><code>LettuceConnectionConfiguration</code>给容器中注入连接工厂<code>LettuceConnectionFactory</code>和操作redis的客户端<code>DefaultClientResources</code></li><li><code>RedisTemplate&lt;Object, Object&gt;</code>：可以给redis中存放任意对象，会使用jdk默认序列化方式</li><li><code>StringRedisTemplate</code>：给redis中存放字符串，如果要存放对象，需自行进行序列化。</li></ul></li></ul><p>所有的属性绑定在<code>RedisProperties</code>类中</p><h4 id="1-1-3-自定义序列化"><a href="#1-1-3-自定义序列化" class="headerlink" title="1.1.3 自定义序列化"></a>1.1.3 自定义序列化</h4><p>redis采用的序列化机制默认是jdk的序列化<code>JdkSerializationRedisSerializer()</code>。</p><p>我们可以自定义序列化规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>    RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>    template.setConnectionFactory(redisConnectionFactory);<br>    <span class="hljs-comment">// 把对象转为json字符串的序列化工具</span><br>    template.setDefaultSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br>    <span class="hljs-keyword">return</span> template;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Redis事务处理"><a href="#Redis事务处理" class="headerlink" title="Redis事务处理"></a>Redis事务处理</h4><p>由于 spring 并没有专门的 redis 提供事务管理器，但是可以借助 jdbc 提供的。</p><p>操作步骤：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-comment">&lt;!--Driver驱动--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    StringRedisTemplate template;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        template.setEnableTransactionSupport(<span class="hljs-literal">true</span>);  <span class="hljs-comment">// 需要开启事务</span><br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span>  <span class="hljs-comment">// 需要开启此注解</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        template.multi();<br>        template.opsForValue().set(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;xxxxx&quot;</span>);<br>        template.exec();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Redis做缓存"><a href="#Redis做缓存" class="headerlink" title="Redis做缓存"></a>Redis做缓存</h4><blockquote><p>二级缓存，不过它是Mapper级别的缓存，能够作用与所有会话。</p></blockquote><p><img src="/../img/mdImg/redis/Cache.png"></p><h5 id="Mybatis二级缓存"><a href="#Mybatis二级缓存" class="headerlink" title="Mybatis二级缓存"></a>Mybatis二级缓存</h5><p>Mybatis也能够做二级缓存，不过有一个问题，就是由于Mybatis默认的二级缓存只能是单机的，如果存在多态服务器访问同一个数据库，实际上二级缓存只会在各个服务器上生效。但是我们想在多台服务器上都能使用同一个二级缓存，这样就不会造成过多的资源浪费。</p><p>我们可以将Redis作为Mybatis的二级缓存，这样就能够实现多台服务器使用同一个二级缓存了，它们只需要连接同一台Redis服务器即可，所有的缓存数据全部存储在Redis服务器上。需要手动实现Mybatis提供的Cache接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisRedisCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RedisTemplate&lt;Object, Object&gt; template;<br><br>    <span class="hljs-comment">//构造方法必须带一个String类型的参数接收id</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MybatisRedisCache</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-comment">//初始化时通过配置类将RedisTemplate给过来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTemplate</span><span class="hljs-params">(RedisTemplate&lt;Object, Object&gt; template)</span> &#123;<br>        MybatisRedisCache.template = template;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>        <span class="hljs-comment">//这里直接向Redis数据库中丢数据，第一个参数为key，第二个为value</span><br>        template.opsForValue().set(key, value, <span class="hljs-number">60</span>, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-comment">//根据key直接从redis数据库中获取值</span><br>        <span class="hljs-keyword">return</span> template.opsForValue().get(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-comment">//根据key删除value</span><br>        <span class="hljs-keyword">return</span> template.delete(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//由于template中没有封装清除操作，之呢个通过connection来执行</span><br>        template.execute((RedisCallback&lt;Void&gt;) connection -&gt; &#123;<br>            connection.serverCommands();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//这里也是用connection对象来获取当前key的数量</span><br>        <span class="hljs-keyword">return</span> template.execute(RedisServerCommands::dbSize).intValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓存类编写完成后，接着编写配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        MybatisRedisCache.setTemplate(redisTemplate);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再Mapper上启用此缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheNamespace(implementation = MybatisRedisCache.class)</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CacheMapper</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select username from db1.user where password=222222&quot;)</span><br>    String <span class="hljs-title function_">getSid</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot309RedisApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">cacheTest</span><span class="hljs-params">()</span>&#123;<br>        cacheMapper.getSid();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看Redis数据库可以看到有一条Mybatis生成的缓存数据了</p><h5 id="Token持久化存储"><a href="#Token持久化存储" class="headerlink" title="Token持久化存储"></a>Token持久化存储</h5><p>将token信息保存到Redis缓存当中，只需要实现  接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTokenRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PersistentTokenRepository</span> &#123;<br><br>    <span class="hljs-comment">//Key名前缀，用于区分</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">REMEMBER_ME_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring:security:rememberMe&quot;</span>;<br>    <span class="hljs-meta">@Resource</span><br>    RedisTemplate&lt;Object, Object&gt; template;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNewToken</span><span class="hljs-params">(PersistentRememberMeToken token)</span> &#123;<br>        <span class="hljs-comment">//这里要放置两个，一个存seriesId-&gt;Token，一个存username-&gt;seriesId，因为删除时是通过username删除</span><br>        template.opsForValue().set(REMEMBER_ME_KEY + <span class="hljs-string">&quot;username:&quot;</span> + token.getUsername(), token.getSeries());<br>        template.expire(REMEMBER_ME_KEY + <span class="hljs-string">&quot;username:&quot;</span> + token.getUsername(), <span class="hljs-number">1</span>, TimeUnit.DAYS);<br>        <span class="hljs-built_in">this</span>.setToken(token);<br>    &#125;<br><br>    <span class="hljs-comment">//先获取，然后修改创建一个新的，再放入</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateToken</span><span class="hljs-params">(String series, String tokenValue, Date lastUsed)</span> &#123;<br>        <span class="hljs-type">PersistentRememberMeToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getToken(series);<br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.setToken(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersistentRememberMeToken</span>(token.getUsername(), series, tokenValue, lastUsed));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PersistentRememberMeToken <span class="hljs-title function_">getTokenForSeries</span><span class="hljs-params">(String seriesId)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getToken(seriesId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeUserTokens</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">series</span> <span class="hljs-operator">=</span> (String) template.opsForValue().get(REMEMBER_ME_KEY + <span class="hljs-string">&quot;username:&quot;</span> + username);<br>        template.delete(REMEMBER_ME_KEY + series);<br>        template.delete(REMEMBER_ME_KEY + <span class="hljs-string">&quot;username:&quot;</span> + username);<br>    &#125;<br><br>    <span class="hljs-comment">//由于PersistentRememberMeToken没有实现序列化接口，就只能使用Hash来存储，所以单独编写set和get操作</span><br>    <span class="hljs-keyword">private</span> PersistentRememberMeToken <span class="hljs-title function_">getToken</span><span class="hljs-params">(String series)</span> &#123;<br>        Map&lt;Object, Object&gt; map = template.opsForHash().entries(REMEMBER_ME_KEY + series);<br>        <span class="hljs-keyword">if</span> (map.isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersistentRememberMeToken</span>(<br>            (String) map.get(<span class="hljs-string">&quot;username&quot;</span>),<br>            (String) map.get(<span class="hljs-string">&quot;series&quot;</span>),<br>            (String) map.get(<span class="hljs-string">&quot;tokenValue&quot;</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(Long.parseLong((String) map.get(<span class="hljs-string">&quot;date&quot;</span>)))<br>        );<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setToken</span><span class="hljs-params">(PersistentRememberMeToken token)</span> &#123;<br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;username&quot;</span>, token.getUsername());<br>        map.put(<span class="hljs-string">&quot;series&quot;</span>, token.getSeries());<br>        map.put(<span class="hljs-string">&quot;tokenValue&quot;</span>, token.getTokenValue());<br>        map.put(<span class="hljs-string">&quot;date&quot;</span>, String.valueOf(token.getDate().getTime()));<br>        template.opsForHash().putAll(REMEMBER_ME_KEY + token.getSeries(), map);<br>        template.expire(REMEMBER_ME_KEY + token.getSeries(), <span class="hljs-number">1</span>, TimeUnit.DAYS);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三大缓存问题"><a href="#三大缓存问题" class="headerlink" title="三大缓存问题"></a>三大缓存问题</h4><h5 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h5><p><img src="/../img/mdImg/redis/CachePenetration.png" alt="缓存穿透"></p><p>当我们去查询一个一定不存在的数据，比如Mybatis在缓存是未命中的情况下需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</p><p>这显然是很浪费资源的，我们希望的是，如果这个数据不存在，为什么缓存这一层不直接返回空呢，这时就不必再去查数据库了，但是也有一个问题，缓存不去查数据库怎么知道数据库里面到底有没有这个数据呢?</p><p>我们可以使用布隆过滤器来判断，什么是布隆过滤器？</p><p>使用布隆过滤器，能够告诉你某样东西<strong>一定不存在</strong>或是<strong>某样东西可能存在</strong>。</p><p>布隆过滤器本质是一个存放二进制位的bit数组，如果我们要添加一个值到布隆过滤器中，我们需要使用N个不同的哈希函数来生成N个哈希值，并对每个生成的哈希值指向的bit位置1，如上图所示，一共添加了三个值abc。</p><p>接着我们给一个d，那么这时就可以进行判断，如果说d计算的N个哈希值的位置上都是1，那么就说明d可能存在;这时候又来了个e,计算后我们发现有一个位置上的值是0，这时就可以直接断定e一定不存在。</p><h5 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h5><p><img src="/../img/mdImg/redis/CacheBreakdown.png" alt="缓存击穿"></p><p>某个Key属于热点数据，访问非常频繁，同一时间很多人都在访问，在这个Key失效的瞬间，大量的请求到来，这时发现缓存中没有数据，就全都直接请求数据库，相当于击穿了缓存屏障，直接攻击整个系统核心。</p><p>这种情况下，最好的解决办法就是不让Key那么快过期，如果一个Key处于高频访问，那么可以适当地延长过期时间。获取设置Key的过期时间不一样。</p><h5 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h5><p><img src="/../img/mdImg/redis/CacheAvalanche.png" alt="缓存雪崩"></p><p>当你的Redis服务器宕机了或是大量的Key在同一时间过期，这时相当于缓存直接挂了，那么如果这时又有很多的请求来访问不同的数据，同一时间内缓存服务器就得向数据库大量发起请求来重新建立缓存，很容易把数据库也搞挂。</p><p>解决这种问题最好的办法就是设置高可用，也就是搭建Redis集群，当然也可以采取一些服务熔断降级机制。</p><h4 id="redis客户端"><a href="#redis客户端" class="headerlink" title="redis客户端"></a>redis客户端</h4><blockquote><p>RedisTemplate、StringRedisTemplate：都是操作redis的工具类</p><ul><li>要从redis的连接工厂获取连接才能操作redis</li><li>Redis客户端：<ul><li>Jedis</li><li>Lettuce（默认）</li></ul></li></ul></blockquote><p>切换redis客户端，首先导入新客户端的坐标，并排除默认的客户端坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.lettuce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lettuce-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在配置文件中切换客户端</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.data.redis.client-type</span>=<span class="hljs-string">jedis</span><br></code></pre></td></tr></table></figure><h2 id="2、接口文档"><a href="#2、接口文档" class="headerlink" title="2、接口文档"></a>2、接口文档</h2><h3 id="2-1-OpenAPI-和-Swagger"><a href="#2-1-OpenAPI-和-Swagger" class="headerlink" title="2.1 OpenAPI 和 Swagger"></a>2.1 OpenAPI 和 Swagger</h3><blockquote><p>swagger可以快速生成实时接口文档，方便前后端开发，遵循OpenAPI规范</p></blockquote><h3 id="2-2-Swagger-整合"><a href="#2-2-Swagger-整合" class="headerlink" title="2.2 Swagger 整合"></a>2.2 Swagger 整合</h3><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-----或者-----&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3、使用"><a href="#2-3、使用" class="headerlink" title="2.3、使用"></a>2.3、使用</h3><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th>注解</th><th>标注位置</th><th>作用</th></tr></thead><tbody><tr><td>@Tag</td><td>controller类</td><td>标识controller作用</td></tr><tr><td>@Parameter</td><td>参数</td><td>标识参数作用</td></tr><tr><td>@Parameters</td><td>参数</td><td>标识参数作用（多个）</td></tr><tr><td>@Schema</td><td>model层的JavaBean</td><td>描述模型作用及每个属性</td></tr><tr><td>@operation</td><td>方法</td><td>描述方法作用</td></tr><tr><td>@ApiResponse</td><td>方法</td><td>描述响应状态码</td></tr></tbody></table><h4 id="Docket配置"><a href="#Docket配置" class="headerlink" title="Docket配置"></a>Docket配置</h4><p>如果有多个docket，可以进行分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerUIConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> GroupedOpenApi <span class="hljs-title function_">publicApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> GroupedOpenApi<br>            .builder()<br>            .group(<span class="hljs-string">&quot;spring-public&quot;</span>)<br>            .pathsToMatch(<span class="hljs-string">&quot;/public/**&quot;</span>)<br>            .build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> GroupedOpenApi <span class="hljs-title function_">adminApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> GroupedOpenApi<br>            .builder()<br>            .group(<span class="hljs-string">&quot;spring-admin&quot;</span>)<br>            .pathsToMatch(<span class="hljs-string">&quot;/admin/**&quot;</span>)<br>            .addOpenApiMethodFilter(method -&gt; method.isAnnotationPresent(Admin.class))<br>            .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果只有一个也可以在配置文件中配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">springdoc.packages-to-scan</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">springdoc.paths-to-match</span>=<span class="hljs-string">/xx/**</span><br></code></pre></td></tr></table></figure><h4 id="OpenAPI配置"><a href="#OpenAPI配置" class="headerlink" title="OpenAPI配置"></a>OpenAPI配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">docsOpenAPI</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>()<br>        .info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>()<br>              .title(<span class="hljs-string">&quot;springShop API&quot;</span>)<br>              .description(<span class="hljs-string">&quot;Spring shop sample application&quot;</span>)<br>              .version(<span class="hljs-string">&quot;v0.0.1&quot;</span>)<br>              .license(<span class="hljs-keyword">new</span> <span class="hljs-title class_">License</span>().name(<span class="hljs-string">&quot;Apache 2.0&quot;</span>).url(<span class="hljs-string">&quot;http://sprinqdoc.org&quot;</span>)))<br>        .externalDocs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExternalDocumentation</span>()<br>                      .description(<span class="hljs-string">&quot;SpringShop Wiki Documentation&quot;</span>)<br>                      .url(<span class="hljs-string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、远程调用"><a href="#3、远程调用" class="headerlink" title="3、远程调用"></a>3、远程调用</h2><p><strong>RPC（Remote Procedure Call）：远程过程调用</strong></p><h3 id="3-1-WebClient"><a href="#3-1-WebClient" class="headerlink" title="3.1 WebClient"></a>3.1 WebClient</h3><blockquote><p>非阻塞、响应式HTTP客户端</p></blockquote><h4 id="3-1-1-创建和配置"><a href="#3-1-1-创建和配置" class="headerlink" title="3.1.1 创建和配置"></a>3.1.1 创建和配置</h4><p>创建<code>WebClient</code>：</p><ul><li><code>WebClient.create()</code></li><li><code>WebClient.create(String baseUrl)</code></li></ul><p>使用<code>WebClient.builder()</code>配置参数项：</p><ul><li><code>uriBuilderFactory</code>：定义baseurl</li><li><code>dafaultUrlVariables</code>：设置默认uri变量</li><li><code>dafaultUrlHeader</code>：设置默认请求头</li><li><code>dafaultUrlCookie</code>：设置默认请求cookie</li><li><code>defaultRequest:Consumer</code>：自定义每个请求</li><li><code>filter</code>：过滤client发送的每个请求</li><li><code>exchangeStrtegies</code>：HTTP消息reader&#x2F;writer自定义</li><li><code>clientConnector</code>：HTTP client库设置</li></ul><h4 id="3-1-2-获取响应"><a href="#3-1-2-获取响应" class="headerlink" title="3.1.2 获取响应"></a>3.1.2 获取响应</h4><p>以获取aliyun的天气查询api为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; <span class="hljs-title function_">weather</span><span class="hljs-params">(String city)</span> &#123;<br><br>        <span class="hljs-comment">// 远程调用aliyun的API</span><br><br>        Mono&lt;String&gt; mono = getByWebClient(city);<br>        <br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br>    <br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mono&lt;String&gt; <span class="hljs-title function_">getByWebClient</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-comment">//1、创建webClient</span><br>        <span class="hljs-type">WebClient</span> <span class="hljs-variable">webClient</span> <span class="hljs-operator">=</span> WebClient.create();<br><br>        Map&lt;String, String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        params.put(<span class="hljs-string">&quot;city&quot;</span>, city);<br>        <span class="hljs-comment">//2、定义发请求行为</span><br>        <span class="hljs-keyword">return</span> webClient.get()<br>                .uri(<span class="hljs-string">&quot;https://ali-weather.showapi.com/area-to-weather-date?area=&#123;city&#125;&quot;</span>, params)<br>                .accept(MediaType.APPLICATION_JSON)<span class="hljs-comment">// 定义响应的内容类型</span><br>                .header(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;APPCODE 955e02545445408b86a7c64c5592fb90&quot;</span>)<br>                .retrieve()<br>                .bodyToMono(String.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-HTTP-Interface"><a href="#3-2-HTTP-Interface" class="headerlink" title="3.2 HTTP Interface"></a>3.2 HTTP Interface</h3><blockquote><p>Spring允许通过自定义接口方式，给任意位置发送http请求，实现远程调用，只需导入<code>webflux</code>场景即可</p></blockquote><h4 id="3-2-1-导入依赖"><a href="#3-2-1-导入依赖" class="headerlink" title="3.2.1 导入依赖"></a>3.2.1 导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-2-定义接口"><a href="#3-2-2-定义接口" class="headerlink" title="3.2.2 定义接口"></a>3.2.2 定义接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WeatherInterface</span> &#123;<br><br>    <span class="hljs-meta">@GetExchange(url = &quot;/area-to-weather-date&quot;, accept = &quot;application/json&quot;)</span><br>    Mono&lt;String&gt; <span class="hljs-title function_">getWeather</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;area&quot;)</span> String city,</span><br><span class="hljs-params">                    <span class="hljs-meta">@RequestHeader(&quot;Authorization&quot;)</span> String header)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-3-创建代理-amp-测试"><a href="#3-2-3-创建代理-amp-测试" class="headerlink" title="3.2.3 创建代理&amp;测试"></a>3.2.3 创建代理&amp;测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; <span class="hljs-title function_">weather</span><span class="hljs-params">(String city)</span> &#123;<br><br>        <span class="hljs-comment">// 远程调用aliyun的API</span><br><br>        Mono&lt;String&gt; mono = getByHttpInterface(city);<br><br>        <span class="hljs-keyword">return</span> mono;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mono&lt;String&gt; <span class="hljs-title function_">getByHttpInterface</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-comment">// 1、创建客户端</span><br>        <span class="hljs-type">WebClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> WebClient.builder()<br>                .baseUrl(<span class="hljs-string">&quot;https://ali-weather.showapi.com&quot;</span>)<br>                .build();<br><br>        <span class="hljs-comment">// 2、创建工厂</span><br>        <span class="hljs-type">HttpServiceProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> HttpServiceProxyFactory<br>                .builder(WebClientAdapter.forClient(client)).build();<br>        <span class="hljs-comment">// 3、获取代理对象</span><br>        <span class="hljs-type">WeatherInterface</span> <span class="hljs-variable">weatherAPI</span> <span class="hljs-operator">=</span> factory.createClient(WeatherInterface.class);<br><br><br>        <span class="hljs-keyword">return</span> weatherAPI.getWeather(city, <span class="hljs-string">&quot;APPCODE 955e02545445408b86a7c64c5592fb90&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    WeatherService weatherService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/weather&quot;)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; <span class="hljs-title function_">weather</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;city&quot;)</span> String city)</span>&#123;<br>        <span class="hljs-comment">// 查询天气</span><br>        <span class="hljs-keyword">return</span> weatherService.weather(city);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>如果为了复用性，可以把创建工厂的方法直接注入到ioc容器中，到时候要调用就<strong>直接引工厂，然后创建代理对象就行</strong>。代码如下：</p><p>APIConfiguration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">APIConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    HttpServiceProxyFactory <span class="hljs-title function_">httpServiceProxyFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1、创建客户端</span><br>        <span class="hljs-type">WebClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> WebClient.builder()<br>          <span class="hljs-comment">// 设置默认头</span><br>            .defaultHeader(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-string">&quot;APPCODE 955e02545445408b86a7c64c5592fb90&quot;</span>)<br>            .build();<br>        <span class="hljs-comment">// 2、创建工厂</span><br>        <span class="hljs-keyword">return</span> HttpServiceProxyFactory<br>            .builder(WebClientAdapter.forClient(client)).build();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    WeatherInterface <span class="hljs-title function_">weatherInterface</span><span class="hljs-params">(HttpServiceProxyFactory httpServiceProxyFactory)</span> &#123;<br>        <span class="hljs-comment">// 3、获取代理对象</span><br>        <span class="hljs-keyword">return</span> httpServiceProxyFactory.createClient(WeatherInterface.class);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>WeatherInterface.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WeatherInterface</span> &#123;<br><br>    <span class="hljs-meta">@GetExchange(url = &quot;https://ali-weather.showapi.com/area-to-weather-date&quot;, accept = &quot;application/json&quot;)</span><br>    Mono&lt;String&gt; <span class="hljs-title function_">getWeather</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;area&quot;)</span> String city)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：WeatherController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    WeatherInterface weatherInterface;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/weather&quot;)</span><br>    <span class="hljs-keyword">public</span> Mono&lt;String&gt; <span class="hljs-title function_">weather</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;city&quot;)</span> String city)</span>&#123;<br>        <span class="hljs-comment">// 查询天气</span><br>        <span class="hljs-keyword">return</span> weatherInterface.weather(city);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、消息服务"><a href="#4、消息服务" class="headerlink" title="4、消息服务"></a>4、消息服务</h2><h3 id="4-1-消息队列场景"><a href="#4-1-消息队列场景" class="headerlink" title="4.1 消息队列场景"></a>4.1 消息队列场景</h3><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>场景一：</p><p><img src="/../img/mdImg/springboot/axynScenario.png"></p><h4 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h4><p>场景二：</p><p><img src="/../img/mdImg/springboot/DecouplingScenarios.png"></p><h4 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h4><p>场景三：</p><p><img src="/../img/mdImg/springboot/PeakShavingScenario.png"></p><h4 id="缓冲"><a href="#缓冲" class="headerlink" title="缓冲"></a>缓冲</h4><p>场景四：</p><p><img src="/../img/mdImg/springboot/BufferingScenario.png"></p><h3 id="4-2-消息中间件–Kafka"><a href="#4-2-消息中间件–Kafka" class="headerlink" title="4.2 消息中间件–Kafka"></a>4.2 消息中间件–Kafka</h3><h4 id="1、消息模式"><a href="#1、消息模式" class="headerlink" title="1、消息模式"></a>1、消息模式</h4><p><img src="/../img/mdImg/springboot/messageMode.png"></p><h4 id="2、Kafka工作原理"><a href="#2、Kafka工作原理" class="headerlink" title="2、Kafka工作原理"></a>2、Kafka工作原理</h4><p><img src="/../img/mdImg/springboot/kafkaPrinciple.png"></p><h3 id="4-3-SpringBoot整合kafka"><a href="#4-3-SpringBoot整合kafka" class="headerlink" title="4.3 SpringBoot整合kafka"></a>4.3 SpringBoot整合kafka</h3><h4 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h4><p>导入坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--整合Kafka--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置信息：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.kafka.bootstrap-servers</span>=<span class="hljs-string">host:9092</span><br></code></pre></td></tr></table></figure><p>修改<code>C:\Windows\System32\drivers\etc\hosts</code>文件，配置<code>host(IP地址) kafka(自己配置的名字)</code></p><p>生产者发生消息测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>KafkaTemplate kafkaTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br><br>    CompletableFuture[] futures = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletableFuture</span>[<span class="hljs-number">10000</span>];<br><br>    stopWatch.start();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>        <span class="hljs-type">CompletableFuture</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> kafkaTemplate.send(<span class="hljs-string">&quot;newshaha&quot;</span>, <span class="hljs-string">&quot;haha&quot;</span>, <span class="hljs-string">&quot;哈哈哈&quot;</span>);<br>        futures[i] = future;<br>    &#125;<br>    CompletableFuture.allOf(futures)<br>        .join();<br>    stopWatch.stop();<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">millis</span> <span class="hljs-operator">=</span> stopWatch.getTotalTimeMillis();<br>    System.out.println(<span class="hljs-string">&quot;10000消息发送时间：&quot;</span> + millis + <span class="hljs-string">&quot;ms&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面演示发送的 k-v 都是String类型的，但是如果发送的不是String类型的，比如以下的就会<strong>报错</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CompletableFuture</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> kafkaTemplate.send(<span class="hljs-string">&quot;newshaha&quot;</span>, <span class="hljs-string">&quot;person&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;xxx&quot;</span>));<br></code></pre></td></tr></table></figure><p>因为kafka默认使用的是String的序列化器。我们可以在配置文件中指定其他的系列化规则</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 默认是这个StringSerializer</span><br><span class="hljs-attr">spring.kafka.producer.key-serializer</span>=<span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br><span class="hljs-attr">spring.kafka.producer.value-serializer</span>=<span class="hljs-string">org.springframework.kafka.support.serializer.JsonSerializer</span><br></code></pre></td></tr></table></figure><h4 id="监听消息"><a href="#监听消息" class="headerlink" title="监听消息"></a>监听消息</h4><p><strong>首先</strong>确保自定义的监听器是spring boot的组件，<strong>然后</strong>通过注解<code>@KafkaListener</code>来监听消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyKafkaTopicListener</span> &#123;<br><br>    <span class="hljs-comment">// 默认监听是从消息队列最后一个消息开始拿。新消息才能拿到</span><br>    <span class="hljs-meta">@KafkaListener(topics = &quot;newshaha&quot;, groupId = &quot;haha&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">haha</span><span class="hljs-params">(ConsumerRecord record)</span> &#123;<br>        <span class="hljs-comment">//1、获取消息的各种详细信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> record.topic();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> record.key();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> record.value();<br>        System.out.println(topic + <span class="hljs-string">&quot;收到消息。。。key：&quot;</span> + key + <span class="hljs-string">&quot;，value：&quot;</span> + value);<br>    &#125;<br><br><br>    <span class="hljs-comment">// 拿完整消息</span><br>    <span class="hljs-meta">@KafkaListener(groupId = &quot;hehe&quot;, topicPartitions = &#123;</span><br><span class="hljs-meta">        @TopicPartition(topic = &quot;newshaha&quot;, partitionOffsets = &#123;</span><br><span class="hljs-meta">            @PartitionOffset(partition = &quot;0&quot;, initialOffset = &quot;0&quot;)</span><br><span class="hljs-meta">        &#125;)</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hehe</span><span class="hljs-params">(ConsumerRecord record)</span> &#123;<br>        <span class="hljs-comment">//1、获取消息的各种详细信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> record.topic();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> record.key();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> record.value();<br>        System.out.println(topic + <span class="hljs-string">&quot;收到消息。。。key：&quot;</span> + key + <span class="hljs-string">&quot;，value：&quot;</span> + value);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h4><p>通过<code>@EnableKafka + @KafkaListener</code>来接收消息</p><h2 id="5、Web安全"><a href="#5、Web安全" class="headerlink" title="5、Web安全"></a>5、Web安全</h2><blockquote><ul><li>Apache Shiro</li><li>Spring Security</li></ul></blockquote><h3 id="5-1-Spring-Security"><a href="#5-1-Spring-Security" class="headerlink" title="5.1 Spring Security"></a>5.1 Spring Security</h3><h4 id="1、安全认证"><a href="#1、安全认证" class="headerlink" title="1、安全认证"></a>1、安全认证</h4><h5 id="认证：Authentication"><a href="#认证：Authentication" class="headerlink" title="认证：Authentication"></a>认证：Authentication</h5><blockquote><p>登录系统、用户系统</p></blockquote><h5 id="授权：Authorization"><a href="#授权：Authorization" class="headerlink" title="授权：Authorization"></a>授权：Authorization</h5><blockquote><p>权限管理、用户授权</p></blockquote><h5 id="攻击防护"><a href="#攻击防护" class="headerlink" title="攻击防护"></a>攻击防护</h5><blockquote><p><strong>XSS（Cross-Site Scripting）</strong>：跨站脚本攻击<br><strong>CSRF（Cross-Site Request Forgery）</strong>：跨站请求伪造<br><strong>CORS（Cross-Origin Resource Sharing）</strong>：跨域资源共享<br><strong>SQL注入</strong><br>。。。</p></blockquote><h5 id="权限模型"><a href="#权限模型" class="headerlink" title="权限模型"></a>权限模型</h5><blockquote><p><strong>RBAC（Role-Based Access Control）</strong>：基于角色的访问控制</p><ul><li>用户（t_user）</li><li>角色（t_role）</li><li>权限（t_permission）</li></ul><p><strong>ACL（Access Control List）</strong>：Access Control List</p><ul><li>用户（t_user）</li><li>权限（t_permission）</li></ul></blockquote><h4 id="2、SpringSecurity原理"><a href="#2、SpringSecurity原理" class="headerlink" title="2、SpringSecurity原理"></a>2、SpringSecurity原理</h4><h6 id="过滤器链架构"><a href="#过滤器链架构" class="headerlink" title="过滤器链架构"></a>过滤器链架构</h6><blockquote><p>SpringSecurity利用FilterChainProxy封装一系列拦截器链，实现安全拦截</p><p>Servlet三大组件：Servlet、Filter、Listener</p></blockquote><p><img src="/../img/mdImg/springboot/springSecurityFilterChainFrame.png"></p><h6 id="FilterChainProxy"><a href="#FilterChainProxy" class="headerlink" title="FilterChainProxy"></a>FilterChainProxy</h6><p>使用<code>FilterChainProxy</code>对不同路径下的请求定义不同的过滤规则。例如：</p><p><img src="/../img/mdImg/springboot/FilterChainProxy.png"></p><h6 id="SecurityFilterChain"><a href="#SecurityFilterChain" class="headerlink" title="SecurityFilterChain"></a>SecurityFilterChain</h6><p><img src="/../img/mdImg/springboot/securityFilterChain.png"></p><h4 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h4><p>自定义<code>SecurityConfiguration.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、自定义请求授权规则：http.authorizeHttpRequests()</span><br><span class="hljs-comment"> * 2、自定义登录规则：http.formLogin()</span><br><span class="hljs-comment"> * 3、自定义用户信息查询规则：UserDetailsService</span><br><span class="hljs-comment"> * 4、开启方法级别的精确权限控制：<span class="hljs-doctag">@EnableMethodSecurity</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@EnableMethodSecurity</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 请求授权</span><br>        http.authorizeHttpRequests(registry -&gt; &#123;<br>            registry.requestMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll() <span class="hljs-comment">//首页所有人都可访问</span><br>                .anyRequest().authenticated(); <span class="hljs-comment">// 剩下的任意请求都需要认证</span><br>        &#125;);<br>        <span class="hljs-comment">// 开启默认表单登录功能表单登录功能</span><br>        http.formLogin(formLogin -&gt; &#123;<br>            formLogin.loginPage(<span class="hljs-string">&quot;/login&quot;</span>).permitAll(); <span class="hljs-comment">// 自定义登录页位置，并且所有人都能访问</span><br>        &#125;);<br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br><br>    <span class="hljs-comment">// 查询用户详细，此处使用的是在内存中添加，也可改为查询数据库的</span><br>    <span class="hljs-meta">@Bean</span><br>    UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">(PasswordEncoder passwordEncoder)</span> &#123;<br>        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> User.withUsername(<span class="hljs-string">&quot;zhangsan&quot;</span>)  <span class="hljs-comment">// 自定义用户账号，不使用security默认</span><br>            .password(passwordEncoder.encode(<span class="hljs-string">&quot;123456&quot;</span>))  <span class="hljs-comment">// 自定义用户密码，必须加密，否则报错</span><br>            .roles(<span class="hljs-string">&quot;admin&quot;</span>)  <span class="hljs-comment">// 设置用户角色</span><br>            .authorities(<span class="hljs-string">&quot;file_reda&quot;</span>, <span class="hljs-string">&quot;file_write&quot;</span>,<span class="hljs-string">&quot;world_exec&quot;</span>) <span class="hljs-comment">// 设置用户权限</span><br>            .build();<br>        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">lisi</span> <span class="hljs-operator">=</span> User.withUsername(<span class="hljs-string">&quot;lisi&quot;</span>)<br>            .password(passwordEncoder.encode(<span class="hljs-string">&quot;123456&quot;</span>))<br>            .roles(<span class="hljs-string">&quot;hr&quot;</span>)<br>            .authorities(<span class="hljs-string">&quot;file_reda&quot;</span>)<br>            .build();<br><br>        <span class="hljs-comment">// 默认内存保存所有用户信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(zhangsan, lisi);<br>    &#125;<br><br>    <span class="hljs-comment">// 放一个密码加密器</span><br>    <span class="hljs-meta">@Bean</span><br>    PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Security&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;world_exec&#x27;)&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/world&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">world</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;World Security&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        Welcome to security<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/world&#125;&quot;</span>&gt;</span>world<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;param.error&#125;&quot;</span>&gt;</span>用户或密码错误<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;param.logout&#125;&quot;</span>&gt;</span>退出登录<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/login&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Username: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Password: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6、可观测性"><a href="#6、可观测性" class="headerlink" title="6、可观测性"></a>6、可观测性</h2><p>对线上应用进行观测、监控、预警。。。</p><ul><li>健康状态</li><li>运行指标</li><li>链路追踪</li><li>。。。</li></ul><h3 id="6-1-SpringBoot-Actuator整合"><a href="#6-1-SpringBoot-Actuator整合" class="headerlink" title="6.1 SpringBoot Actuator整合"></a>6.1 SpringBoot Actuator整合</h3><h4 id="导入坐标场景"><a href="#导入坐标场景" class="headerlink" title="导入坐标场景"></a>导入坐标场景</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可观测性整合--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当导入之后可以运行项目测试，访问路径 <a href="localhost:8080/actuator">localhost:8080/actuator</a>，出现如下就导入成功</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;self&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;href&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:8080/actuator&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;templated&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;health&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;href&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:8080/actuator/health&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;templated&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;health-path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;href&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:8080/actuator/health/&#123;*path&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;templated&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="暴露指标"><a href="#暴露指标" class="headerlink" title="暴露指标"></a>暴露指标</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#暴露所有监控端点</span><br><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br></code></pre></td></tr></table></figure><h4 id="自定义端点"><a href="#自定义端点" class="headerlink" title="自定义端点"></a>自定义端点</h4><p>除了可以暴露springboot自带的端点外，还可以自定义端点来监控<strong>各种组件</strong>。比如：<code>健康监控（是否存活）</code>、<code>指标监控（次数、效率）</code></p><h5 id="健康监控"><a href="#健康监控" class="headerlink" title="健康监控"></a>健康监控</h5><p>比如：自定义了一个组件MyComponent，现在要来监控它。</p><p>MyComponent.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 实际中自己编写业务代码来判断此组件是否存活</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyComponentHealthIndicator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 1、实现HealthIndicator 接口定制组件的健康对象返回</span><br><span class="hljs-comment"> * 2、继承AbstractHealthIndicator</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponentHealthIndicator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHealthIndicator</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MyComponent myComponent;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHealthCheck</span><span class="hljs-params">(Health.Builder builder)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">check</span> <span class="hljs-operator">=</span> myComponent.check();<br>        <span class="hljs-keyword">if</span> (check == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 存活</span><br>            builder.up().build();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 下线</span><br>            builder.down().build();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试，浏览器访问<a href="localhost:8080/actuator/health">localhost:8080/actuator/health</a>。此时显示的信息不全面，还可以通过配置配置文件来显示</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#开启健康状况并显示详细信息</span><br><span class="hljs-attr">management.endpoint.health.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">management.endpoint.health.show-details</span>=<span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><h5 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h5><p>比如：对一个接口进行指标监控，查看其被调用多少次</p><p>通过spring能够实现有参构造器的自动注入的特性来注册<code>meterRegistry.counter(&quot;自己取的名字&quot;)</code>计数器。</p><p>MyComponent.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Counter</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyComponent</span><span class="hljs-params">(MeterRegistry meterRegistry)</span> &#123;<br>        counter = meterRegistry.counter(<span class="hljs-string">&quot;myComponent.hello&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>        counter.increment();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MyComponent myComponent;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 业务调用</span><br>        myComponent.hello();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-监控案例（整合Prometheus-Grafana）"><a href="#6-2-监控案例（整合Prometheus-Grafana）" class="headerlink" title="6.2 监控案例（整合Prometheus+Grafana）"></a>6.2 监控案例（整合Prometheus+Grafana）</h3><p>图解</p><p><img src="/../img/mdImg/springboot/PrometheusGrafana.png"></p><p><strong>步骤一：安装Prometheus+Grafana</strong></p><p>上面场景整合时已全部安装并运行</p><ul><li>Prometheus默认端口号为9090；</li><li>Grafana默认端口号为3000，默认账号密码为 admin  admin</li></ul><p><strong>步骤二：导入依赖</strong></p><p>导入Prometheus依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.micrometer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问：<a href="localhost:8080/actuator/prometheus">localhost:8080/actuator/prometheus</a>验证，返回prometheus的所有指标</p><blockquote><p>将本地jar包部署到服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装上传工具</span><br>yum install lrzsz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装openjdk</span><br>wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个用于存放java安装包和配置文件的目录</span><br>mkdir -p /opt/java<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压安装包</span><br>tar -xzvf jdk-17_linux-x64_bin.tar.gz -C /opt/java/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将Java添加到环境变量中</span><br>vim /etc/profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在末尾添加以下内容</span><br>export JAVA_HOME=/opt/java/jdk-17.0.7<br>export PATH=$PATH:$JAVA_HOME/bin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">完成上述后，执行以下命令使生效</span><br>source /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">后台启动java应用</span><br>nohup java -jar xxxx.jar &gt; output.log 2&gt;&amp;1 &amp;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">output.1og:日志输出文件，指定为标准输出(stdout)并重定向到一个名为output.log的文件中。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2&gt;&amp;1:将标准错误输出(stderr)重定向到标准输出(stdout)。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&amp;:在后台运行进程。</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>步骤三：配置Prometheus.yml文件去监控</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#修改prometheus.yml配置文件</span><br><span class="hljs-attr">scrape_configs:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;spring-boot-actuator-exporter&#x27;</span><br>  <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">&#x27;/actuator/prometheus&#x27;</span> <span class="hljs-comment">#指定抓取的路径</span><br>  <span class="hljs-attr">static_configs:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [ <span class="hljs-string">&#x27;192.168.243.1:8001&#x27;</span>]<br>    <span class="hljs-attr">labels:</span><br>     <span class="hljs-attr">nodename:</span> <span class="hljs-string">&#x27;app-demo&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>步骤四：在Grafana面板中添加Prometheus数据源，配置好地址</strong></p><p><strong>步骤五：导入Grafana看板，并选择好数据源</strong></p><h2 id="7、AOT"><a href="#7、AOT" class="headerlink" title="7、AOT"></a>7、AOT</h2><h3 id="7-1-AOT与JIT"><a href="#7-1-AOT与JIT" class="headerlink" title="7.1 AOT与JIT"></a>7.1 AOT与JIT</h3><p>AOT：Ahead-of-Time：提前编译，程序执行前，全部被编译成机器码。比如：编译器</p><p>JIT：Just in Time ：即时编译，程序边编译、边运行。比如：解释器</p><h3 id="7-1-1-JVM架构"><a href="#7-1-1-JVM架构" class="headerlink" title="7.1.1 JVM架构"></a>7.1.1 JVM架构</h3><p><img src="/../img/mdImg/springboot/JVM.png"></p><h2 id="GraalVM"><a href="#GraalVM" class="headerlink" title="GraalVM"></a>GraalVM</h2><blockquote><p><strong>graalVM</strong>是一个高性能的<strong>JDK</strong>旨在加速用Java和其他jvm语言编写的应用程序的执行</p><p><strong>GraalVM</strong>提供了两种Java应用程序的方式：</p><ul><li>1、在HotSpot JVM上使用Graal<strong>即时编译器</strong></li><li>2、作为<strong>预先编译</strong>的本机可执行文件运行</li></ul></blockquote><p><img src="/../img/mdImg/springboot/CrossPlatformMirroringPrinciple.png" alt="跨平台提供原生镜像的原理"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p> 1、官网下载</p><p><a href="https://www.graalvm.org/downloads/">Download GraalVM</a> </p><p>需要下载 graalvm-ce-java17-windows-amd64-22.3.2.zip 和 native-image-installable-svm-java17-windows-amd64-22.3.2.jar（在什么系统就下什么压缩包和jar包）</p><p>2、配置环境</p><p>将以前的JAVA_HOME路径改为下载的GraalVM解压之后的路径。并集成下载下来的 jar包，使用下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gu install --file native-image-installable-svm-java17-windows-amd64-22.3.2.jar<br></code></pre></td></tr></table></figure><p>3、验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><p>就可以看到是graalvm下的jdk了</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>1、进入<code>native-tools </code>终端（这个要下vs Studio）</p><p>编译为原生镜像，使用命令<code>native-image</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">方式一：指定jar包编译。编译整个jar  -o：输出为一个名为Haha的可执行包</span><br>native-image -cp boot3-15-aot-common-1.0-SNAPSHOT.jar com.huang.MainApplication -o Haha<br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二：从classes文件编译。编译某个类时必须有main入口方法，否则无法编译</span><br>native-image -cp .\classes org.example.Main<br></code></pre></td></tr></table></figure><h2 id="8、邮件发送：Mail"><a href="#8、邮件发送：Mail" class="headerlink" title="8、邮件发送：Mail"></a>8、邮件发送：Mail</h2><p>SpringBoot已经给我们提供了封装好的邮件模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>邮件协议：</p><p><img src="/../img/mdImg/springboot/EmailAgreement.png"></p><p>常用的协议有两种：</p><ol><li>SMTP协议(主要用于发送邮件 Simple Mail Transfer Protocol)</li><li>POP3协议（主要用于接收邮件 Post Office Protocol 3)</li></ol><h3 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h3><p>这里以163邮箱<a href="https://mail163.com/">https:/mail163.com</a>为例，我们需要在配置文件中告诉SpringBootMail我们的smtp服务器的地址以及你的邮箱账号和密码，首先我们要去设置中开启smtp&#x2F;pop3服务才可以，开启后会得到一个随机生成的密钥，这个就是我们的密码。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-comment"># 163邮箱地址为smtp.163.com，直接填写</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.163.com</span><br>    <span class="hljs-comment"># 邮箱账号</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">huangyilei2001@163.com</span><br>    <span class="hljs-comment"># 自动生成的授权码</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">KDOFLEWAHBZVJITE</span><br></code></pre></td></tr></table></figure><p>配置完成，接下来测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot316MailApplicationTests</span> &#123;<br><br>    <span class="hljs-comment">//JavaMailSender是专门用于发送邮件的对象</span><br>    <span class="hljs-meta">@Autowired</span><br>    JavaMailSender sender;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//SimpleMailMessage是一个简易的邮件封装</span><br>        <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>        <span class="hljs-comment">//设置邮件标题</span><br>        message.setSubject(<span class="hljs-string">&quot;邮件标题&quot;</span>);<br>        <span class="hljs-comment">//设置邮件内容</span><br>        message.setText(<span class="hljs-string">&quot;邮件内容&quot;</span>);<br>        <span class="hljs-comment">//设置邮件发送给谁</span><br>        message.setTo(<span class="hljs-string">&quot;1575863127@qq.com&quot;</span>);<br>        <span class="hljs-comment">//设置发送者</span><br>        message.setFrom(<span class="hljs-string">&quot;huangyilei2001@163.com&quot;</span>);<br>        <span class="hljs-comment">//发送</span><br>        sender.send(message);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>如果需要添加附件等更多功能，可以使用MimeMessageHelper来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot316MailApplicationTests</span> &#123;<br><br>    <span class="hljs-comment">//JavaMailSender是专门用于发送邮件的对象</span><br>    <span class="hljs-meta">@Autowired</span><br>    JavaMailSender sender;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> sender.createMimeMessage();<br>        <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">messageHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message,<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置邮件标题</span><br>        messageHelper.setSubject(<span class="hljs-string">&quot;邮件标题&quot;</span>);<br>        <span class="hljs-comment">//设置邮件内容</span><br>        messageHelper.setText(<span class="hljs-string">&quot;邮件内容&quot;</span>);<br>        <span class="hljs-comment">//设置邮件发送给谁</span><br>        messageHelper.setTo(<span class="hljs-string">&quot;1575863127@qq.com&quot;</span>);<br>        <span class="hljs-comment">//设置发送者</span><br>        messageHelper.setFrom(<span class="hljs-string">&quot;huangyilei2001@163.com&quot;</span>);<br>        <span class="hljs-comment">//发送</span><br>        sender.send(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="邮件注册"><a href="#邮件注册" class="headerlink" title="邮件注册"></a>邮件注册</h3><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mail:</span><br>    <span class="hljs-comment"># 163邮箱地址为smtp.163.com，直接填写</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.163.com</span><br>    <span class="hljs-comment"># 邮箱账号</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">xxxxxxxxx@163.com</span><br>    <span class="hljs-comment"># 自动生成的授权码</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">xxxxxxxx</span><br><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db1</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">xxxxx</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">xxxxx</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">111.230</span><span class="hljs-number">.48</span><span class="hljs-number">.114</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/static/**</span><br></code></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VerifyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">VerifyService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    JavaMailSender sender;<br><br>    <span class="hljs-meta">@Resource</span><br>    StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br>    String from;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendVerifyCode</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br>        message.setSubject(<span class="hljs-string">&quot;【xxx网站】你的注册验证码&quot;</span>);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>            stringBuilder.append(random.nextInt(<span class="hljs-number">10</span>));<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> String.valueOf(stringBuilder);<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;verify.code:&quot;</span> + email, code, <span class="hljs-number">3</span>, TimeUnit.MINUTES);<br>        message.setText(<span class="hljs-string">&quot;您的注册验证码为：&quot;</span> + code + <span class="hljs-string">&quot;，三分钟内有效，请及时完成注册，如果不是本人，请忽略。&quot;</span>);<br>        message.setTo(email);<br>        message.setFrom(from);<br>        sender.send(message);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doVerify</span><span class="hljs-params">(String email, String code)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;verify.code:&quot;</span> + email);<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || !s.equalsIgnoreCase(code)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        stringRedisTemplate.delete(<span class="hljs-string">&quot;verify.code:&quot;</span> + email);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">VerifyService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendVerifyCode</span><span class="hljs-params">(String email)</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">doVerify</span><span class="hljs-params">(String email,String code)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/auth&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    VerifyService verifyService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/verify-code&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">verifyCode</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;email&quot;)</span> String email)</span> &#123;<br>        verifyService.sendVerifyCode(email);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String username,</span><br><span class="hljs-params">                         String password,</span><br><span class="hljs-params">                         String email,</span><br><span class="hljs-params">                         String verifyCode)</span> &#123;<br>        <span class="hljs-keyword">if</span> (verifyService.doVerify(email, verifyCode)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;注册成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;注册失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9、持久层框架JPA"><a href="#9、持久层框架JPA" class="headerlink" title="9、持久层框架JPA"></a>9、持久层框架JPA</h2><p>什么是JPA?</p><p>JPA (Java Persistence API)和JDBC类似，也是官方定义的一组接口，但是它相比传统的JDBC，它是为了实现ORM而生的，即（Object-Relationl Mapping），它的作用是在关系型数据库和对象之间形成一个映射，这样，我们在具体的操作数据库的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了。</p><p>在之前，我们使用JDBC或是Mybatis来操作数据，通过直接编写对应的SQL语句来实现数据访问，但是我们发现实际上我们在Java中大部分操作数据库的情况都是读取数据并封装为一个实体类，因此，为什么不直接将实体类直接对应到一个数据库表呢?也就是说，一张表里面有什么属性，那么我们的对象就有什么属性，所有属性跟数据库里面的字段一—对应，而读取数据时，只需要读取一行的数据并封装为我们定义好的实体类既可以，而具体的SQL语句执行，完全可以交给框架根据我们定义的映射关系去生成，不再由我们去编写，因为这些SQL实际上都是千篇一律的。</p><p>而实现JPA规范的框架一般最常用的就是<code>Hibernate</code>，它是一个重量级框架，学习难度相比Mybatis也更高一些，而SpringDataJPA也是采用Hibernate框架作为底层实现,并对其加以封装。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>因为SpringBoot封装了JPA，所以只要导入坐标就行了，SpringBoot底层能够自动配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为JPA不需要操作复杂的SQL语句，所有数据库中的表都封装成对象来操作，所有首先创建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以通过注解的形式，在属性上添加数据库的映射关系，这样能够让JPA知道我们的实体类对应的数据库是什么样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;tb_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-meta">@Column(name = &quot;id&quot;)</span>  <span class="hljs-comment">// 对应表中的id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  <span class="hljs-comment">// 生成策略，表中为自增，这里为自增</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-meta">@Column(name = &quot;username&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Column(name = &quot;password&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-comment">#开启SQL语句执行日志信息</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-comment">#配置为自动创建</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">create</span><br></code></pre></td></tr></table></figure><p><code>ddl-auto</code>属性用于设置自动表定义，可以实现自动在数据库中为我们创建一个表，表的结构会根据我们定义的实体类决定，它有4种</p><ul><li><code>create</code>启动时删数据库中的表，然后创建，退出时不删除数据表</li><li><code>create-drop</code>启动时删数据库中的表，然后创建，退出时删除数据表如果表不存在报错</li><li><code>update </code>如果启动时表格式不一致则更新表，原有数据保留</li><li><code>validate</code>项目启动表结构进行校验如果不一致则报错</li></ul><p>创建表之后，如何访问数据？需要先建一个实体类实现<code>JpaRepository&lt;&gt;</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Account, Integer&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>JpaRepository有两个泛型，第一个是具体操作的对象实体，也是对应的表，第二个是ID的类型，接口中已经定义了比较常用的数据库操作，直接使用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot316MailApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    AccountRepository repository;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">repositoryTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//根据id查询</span><br>        repository.findById(<span class="hljs-number">1</span>).ifPresent(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot316MailApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    AccountRepository repository;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">repositoryTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br>        account.setUsername(<span class="hljs-string">&quot;admin&quot;</span>);<br>        account.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        account = repository.save(account);<br>        System.out.println(account.getId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还能够删除，等等。</p><p>分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot316MailApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    AccountRepository repository;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">repositoryTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//第一个参数：第几页；第二个参数：这一页多少个数据</span><br>        repository.findAll(PageRequest.of(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><p>创建一个用户详细信息表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;tb_user_detail&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountDetail</span> &#123;<br>    <span class="hljs-meta">@Column(name = &quot;id&quot;)</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-meta">@Column(name = &quot;address&quot;)</span><br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-meta">@Column(name = &quot;email&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-meta">@Column(name = &quot;real_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String realName;<br>&#125;<br></code></pre></td></tr></table></figure><p>指定两个表之间的关系（1：1，1：n，m：n）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;tb_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-meta">@Column(name = &quot;id&quot;)</span>  <span class="hljs-comment">// 对应表中的id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  <span class="hljs-comment">// 生成策略，表中为自增，这里为自增</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-meta">@Column(name = &quot;username&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Column(name = &quot;password&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@JoinColumn(name = &quot;detail_id&quot;)</span>  <span class="hljs-comment">//指定外键名称</span><br>    <span class="hljs-meta">@OneToOne</span>  <span class="hljs-comment">//指定关系</span><br>    AccountDetail detail;<br>&#125;<br></code></pre></td></tr></table></figure><p>后续操作直接通过repository就可以直接查询了。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot3学习笔记（五）--Spring3-核心特性--核心原理</title>
    <link href="/2023/07/11/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    <url>/2023/07/11/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot3-核心原理"><a href="#SpringBoot3-核心原理" class="headerlink" title="SpringBoot3-核心原理"></a>SpringBoot3-核心原理</h1><h2 id="1、事件和监听器"><a href="#1、事件和监听器" class="headerlink" title="1、事件和监听器"></a>1、事件和监听器</h2><h3 id="1-1-生命周期监听"><a href="#1-1-生命周期监听" class="headerlink" title="1.1  生命周期监听"></a>1.1  生命周期监听</h3><p>场景：监听应用的生命周期</p><h4 id="1-1-1-监听器"><a href="#1-1-1-监听器" class="headerlink" title="1.1.1 监听器"></a>1.1.1 监听器</h4><p>通过自定义<code>SpringApplicationRunListener</code>来监听事件</p><p><strong>步骤：</strong></p><ol><li><p>编写<code>SpringApplicationRunListener</code>实现类</p></li><li><p>在资源文件夹下创建<code>META-INF/spring.factories</code>并配置<code>org.springframework.boot.SpringApplicationRunListener=自定义的Listener</code>，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">org.springframework.boot.SpringApplicationRunListener</span>=<span class="hljs-string">com.huang.listener.MyAppListener</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="1-1-2-生命周期全流程"><a href="#1-1-2-生命周期全流程" class="headerlink" title="1.1.2 生命周期全流程"></a>1.1.2 生命周期全流程</h4><p><strong>黄色文本框：</strong>事件</p><p><strong>蓝色、红色文本框：</strong>监听</p><p><img src="/../img/mdImg/springboot/springbootLifeCycle.png" alt="springboot生命周期"></p><h3 id="1-2-事件触发时机"><a href="#1-2-事件触发时机" class="headerlink" title="1.2 事件触发时机"></a>1.2 事件触发时机</h3><h4 id="1-2-1-各种回调监听器"><a href="#1-2-1-各种回调监听器" class="headerlink" title="1.2.1 各种回调监听器"></a>1.2.1 各种回调监听器</h4><ul><li><strong>BootstrapRegistryInitializer</strong>：感知特定阶段：感知引导初始化<ul><li><code>META-INF/spring.factories</code></li></ul></li><li><strong>ApplicationContextInitializer</strong>：   感知特定阶段：感知ioc容器初始化<ul><li><code>META-INF/spring.factories</code></li></ul></li><li><strong>ApplicationListener</strong>：                   感知全阶段：基于事件机制，感知事件。一旦到了哪个阶段可以做别的事<ul><li><code>@Bean</code>或 <code>@EventListener</code></li><li><code>SpringApplication.addListeners(...)</code>或<code>SpringApplicationBuilder.listeners(...)</code></li><li><code>NETA-INF/spring.factories</code></li></ul></li><li><strong>SpringApplicationRunListener</strong>：  感知全阶段生命周期＋各种阶段都能自定义操作;功能更完善。</li><li><code>NETA-INF/spring.factories</code></li><li><strong>ApplicationRunner</strong>：                    感知特定阶段：感知应用就绪Ready，如果卡死应用就不会就绪<ul><li><code>@Bean</code></li></ul></li><li><strong>CommandLineRunner</strong>：               感知特定阶段：感知应用就绪Ready<ul><li><code>@Bean</code></li></ul></li></ul><p>总结：</p><ul><li>如果要在项目启动前写操作：重写<code>BootstrapRegistryInitializer</code>和<code>ApplicationContextInitializer</code></li><li>如果要在项目启动后写操作：重写<code>ApplicationRunner</code>和<code>CommandLineRunner</code></li><li>如果要干涉生命周期做事：<code>SpringApplicationRunListenel</code></li><li>如果想要用事件机制：<code>ApplicationListener</code></li></ul><h4 id="1-2-2-SpringBoot-事件驱动开发"><a href="#1-2-2-SpringBoot-事件驱动开发" class="headerlink" title="1.2.2 SpringBoot 事件驱动开发"></a>1.2.2 SpringBoot 事件驱动开发</h4><blockquote><p>应用启动过程生命周期事件感知(9大事件)、应用运行中事件感知（无数种)。</p></blockquote><ul><li>事件发布:：<code>ApplicationEventPublisherluware</code>或<code>注入：ApplicationEventMulticaster</code></li><li>事件监听：<code>组件 ＋ @EventListener</code></li></ul><p><img src="/../img/mdImg/springboot/publishEventListener.png"></p><p>步骤：</p><ol><li><p>创建需要发布事件的信息：自定义一个<code>事件类</code>继承<code>ApplicationEvent</code>并重写构造器方法（因为<code>ApplicationEvent</code>是一个抽象类所以必须重写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginSuccessEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ApplicationEvent</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> source 代表谁登录成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginSuccessEvent</span><span class="hljs-params">(Object source)</span> &#123;<br>        <span class="hljs-built_in">super</span>(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发布事件：自定义一个<code>事件发布类</code>实现<code>ApplicationEventPublisherluware</code>接口用来自动注入并可以调用底层的<code>publishEvent()</code>发布事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventPublisher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationEventPublisherAware</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 底层发送事件的组件，SpringBoot会通过ApplicationEventPublisherAware接口自动注入</span><br><span class="hljs-comment">     * 事件是通过广播出去的，所有监听这个事件的监听器都能收到</span><br><span class="hljs-comment">     */</span><br>    ApplicationEventPublisher applicationEventPublisher;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所有事件都可以发（自定义的）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> event</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendEvent</span><span class="hljs-params">(ApplicationEvent event)</span> &#123;<br>        <span class="hljs-comment">// 事件广播</span><br>        applicationEventPublisher.publishEvent(event);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationEventPublisher</span><span class="hljs-params">(ApplicationEventPublisher applicationEventPublisher)</span> &#123;<br>        <span class="hljs-comment">// 调用底层API发送事件</span><br>        <span class="hljs-built_in">this</span>.applicationEventPublisher = applicationEventPublisher;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>监听事件：根据需求自定义<code>监听服务</code>，然后监听所需的事件。例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;LoginSuccessEvent&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAccountScore</span><span class="hljs-params">(String username)</span> &#123;<br>        System.out.println(username + <span class="hljs-string">&quot;加了一分&quot;</span>);<br>    &#125;<br><br>        <span class="hljs-comment">// 方式一：</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(LoginSuccessEvent event)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;AccountService 收到事件&quot;</span>);<br>            <span class="hljs-type">UserEntity</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> (UserEntity) event.getSource();<br>            addAccountScore(source.getUsername());<br>        &#125;<br><br>&#125;<br>=========================================================================================<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CouponService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendCoupon</span><span class="hljs-params">(String username)</span> &#123;<br>        System.out.println(username + <span class="hljs-string">&quot;得到了一张优惠券&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 方式二：</span><br>    <span class="hljs-meta">@EventListener</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(LoginSuccessEvent loginSuccessEvent)</span> &#123;<br>        <span class="hljs-type">UserEntity</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> (UserEntity) loginSuccessEvent.getSource();<br>        sendCoupon(source.getUsername());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建事件并发布事件</p><p><code>LoginController.java</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    EventPublisher eventPublisher;<br>    <span class="hljs-comment">// TODO 发布事件</span><br>    <span class="hljs-comment">// 1、创建事件信息</span><br>    <span class="hljs-type">LoginSuccessEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginSuccessEvent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserEntity</span>(username, password));<br>    <span class="hljs-comment">// 2、发送事件</span><br>    eventPublisher.sendEvent(event);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2、自动配置原理"><a href="#2、自动配置原理" class="headerlink" title="2、自动配置原理"></a>2、自动配置原理</h2><h3 id="2-1-入门理解"><a href="#2-1-入门理解" class="headerlink" title="2.1 入门理解"></a>2.1 入门理解</h3><blockquote><p><strong>三大核心：</strong>场景、配置、组件</p></blockquote><h4 id="2-1-1-自动配置流程"><a href="#2-1-1-自动配置流程" class="headerlink" title="2.1.1 自动配置流程"></a>2.1.1 自动配置流程</h4><p><img src="/../img/mdImg/springboot/AutoConfigurationCompleteProcess.png"></p><ol><li>导入<code>starter</code></li><li>依赖导入<code>autoconfigurer</code></li><li>寻找类路径下的<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件</li><li>启动、加载所有<code>自动配置类（xxxAutoConfiguration）</code><ol><li>给容器中配置功能组件</li><li>组件参数绑定到属性类中（<code>xxxPropertoes</code>）</li><li>属性类和配置文件前缀绑定</li><li><code>ConditionalOnXXXX</code>条件注解判断是否生效</li></ol></li></ol><h4 id="2-1-2-SPI机制"><a href="#2-1-2-SPI机制" class="headerlink" title="2.1.2 SPI机制"></a>2.1.2 SPI机制</h4><blockquote><ul><li>Java中的SPI(Service Provider Interface)是一种软件设计模式，用于在应用程序中动态地发现和加载组件。SP的思想是，定义一个接口或抽象类，然后通过在classpath中定义实现该接口的类来实现对组件的动态发现和加载.</li><li>SPI的主要目的是解决在应用程序中使用可插拔组件的问题。例如。一个应用程序可能需要使用不同的日志框架或数据库连接池，但是这些组件的选择可能取决于运行时的条件。通过使用SPI，应用程序可以在运行时发现并加载适当的组件，而无需在代码中硬编码这些组件的实现类。</li><li>在Java中，SPI的实现方式是通过在(META-INF&#x2F;services目录下创建一个以服务接口全限定名为名字的文件。文件十包含实现该服务接口的类的全限定名。当应用程序启动时，Java的SPI机制会自动扫描classpath中的这些文件，并根据文件中指定的类名来加载实现类,</li><li>通过使用SPI，应用程序可以实现更灵活、可扩展的架构，同时也可以避免硬编码依赖关系和增加代码的可维护性。</li></ul></blockquote><p><strong>SPI机制的工作原理如下：</strong></p><ol><li>开发者定义一个接口（服务接口），并在代码中引用该接口。</li><li>提供者（服务提供者）实现这个接口，并通过在类路径的META-INF&#x2F;services目录下创建一个以接口名为命名的文件，文件内容为实现类的全限定名。</li><li>框架在运行时通过解析这些配置文件，动态加载并实例化所有的实现类，形成一个可用的服务列表。</li><li>开发者可以通过Java标准库中的<code>ServiceLoader</code>类来访问这个服务列表，从中选择对应的实现类进行使用。</li></ol><p>使用SPI机制的好处是，它解耦了开发者和提供者的代码，使得开发者无需关心具体的实现细节，只需通过接口进行编程，并能够动态切换不同的实现类。同时，SPI机制也提供了一种扩展框架的方式，使得新增功能的实现变得更加简单和灵活。</p><p><strong>代码实现：</strong></p><p>服务接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务提供者实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceImpl1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行Service1的方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行Service2的方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务提供者配置文件定义：在<code>META-INF/services/</code>路径下，创建<code>服务接口配置文件</code>（<strong>注意：文件名为服务接口的全类名。例如：com.example.service.xxxx</strong>），文件内容为实现接口的全类名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs com.huang.service.Service">com.huang.service.impl.ServiceImpl1<br>com.huang.service.impl.ServiceImpl2<br></code></pre></td></tr></table></figure><p><code>ServiceLoader.load()</code>加载和调用服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用ServiceLoader加载Service接口的实现类</span><br>        ServiceLoader&lt;Service&gt; serviceLoader = ServiceLoader.load(Service.class);<br><br>        <span class="hljs-comment">// 遍历并调用每个实现类的方法</span><br>        <span class="hljs-keyword">for</span> (Service service:serviceLoader)&#123;<br>            service.execute();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-3-功能开关"><a href="#2-1-3-功能开关" class="headerlink" title="2.1.3 功能开关"></a>2.1.3 功能开关</h4><blockquote><p>以<code>@EableXxx</code>命名的：手动开启某些功能</p><ul><li>开启xxx功能</li><li>都是利用<code>@Import</code>把功能组件导入进来</li></ul></blockquote><h3 id="2-2-进阶理解"><a href="#2-2-进阶理解" class="headerlink" title="2.2 进阶理解"></a>2.2 进阶理解</h3><h4 id="2-2-1-SpringBootApplication"><a href="#2-2-1-SpringBootApplication" class="headerlink" title="2.2.1 @SpringBootApplication"></a>2.2.1 @SpringBootApplication</h4><p><strong>@SpringBootConfiguration</strong>：</p><p>就是@Configuration，容器中的组件，配置类。spring ioc启动就会加载并创建这个类对象</p><p><strong>@EnableAutoConfiguration</strong>：<strong>开启自动配置</strong></p><ul><li><strong>@AutoConfigurationPackage</strong>：<strong>扫描主程序包的注解，加载自己的组件</strong></li></ul><p>​利用<code>@Import(AutoConfigurationPackages.Registrar.class)</code>给容器导入组件，把主程序所在的<strong>包</strong>的所有组件导入</p><ul><li><strong>@Import(AutoConfigurationImportSelector.class)<strong>：</strong>加载所有的自动配置类（扫描SPI文件），加载starter导入的组件</strong></li></ul><p><strong>@ComponentScan</strong>：<strong>组件扫描注解，排除一些注解（因为前面注解已经扫描过了，此注解负责排除一些已经注入的组件）</strong></p><p> <img src="/../img/mdImg/springboot/springbootLifeCyclePlus.png" alt="springboot生命周期（进阶）"></p><h2 id="3、自定义stater"><a href="#3、自定义stater" class="headerlink" title="3、自定义stater"></a>3、自定义stater</h2><h4 id="基本抽取："><a href="#基本抽取：" class="headerlink" title="基本抽取："></a>基本抽取：</h4><ul><li>创建<code>starter</code>项目，把公共代码放入此项目，并把公共代码需要的所有依赖导入</li><li>自定义编写<code>xxxAutoConfiguration</code>，并导入此场景需要的所有组件<ul><li>为什么这些组件不会默认扫描呢？因为<code>starter</code>所在包和引入它的项目的主程序入口所在的包不是父子关系</li></ul></li><li>别的项目引用此<code>starter</code>时，通过<code>@Inport()</code>直接导入<code>xxxAutoConfiguration</code>就ok了</li></ul><h4 id="使用Enable注解抽取"><a href="#使用Enable注解抽取" class="headerlink" title="使用Enable注解抽取"></a>使用Enable注解抽取</h4><p>编写@Enable注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(RobotAutoConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableRobot &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>此后引入<code>starter</code>只需要使用<code>@EnableRobot</code>注解就行了</p><h4 id="使用SPI抽取"><a href="#使用SPI抽取" class="headerlink" title="使用SPI抽取"></a>使用SPI抽取</h4><p>在资源文件夹下建立<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，并写入自动配置类的全类名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs org.springframework.boot.autoconfigure.AutoConfiguration.imports">com.huang.robot.RobotAutoConfiguration<br></code></pre></td></tr></table></figure><p>项目启动后就实现自动配置了</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot3学习笔记（四）--Spring3-核心特性-基础特性</title>
    <link href="/2023/07/09/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/"/>
    <url>/2023/07/09/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot3-基础特性"><a href="#SpringBoot3-基础特性" class="headerlink" title="SpringBoot3-基础特性"></a>SpringBoot3-基础特性</h1><h2 id="1、SpringApplication"><a href="#1、SpringApplication" class="headerlink" title="1、SpringApplication"></a>1、SpringApplication</h2><h3 id="1-1-自定义-banner"><a href="#1-1-自定义-banner" class="headerlink" title="1.1 自定义 banner"></a>1.1 自定义 banner</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#设置banner</span><br><span class="hljs-attr">spring.banner.location</span>=<span class="hljs-string">classpath:banner.txt</span><br><span class="hljs-comment">#关闭banner</span><br><span class="hljs-attr">spring.main.banner-mode</span>=<span class="hljs-string">off</span><br></code></pre></td></tr></table></figure><h3 id="1-2-自定义-SpringApplication"><a href="#1-2-自定义-SpringApplication" class="headerlink" title="1.2 自定义 SpringApplication"></a>1.2 自定义 SpringApplication</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot306FeatureApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、SpringApplication：Boot应用的核心API入口</span><br><span class="hljs-comment">//        SpringApplication.run(Boot306FeatureApplication.class, args);</span><br><br>        <span class="hljs-comment">// 1.自定义SpringApplication的底层设置</span><br>        <span class="hljs-type">SpringApplication</span> <span class="hljs-variable">springApplication</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(Boot306FeatureApplication.class);<br><br>        <span class="hljs-comment">// 调整SpringApplication的参数</span><br><span class="hljs-comment">//        springApplication.setDefaultProperties();</span><br>        <span class="hljs-comment">// 这个程序化配置优先级低于配置文件配置</span><br>        springApplication.setBannerMode(Banner.Mode.CONSOLE);<br><br>        <span class="hljs-comment">// 2.SpringApplication 运行</span><br>        springApplication.run(args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-FluentBuilder-API"><a href="#1-3-FluentBuilder-API" class="headerlink" title="1.3 FluentBuilder API"></a>1.3 FluentBuilder API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// 2、Build方式构建SpringApplication：通过FluentAPI进行设置</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationBuilder</span>()<br>                .main(Boot306FeatureApplication.class)<br>                .sources(Boot306FeatureApplication.class)<br>                .bannerMode(Banner.Mode.CONSOLE)<br><span class="hljs-comment">//                .listeners(null)</span><br><span class="hljs-comment">//                .environment(null)</span><br>                .run(args);<br></code></pre></td></tr></table></figure><h2 id="2、Profiles"><a href="#2、Profiles" class="headerlink" title="2、Profiles"></a>2、Profiles</h2><blockquote><p>做环境隔离的：快速切换开发、测试、生产环境</p><p>主要步骤：</p><p>1、使用@Profile标识组件在什么样的环境生效</p><p>2、激活当前项目是什么环境（默认是default环境）</p></blockquote><h3 id="2-1-使用"><a href="#2-1-使用" class="headerlink" title="2.1 使用"></a>2.1 使用</h3><h4 id="2-1-1-指定环境"><a href="#2-1-1-指定环境" class="headerlink" title="2.1.1 指定环境"></a>2.1.1 指定环境</h4><p>Spring Profiles提供了<strong>配置隔离</strong>的方式</p><p>任何<code>@Component,@Configuration或@ConfigurationProperties</code>可以使用<code>@Profile</code>标记，用来指定何时被加载【只要是容器中的组件都可以被<code>@Profile</code>标记】</p><h4 id="2-1-2-环境激活"><a href="#2-1-2-环境激活" class="headerlink" title="2.1.2 环境激活"></a>2.1.2 环境激活</h4><p>方式一：配置激活环境</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置环境</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">default,dev</span><br></code></pre></td></tr></table></figure><p>方式二：命令行激活</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">java -jar xxx.jar --spring.profiles.active=xxx<br></code></pre></td></tr></table></figure><h4 id="2-1-3-环境包含"><a href="#2-1-3-环境包含" class="headerlink" title="2.1.3 环境包含"></a>2.1.3 环境包含</h4><p>可以添加额外的生效文件，而不是激活替换。比如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.include[0]</span>=<span class="hljs-string">common</span><br><span class="hljs-attr">spring.profiles.include[1]</span>=<span class="hljs-string">local</span><br></code></pre></td></tr></table></figure><ul><li>生效的环境 &#x3D; 激活的环境&#x2F;默认环境 + 包含的环境</li><li>项目中一般这样写<ul><li>基础配置（比如：<code>Mybatis、log</code>）写道包含环境中</li><li>需要动态切换变化的配置（比如：<code>db、redis</code>）写道激活的环境中</li></ul></li></ul><h3 id="2-2-Profile分组"><a href="#2-2-Profile分组" class="headerlink" title="2.2 Profile分组"></a>2.2 Profile分组</h3><p>还可以给环境进行分组，将环境添加到组里面，然后直接激活那一组就可以了</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">hhh</span><br><span class="hljs-attr">spring.profiles.group.hhh</span>=<span class="hljs-string">dev,test</span><br></code></pre></td></tr></table></figure><h3 id="2-3-Profile配置文件"><a href="#2-3-Profile配置文件" class="headerlink" title="2.3 Profile配置文件"></a>2.3 Profile配置文件</h3><ul><li><code>applicaiton-&#123;profile&#125;.properties</code>可以作为指定环境的配置文件</li><li>激活这个环境，配置文件就会生效，最终生效的所有配置是<ul><li><code>application.properties</code>：主配置文件</li><li><code>applicaiton-&#123;profile&#125;.properties</code>：指定环境的配置文件</li></ul></li></ul><p>注意：<code>spring.profiles.active</code>和<code>spring.profiles.default</code>只能用到无 profile 的文件中，如果在<code>application-dev.yaml</code>中编写是<strong>无效的</strong></p><h2 id="3、外部化配置"><a href="#3、外部化配置" class="headerlink" title="3、外部化配置"></a>3、外部化配置</h2><blockquote><p>场景：线上应用如何快速修改配置，并应用最新配置</p><ul><li>SpringBoot使用 <strong>配置优先级 + 外部配置</strong> 简化配置更新、简化运维</li><li>只需要给 jar 应用所在的文件放一个 application.properties 最新配置文件，重启项目就能自动应用最新配置</li></ul></blockquote><h3 id="3-1-配置优先级"><a href="#3-1-配置优先级" class="headerlink" title="3.1 配置优先级"></a>3.1 配置优先级</h3><p>SpringBoot允许将配置外部化，可以使用各种<strong>外部化配置源</strong>，包括：<code>Java properties文件、yaml文件、环境变量和命令行参数</code>。可以通过<code>@Value</code>获取值，也可以用<code>@ConfigurationProperties</code>将所有属性绑定到<code>Java object</code>中</p><p><strong>SpringBoot配置加载优先级：</strong>（由低到高）</p><ol><li><em>默认属性（通过SpringApplication.setDefaultProperties指定的）</em></li><li><code>PropertySource</code>指定加载的配置（需要写在<code>@Configuration</code>类上才有效）</li><li><em>配置文件（<code>application.properties/yaml等</code>）</em></li><li>RandomValuePropertySource支持的random.*配置〈如:@value(“$random.int”))</li><li>OS环境变量</li><li>Java系统属性（<code>System.getProperties()</code>）</li><li>JNDI属性(来自<code>java:comp/env</code>)</li><li><code>ServletContext </code>初始化参数</li><li><code>ServletConfig </code>初始化参数</li><li><code>SPRING_APPLICATION_JSON</code>属性(内置在环境变量或系统属性中的JSON}</li><li><em>命令行参数</em></li><li>测试属性。(<code>@SpringBootTest</code>进行测试时指定的属性)</li><li>测试类<code>@TestPropertySource</code>注解</li><li>Devtools 设置的全局属性。(<code>SHOME/.config/spring-boot</code>)</li></ol><p><strong>配置文件优先级</strong>：（由低到高）</p><ol><li><strong>jar包内</strong>的<code>application.properties/yml</code></li><li><strong>jar包内</strong>的<code>application-&#123;profile&#125;.properties/yml</code></li><li><strong>jar包外</strong>的<code>application.properties/yml</code></li><li><strong>jar包外</strong>的<code>application-&#123;profile&#125;.properties/yml</code></li></ol><blockquote><p>如果<code>.properties</code>、<code>.yml</code>、<code>.yaml</code>文件同时存在，则</p><p>properties &gt; yml &gt; yaml</p></blockquote><h3 id="3-2-外部配置"><a href="#3-2-外部配置" class="headerlink" title="3.2 外部配置"></a>3.2 外部配置</h3><p>在<code>/config</code>包下的配置文件优先级高于路径<code>/</code>下的配置文件</p><h3 id="3-3-导入配置"><a href="#3-3-导入配置" class="headerlink" title="3.3 导入配置"></a>3.3 导入配置</h3><p>使用<code>spring.config.import</code>导入额外配置</p><h3 id="3-4-属性占位符"><a href="#3-4-属性占位符" class="headerlink" title="3.4 属性占位符"></a>3.4 属性占位符</h3><p>配置文件中可以使用<code>$&#123;key的名称&#125;</code>形式取出配置的值</p><p>例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">app.name</span>=<span class="hljs-string">MyAPP</span><br><span class="hljs-comment"># 如果有app.name，则取它的值，否则取“默认值”</span><br><span class="hljs-attr">app.desc</span>=<span class="hljs-string">$&#123;app.name:默认值&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4、单元测试-JUnit5整合"><a href="#4、单元测试-JUnit5整合" class="headerlink" title="4、单元测试-JUnit5整合"></a>4、单元测试-JUnit5整合</h2><h4 id="4-1-整合"><a href="#4-1-整合" class="headerlink" title="4.1 整合"></a>4.1 整合</h4><p>首先导入坐标（创建spring boot项目默认自带此坐标）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-测试"><a href="#4-2-测试" class="headerlink" title="4.2 测试"></a>4.2 测试</h4><p><strong>测试注解</strong></p><ul><li><code>@Test :</code>表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li><code>@ParameterizedTest :</code>表示方法是参数化测试，下方会有详细介绍</li><li><code>@RepeatedTest :</code>表示方法可重复执行，下方会有详细介绍</li><li><code>@DisplayName :</code>为测试类或者测试方法设置展示名称</li><li><code>@BeforeEach :</code>表示在每个单元测试之前执行</li><li><code>@AfterEach :</code>表示在每个单元测试之后执行</li><li><code>@BeforeAll :</code>表示在所有单元测试之前执行</li><li><code>@AfterAll :</code>表示在所有单元测试之后执行</li><li><code>@Tag :</code>表示单元测试类别，类似于JUnit4中的@Categories</li><li><code>@Disabled :</code>表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li><li><code>@Timeout :</code>表示测试方法运行如果超过了指定时间将会返回错误</li><li><code>@ExtendWwith :</code>为测试类或测试方法提供扩展类引用</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot3学习笔记（三）--Spring3-核心特性--数据访问</title>
    <link href="/2023/07/09/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/"/>
    <url>/2023/07/09/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot3-数据访问"><a href="#SpringBoot3-数据访问" class="headerlink" title="SpringBoot3-数据访问"></a>SpringBoot3-数据访问</h1><h2 id="整合SSM场景"><a href="#整合SSM场景" class="headerlink" title="整合SSM场景"></a>整合SSM场景</h2><blockquote><p>SpringBoot整合Spring、SpringMVC、Mybatis 进行<strong>数据访问场景开发</strong></p></blockquote><h3 id="1、创建SSM整合项目"><a href="#1、创建SSM整合项目" class="headerlink" title="1、创建SSM整合项目"></a>1、创建SSM整合项目</h3><p>在pom文件中导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、配置数据源"><a href="#2、配置数据源" class="headerlink" title="2、配置数据源"></a>2、配置数据源</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/db1</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>安装MybatisX插件，能够自动帮我们创建myabtis的xml文件</p><h3 id="3、配置Mybatis"><a href="#3、配置Mybatis" class="headerlink" title="3、配置Mybatis"></a>3、配置Mybatis</h3><p>在启动类添加注解，扫描mybatis接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(basePackages = &quot;com.huang.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boot305SsmApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Boot305SsmApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在配置文件编写，扫描mybatis的xml文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置整合mybatis</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:/mapper/*.xml</span><br><span class="hljs-comment">#开启驼峰命名</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h3 id="4、CRUD编写"><a href="#4、CRUD编写" class="headerlink" title="4、CRUD编写"></a>4、CRUD编写</h3><p>UserMapper.java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Long id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.huang.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.huang.entity.User&quot;</span>&gt;</span><br>        select id,username,password,chineseName<br>        from test_admin<br>        where id=#&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、自动配置原理"><a href="#5、自动配置原理" class="headerlink" title="5、自动配置原理"></a>5、自动配置原理</h3><ul><li><p><code>DataSourceAutoConfiguration</code>：配置数据源等基本信息</p><ul><li><p><code>mybatis-spring-boot-starter</code> 导入了 <code>spring-boot-starter-jdbc</code>，jdbc是操作数据库的场景</p></li><li><p>jdbc场景的几个自动配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 数据源的自动配置;所有与数据源有关的配置都在 spring.datasource;默认使用HikariDataSource</span><br><span class="hljs-attr">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</span><br><span class="hljs-comment"># 给容器中放了jdbcTemplate操作数据库（用来做数据库操作的，不过一般不用，因为有了专门的Mybatis框架）</span><br><span class="hljs-attr">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration</span><br><span class="hljs-comment"># </span><br><span class="hljs-attr">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration</span><br><span class="hljs-comment"># 做分布式事务的；基于XA二阶提交协议的分布式事务数据源</span><br><span class="hljs-attr">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration</span><br><span class="hljs-comment"># 支持事务</span><br><span class="hljs-attr">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration</span><br></code></pre></td></tr></table></figure></li><li><p><em>具有的底层能力：</em> <strong>数据源、jdbcTemplate、事务</strong></p></li></ul></li><li><p><code>MybatisAutoConfiguration</code>：配置Mybatis的整合流程</p><ul><li><p><code>mybatis-spring-boot-starter</code> 导入了 <code>mybatis-spring-boot-autoconfigure</code>，mybatis自带的自动配置包</p></li><li><p>默认加载两个自动配置类</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration</span><br><span class="hljs-attr">org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>Mybatis配置生效必须在配置源启动后才生效</strong></p><p><code>MybatisAutoConfiguration.java</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span><br></code></pre></td></tr></table></figure></li><li><p>给容器中放<code>sqlSessionFactory</code>组件：创建和数据库的一次会话</p></li><li><p>给容器中放<code>SqlSessionTemplate</code>：操作数据库</p></li></ul></li></ul></li><li><p>Mybatis的所有属性都绑定在<code>MybatisProperties</code></p></li><li><p>每个Mapper接口的代理对象是怎么创建放入容器中的。通过@MapperScan注解</p><ul><li>利用<code>@Import(&#123;MapperScannerRegistrar.class&#125;)</code>批量给容器中注册组件。解析指定的包路径里的每一个类、为每一个Mapper接口创建Bean，然后注册带容器中。</li></ul></li></ul><h3 id="6、整合其他数据源（扩展）"><a href="#6、整合其他数据源（扩展）" class="headerlink" title="6、整合其他数据源（扩展）"></a>6、整合其他数据源（扩展）</h3><h4 id="1、Druid数据源"><a href="#1、Druid数据源" class="headerlink" title="1、Druid数据源"></a>1、Druid数据源</h4><p>还不支持springboot3</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法---树形结构</title>
    <link href="/2023/07/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95---%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    <url>/2023/07/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95---%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="树形结构篇"><a href="#树形结构篇" class="headerlink" title="树形结构篇"></a>树形结构篇</h1><p>树形结构就像下面这个图一样：</p><p><img src="/../img/mdImg/dataStructure/Tree.png" alt="树"></p><p>可以看到，每一个结点下都有子结点，并不断延申。像树一样，所以就成为<strong>树（Tree）</strong>，有一个特点就是，<strong>每个结点都不与其他结点相交</strong></p><ul><li>我们称最上方的结点为<strong>根结点（root）</strong></li><li>每一个结点的子结点的数目（分支的数目），我们称为结点的<strong>度（Degree）</strong>，而各个结点度的最大值称为树的度</li><li>每个结点延伸下去的下一个结点都可以称为一颗<strong>子树（SubTree）</strong></li><li>每个<strong>结点的层次（Level）</strong>按照从上往下的顺序，书的根结点为1，每向下一层+1。整棵树中所有结点最大层次就是这个树的<strong>深度（Depth）</strong>。比如上面那个树的深度就是4。</li></ul><p>各结点之间的称呼：</p><ul><li>当前结点直接向下连接的结点，称为<strong>子结点</strong>；相反，就是<strong>父结点</strong></li><li>如果某个节点没有任何子结点（结点度为0时）那么就称这个结点为<strong>叶子结点</strong></li><li>如果两个结点的父结点是同一个，那么称这两个结点为<strong>兄弟结点</strong></li><li>从根结点开始一直到某个结点大的整个路径上的结点，都是这个结点的<strong>祖先结点</strong>（比如：L的祖先结点就是E、B、A）</li></ul><hr><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><strong>二叉树（Birnary Tree）</strong>是一种特殊的树，它的度最大只能为2，所以称为二叉树。</p><p>当然某些二叉树也有特殊的称呼。比如，在一棵二叉树中，所有分支结点都存在左子树和右子树，且叶子结点都在同一层：</p><p><img src="/../img/mdImg/dataStructure/FullBinaryTree.png" alt="满二叉树"></p><p>这样的二叉树，就称为<strong>满二叉树</strong>，没有出现任何度为1的结点。还有一种特殊情况：</p><p><img src="/../img/mdImg/dataStructure/CompleteBinaryTree.png" alt="完全二叉树"></p><p>可以看到最后一层有空缺，但是所有叶子结点是按照从左往右的顺序排列的，这样的树我们称为<strong>完全二叉树</strong>。故，一颗满二叉树一定是一颗完全二叉树，但是一颗完全二叉树不一定是满二叉树。</p><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><p>由于二叉树的结构特殊，总结了了五个性质：</p><ul><li><p><strong>性质一：</strong>对于一颗二叉树，第$i$层的最大结点数量为$2^{i-1}$个，比如二叉树的第一层只有一个根结点，也就是$2^0&#x3D;1$</p></li><li><p><strong>性质二：</strong>对于一颗深度为 k 的二叉树，可以具有最大的结点数量为：<br>$$<br>n&#x3D;2^0+2^1+2^2+…+2^{k-1}<br>$$<br>发现，实际上每一层的结点数量，组成等比数列求和公式，可以简化为：<br>$$<br>S<del>n</del>&#x3D;2^k-1<br>$$<br>所以一颗深度为 k 的二叉树结点数量为 $n &#x3D; 2^k-1$</p></li><li><p><strong>性质三：</strong>假设一颗二叉树中度为 0、1、2 的结点数量分别为 n<del>0</del>、n<del>1</del>、n<del>2</del>，由于一颗二叉树中只有这三种类型的结点，那么可以直接得到结点总数：<br>$$<br>n&#x3D;n_0+n_1+n_2<br>$$</p><p>$$<br>n&#x3D;n_1+2n_2+1<br>$$</p><p>对于任何一颗二叉树，如果其叶子结点个数为n<del>0</del>，度为2的结点个数为n<del>2</del>，那么<br>$$<br>n_0&#x3D;n_2+1<br>$$</p></li><li><p><strong>性质四：</strong>一颗具有 n 个结点的完全二叉树深度为 $k&#x3D;\lfloor log_2n \rfloor+1$</p></li><li><p><strong>性质五：</strong>一颗有n个结点的完全二叉树，由性质四得到深度为 $k&#x3D; \lfloor log_2n\rfloor+1$现在对于任意一个结点i，结点的顺序为从上往下，从左往右:</p><ul><li>对于一个拥有左右孩子的结点来说，其左孩子为 2i，右孩子为 2i + 1。</li><li>如果 &#96;i &#x3D; 1，那么此结点为二叉树的根结点，如果i&gt;1，那么其父结点就是[i&#x2F;2]，比如第3个结点的父结点为第1个节点，也就是根结点。</li><li>如果2i &gt; n，则结点i没有左孩子，比如下面图中的二叉树，n为5，假设此时i &#x3D; 3，那么2i &#x3D; 6 &gt; n &#x3D;5 说明第三个结点没有左子树。</li><li>如果2i +1 &gt; n，则结点i没有右孩子。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git推送代码到远程仓库报错</title>
    <link href="/2023/06/30/git%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99/"/>
    <url>/2023/06/30/git%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>今天团队做项目的时候，推送到gitee仓库时碰到了这个报错，记录一下。</p><blockquote><p>报错：error: failed to push some refs to ‘<a href="https://gitee.com/xxxxx">https://gitee.com/xxxxx</a>‘<br>hint: Updates were rejected because the remote contains work that you do<br>hint: not have locally. This is usually caused by another repository pushing<br>hint: to the same ref. You may want to first integrate the remote changes<br>hint: (e.g., ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p></blockquote><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>出现这个报错的原因是因为你在远程仓库修改了文件，比如增加了开源的声明啊，或者那个增加了README.md文件，而你本地项目里面没有，就出现了这个错误。只要把远程的东西拉下来跟本地一样，然后再提交上远程就好了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先，通过下面命令将远程仓库数据拉到本地</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git pull --rebase origin master<br></code></pre></td></tr></table></figure><p>然后再执行下面的命令就可以上传到远程仓库了</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git push origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>DEBUG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令及具体上传流程</title>
    <link href="/2023/06/30/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%85%B7%E4%BD%93%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/06/30/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%85%B7%E4%BD%93%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="git将本地仓库数据上传到远程仓库基本步骤"><a href="#git将本地仓库数据上传到远程仓库基本步骤" class="headerlink" title="git将本地仓库数据上传到远程仓库基本步骤"></a>git将本地仓库数据上传到远程仓库基本步骤</h2><h3 id="步骤一：注册仓库"><a href="#步骤一：注册仓库" class="headerlink" title="步骤一：注册仓库"></a>步骤一：注册仓库</h3><p>先在gitee或者github上创建一个远程仓库并保存那个仓库地址</p><p><img src="/../img/mdImg/git/1.png"></p><h3 id="步骤二：初始化本地仓库"><a href="#步骤二：初始化本地仓库" class="headerlink" title="步骤二：初始化本地仓库"></a>步骤二：初始化本地仓库</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git init<br></code></pre></td></tr></table></figure><h3 id="步骤三：建立本地与仓库上新建项目连接"><a href="#步骤三：建立本地与仓库上新建项目连接" class="headerlink" title="步骤三：建立本地与仓库上新建项目连接"></a>步骤三：建立本地与仓库上新建项目连接</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git remote add origin 仓库的地址(比如：git@xxxxxxxx.git)<br></code></pre></td></tr></table></figure><h3 id="步骤四：同步仓库的项目到本地"><a href="#步骤四：同步仓库的项目到本地" class="headerlink" title="步骤四：同步仓库的项目到本地"></a>步骤四：同步仓库的项目到本地</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git pull origin master<br></code></pre></td></tr></table></figure><h3 id="步骤五：添加本地文件到缓存区"><a href="#步骤五：添加本地文件到缓存区" class="headerlink" title="步骤五：添加本地文件到缓存区"></a>步骤五：添加本地文件到缓存区</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git add .<br></code></pre></td></tr></table></figure><h3 id="步骤六：为提交文件添加说明"><a href="#步骤六：为提交文件添加说明" class="headerlink" title="步骤六：为提交文件添加说明"></a>步骤六：为提交文件添加说明</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git commit -m &quot;first push&quot;<br></code></pre></td></tr></table></figure><h3 id="步骤七：将本地文件提交到仓库"><a href="#步骤七：将本地文件提交到仓库" class="headerlink" title="步骤七：将本地文件提交到仓库"></a>步骤七：将本地文件提交到仓库</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git push origin master<br></code></pre></td></tr></table></figure><h2 id="git常用命令大全（自用）"><a href="#git常用命令大全（自用）" class="headerlink" title="git常用命令大全（自用）"></a>git常用命令大全（自用）</h2><h3 id="创建仓库命令"><a href="#创建仓库命令" class="headerlink" title="创建仓库命令"></a>创建仓库命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git init</code></td><td>初始化仓库，在当前文件夹会出现一个.git文件</td></tr><tr><td><code>git clone [url]</code></td><td>克隆一份远程仓库</td></tr></tbody></table><h3 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git config --list</code></td><td>显示当前的Git所有配置</td></tr><tr><td><code>git config --global user.name &quot;xxx&quot;</code><br /><code>git config --global user.email &quot;xxx@xxx&quot;</code></td><td>设置个人用户信息（用户名和邮箱）</td></tr></tbody></table><h3 id="增加-amp-删除文件命令"><a href="#增加-amp-删除文件命令" class="headerlink" title="增加 &amp; 删除文件命令"></a>增加 &amp; 删除文件命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git add [file1] [file2] ...</code></td><td>添加指定文件到缓存区</td></tr><tr><td><code>git add [dir]</code></td><td>添加指定目录到缓存区</td></tr><tr><td><code>git add .</code></td><td>添加当前目录的所有文件到缓存区</td></tr><tr><td><code>git add -p</code></td><td>添加每个变化前，都会要求确认</td></tr><tr><td><code>git rm [file1] [file2] ...</code></td><td>删除指定文件，并将此次删除的文件放入缓存区</td></tr><tr><td><code>git rm --cached [file]</code></td><td>停止追踪指定文件，但该文件会保留在工作区</td></tr><tr><td><code>git mv [file-original] [file-renamed]</code></td><td>改名文件，并将这个改名放入缓存区</td></tr></tbody></table><h3 id="提交命令"><a href="#提交命令" class="headerlink" title="提交命令"></a>提交命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git commit -m &quot;xxxxx&quot;</code></td><td>提交缓存区到仓库区</td></tr><tr><td><code>git commit [file1] [file2] ... -m &quot;xxxxx&quot;</code></td><td>提交缓存区的指定文件到仓库区</td></tr><tr><td><code>git commit -a</code></td><td>提交工作区自<strong>上次commit</strong>之后的变化，直接到仓库区</td></tr><tr><td><code>git commit -v</code></td><td>提交时显示所有的信息</td></tr><tr><td><code>git commit --amend -m &quot;xxxx&quot;</code></td><td>使用一个新的commit，替代上一次提交<br />如果代码没有任何变化，则用来改写上一次commit的提交信息</td></tr><tr><td><code>git commit --amend [file1] [file2] ...</code></td><td>重做上一次commit，并包括指定文件的新变化</td></tr></tbody></table><h3 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git branch</code></td><td>列出所有本地分支</td></tr><tr><td><code>git branch -r</code></td><td>列出所有远程分支</td></tr><tr><td><code>git branch -a</code></td><td>列出所有本地和远程分支</td></tr><tr><td><code>git branch [branch-name]</code></td><td>新建一个分支</td></tr><tr><td><code>git checkout -b [branch-name]</code></td><td>新建一个分支，并切换到该分支</td></tr><tr><td><code>git checkout [branch-name]</code></td><td>切换到指定分支</td></tr><tr><td><code>git checkout -</code></td><td>切换到上一个分支</td></tr></tbody></table><h3 id="查看信息命令"><a href="#查看信息命令" class="headerlink" title="查看信息命令"></a>查看信息命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git status</code></td><td>显示有变更的文件</td></tr><tr><td><code>git log</code></td><td>显示当前分支的版本历史</td></tr><tr><td><code>git log --stat</code></td><td>显示commit历史，以及每次commit发生变更的文件</td></tr></tbody></table><h3 id="远程同步命令"><a href="#远程同步命令" class="headerlink" title="远程同步命令"></a>远程同步命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git fetch [remote]</code></td><td>下载远程仓库的所有变动</td></tr><tr><td><code>git remote -v</code></td><td>显示所有远程仓库</td></tr><tr><td><code>git remote add [origin] [url]</code></td><td>建立本地于远程仓库的连接并命名</td></tr><tr><td><code>git pull [remote] [branch]</code></td><td>下载远程仓库的代码，并于本地分支合并</td></tr><tr><td><code>git push [remote] [branch]</code></td><td>上传本地指定分支到远程仓库</td></tr><tr><td><code>git push [remote] --force</code></td><td>强制推送当前分支到远程仓库，即使有冲突</td></tr><tr><td><code>git push [remote] --all</code></td><td>推送所有分支到远程仓库</td></tr></tbody></table><h3 id="撤销命令"><a href="#撤销命令" class="headerlink" title="撤销命令"></a>撤销命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git checkout [file]</code></td><td>恢复暂存区的指定文件到工作区</td></tr><tr><td><code>git checkout [commit] [file]</code></td><td>恢复某个commit的指定文件到暂存区和工作区</td></tr><tr><td><code>git checkout .</code></td><td>恢复暂存区的所有文件到工作区</td></tr><tr><td><code>git reset [file]</code></td><td>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</td></tr><tr><td><code>git reset --hard</code></td><td>重置暂存区与工作区，与上一次commit保持一致</td></tr><tr><td><code>git reset [commit]</code></td><td>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</td></tr><tr><td><code>git reset --hard [commit]</code></td><td>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区与指定commit一致</td></tr><tr><td><code>git reset --keep [commit]</code></td><td>重置当前HEAD为指定commit，但保持暂存区和工作区不变</td></tr><tr><td><code>git revert [commit]</code></td><td>新建一个commit，用来撤销指定commit<br/>后者的所有变化都将被前者抵消，并且应用到当前分支</td></tr><tr><td><code>git stash</code></td><td>暂时将未提交的变化移除，稍后再移入</td></tr><tr><td><code>git stash pop</code></td><td>暂时将未提交的变化移除，稍后再移入</td></tr></tbody></table><h2 id="git提交代码流程"><a href="#git提交代码流程" class="headerlink" title="git提交代码流程"></a>git提交代码流程</h2><p><img src="/../img/mdImg/git/2.png" alt="流程图"></p>]]></content>
    
    
    <categories>
      
      <category>操作命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot3学习笔记（二）--Spring3-核心特性--Web开发</title>
    <link href="/2023/06/26/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--Web%E5%BC%80%E5%8F%91/"/>
    <url>/2023/06/26/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--Web%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot3-Web开发"><a href="#SpringBoot3-Web开发" class="headerlink" title="SpringBoot3-Web开发"></a>SpringBoot3-Web开发</h2><blockquote><p>SpringBoot的web开发能力，由SpringMVC提供</p></blockquote><h3 id="0、WebMvcAutoConfiguration原理"><a href="#0、WebMvcAutoConfiguration原理" class="headerlink" title="0、WebMvcAutoConfiguration原理"></a>0、WebMvcAutoConfiguration原理</h3><h4 id="1、生效条件"><a href="#1、生效条件" class="headerlink" title="1、生效条件"></a>1、生效条件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@AutoConfiguration(</span><br><span class="hljs-meta">    after = &#123;DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class&#125;</span><br><span class="hljs-meta">)</span>  <span class="hljs-comment">// 在这些配置生效后 </span><br><span class="hljs-meta">@ConditionalOnWebApplication(</span><br><span class="hljs-meta">    type = Type.SERVLET</span><br><span class="hljs-meta">)</span>  <span class="hljs-comment">// 如果是web应用就生效，类型是servlet；另外还有reaction类型</span><br><span class="hljs-meta">@ConditionalOnClass(&#123;Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class&#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</span>  <span class="hljs-comment">// 没有这个Bean，才生效。默认就是没有</span><br><span class="hljs-meta">@AutoConfigureOrder(-2147483638)</span>  <span class="hljs-comment">// 优先级</span><br><span class="hljs-meta">@ImportRuntimeHints(&#123;WebResourcesRuntimeHints.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfiguration</span> &#123;<br></code></pre></td></tr></table></figure><h4 id="2、效果"><a href="#2、效果" class="headerlink" title="2、效果"></a>2、效果</h4><ol><li><p>放了两个Filter：</p><p>a. <code>HiddenHttpMethodFilter</code>：页面表单提交Rest请求</p><p>b. <code>FormContentFilter</code>：表单内容Filter，GET（数据放URL后面）、POST（数据放请求体）请求可以携带数据，PUT、DELETE的请求体数据会被忽略</p></li><li><p>给容器中放了<code>WebMvcConfigurer</code>组件，给SpringMvc添加各种定制功能</p><p>a、因为开启了属性绑定<code>@EnableConfigurationProperties</code>，所有所有的功能最终会和配置文件进行绑定</p><p>b、WebMvcProperties：在配置文件中以<code>spring.mvc</code>开头</p><p>c、WebProperties：在配置文件中以<code>spring.web</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(</span><br><span class="hljs-meta">    proxyBeanMethods = false</span><br><span class="hljs-meta">)</span><br><span class="hljs-meta">@Import(&#123;EnableWebMvcConfiguration.class&#125;)</span>  <span class="hljs-comment">// 额外导入了其他配置</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;WebMvcProperties.class, WebProperties.class&#125;)</span><br><span class="hljs-meta">@Order(0)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcAutoConfigurationAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>, ServletContextAware &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3、WebMvcConfigurer接口"><a href="#3、WebMvcConfigurer接口" class="headerlink" title="3、WebMvcConfigurer接口"></a>3、WebMvcConfigurer接口</h4><p>提供了配置SpringMVC底层的所有组件入口</p><p><img src="/../img/mdImg/springboot/WebMvcConfigurerInterface.png" alt="WebMvcConfigurer接口"></p><h4 id="4、静态资源规则源码"><a href="#4、静态资源规则源码" class="headerlink" title="4、静态资源规则源码"></a>4、静态资源规则源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>        logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 1、</span><br>    addResourceHandler(registry, <span class="hljs-built_in">this</span>.mvcProperties.getWebjarsPathPattern(),<br>                       <span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    <span class="hljs-comment">// 2、</span><br>    addResourceHandler(registry, <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;<br>        registration.addResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations());<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.servletContext != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ServletContextResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResource</span>(<span class="hljs-built_in">this</span>.servletContext, SERVLET_LOCATION);<br>            registration.addResourceLocations(resource);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>规则一：访问<code>/webjars/**</code>路径就去<code>classpath:/META-INF/resources/webjars/</code>路径下找资源</p><ul><li>maven导入依赖</li><li></li></ul></li><li><p>规则二：访问<code>/**</code>路径就去<code>静态资源默认的四个位置找资源</code></p><ul><li><code>classpath:/META-INF/resources/</code></li><li><code>classpath:/resources/</code></li><li><code>classpath:/static/</code></li><li><code>classpath:/public/</code></li></ul></li><li><p>规则三：静态资源默认都有缓存规则的设置</p><ul><li><p>所有缓存的设置，直接通过配置文件：<code>spring.web</code></p></li><li><p>cachePeriod：缓存周期；多久不用找服务器要新的。默认没有，以s为单位</p></li><li><p>cacheControl：HTTP缓存控制。具体可以上mdn官网查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">HTTP 缓存 - HTTP | MDN (mozilla.org)</a></p></li><li><p>useLastModified：是否使用最后一次修改</p></li></ul><blockquote><p>如果浏览器访问了静态资源<code>index.js</code>，如果服务这个资源没有发生变化，下次访问的时候就可以直接让浏览器用自己缓存中的东西，而不是给服务器发请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">registration.setCachePeriod(getSeconds(<span class="hljs-built_in">this</span>.resourceProperties.getCache().getPeriod()));<br>registration.setCacheControl(<span class="hljs-built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl());<br>registration.setUseLastModified(<span class="hljs-built_in">this</span>.resourceProperties.getCache().isUseLastModified());<br></code></pre></td></tr></table></figure></li></ol><h4 id="5、EnableWebMvcConfiguration源码"><a href="#5、EnableWebMvcConfiguration源码" class="headerlink" title="5、EnableWebMvcConfiguration源码"></a>5、EnableWebMvcConfiguration源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//springBoot给容器中放weblvcconfigurationsupport组件。</span><br><span class="hljs-comment">//我们如果自己放了WebNcConfigurationsupport 组件，Boot的WebmvcAutoconfiguration都会失效。</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@EnableConfigurationProperties(WebProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnableWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResourceLoaderAware</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p><code>HandlerMapping</code>：根据请求路径<code>/a</code>找到handler能处理请求</p><p>a、<code>WelcomePageHandlerMapping</code>：</p><p>​i、访问<code>/**</code>路径下的所有请求 ，都在之前四个静态资源路径下找，欢迎页也是</p><p>​ii、找<code>index.html</code>：只要静态资源位置有一个<code>index.html</code>页面，项目启动默认访问</p></li></ol><h4 id="6、为什么容器中放一个WebMvcConfigurer就能生效"><a href="#6、为什么容器中放一个WebMvcConfigurer就能生效" class="headerlink" title="6、为什么容器中放一个WebMvcConfigurer就能生效"></a>6、为什么容器中放一个WebMvcConfigurer就能生效</h4><ol><li><code>WebMvcAutoConfiguration</code>是一个自动配置类，它里面有一个<code>EnableWebMvcConfiguration</code></li><li><code>EnableWebMvcConfiguration</code>继承于<code>DelegatingWebMvcConfiguration</code>，这两个都生效</li><li><code>DelegatingWebMvcConfiguration</code>利用 DI 把容器中所有<code>WebMvcConfigurer</code>注入进来</li><li>别人调用<code> DelegatingWebMvcConfiguration</code>的方法配置底层规则，而它调用所有<code>WebMvcConfigure</code>的配置底层方法。</li></ol><h3 id="1、Web场景"><a href="#1、Web场景" class="headerlink" title="1、Web场景"></a>1、Web场景</h3><h4 id="1、自动配置"><a href="#1、自动配置" class="headerlink" title="1、自动配置"></a>1、自动配置</h4><ol><li><p>整合整合web场景</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>引入<code>autoconfigure</code>功能</p></li><li><p><code>@EnableAutoConfiguration</code>注解使用<code>@Import(&#123;AutoConfigurationImportSelector.class&#125;)</code>批量带入组件</p></li><li><p>加载<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件中配置的所有组件</p></li><li><p>所有自动配置类如下</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs imports">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration<br>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration<br>============= 以下是响应式web场景 ==============================<br>org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration<br>org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration<br>org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration<br>org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration<br>org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration<br>org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration<br>org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration<br>org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration<br>============= 以上是响应式web场景 ==============================<br>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration<br>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration<br>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration<br>org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration<br>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration<br>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration<br>org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration<br>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration<br>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration<br>org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration<br>org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration<br></code></pre></td></tr></table></figure><ol start="6"><li>绑定了配置文件的一堆配置项<ul><li>1、SpringMVC的所有配置 <code>spring.mvc</code></li><li>2、Web场景的通用配置 <code>spring.web</code></li><li>3、文件上传配置 <code>spring.servlet.multipart</code></li><li>4、服务器的配置 <code>server</code></li></ul></li></ol><h4 id="2、默认效果"><a href="#2、默认效果" class="headerlink" title="2、默认效果"></a>2、默认效果</h4><p>默认配置：</p><ol><li>包含了<code>ContentNegotiatingViewResolver</code>和<code>BeanNameViewResolver</code>组件，方便视图解析</li><li><strong>默认的静态资源处理机制：</strong>静态资源放在<code> static</code> 文件夹下即可直接访问</li><li>自动注册了<code>Converter</code>,<code>GenericConverter</code>,<code>Formatter</code>组件，适配常见的数据类型转换和格式化需求。</li><li>支持<code>HttpMessageConverters</code>，可以方便返回<code>json</code>等数据类型</li><li>注册<code>MessageCodesResolver</code>，方便国际化及错误消息处理</li><li>支持 静态<code>index.html</code></li><li>自动使用<code>ConfigurableWebBindingInitializer</code>，实现<strong>消息处理、数据绑定、类型转化、数据校验</strong>等功能</li></ol><blockquote><p>重要：</p><ul><li>如果想保持 boot mvc 的默认配置，并且自定义更多的 mvc配置，如: **interceptors, **<br><strong>formatters,view controllers</strong>等。可以使用<code>@Configuration</code>注解添加一个 <code>WebMvcConfigurer</code>类型的配置类,并不要标注<code>@EnableWebMvc</code></li><li>如果想保持 boot mvc的默认配置，但要自定义核心组件实例，比如:<code>RequestMappingHandlerMapping</code>,<code>RequestMappingHandlerAdapte</code>r,或<br><code>ExceptionHandlerExceptionResolver</code>，给容器中放一个 <code>WebMvcRegistrations</code> 组件即可</li><li>如果想全面接管Spring MVC，<code>@Configuration</code>标注一个配置类，并加上<code>@EnableWebMvc</code>注解，实现 <code>WebMvcConfigurer</code>接口</li></ul></blockquote><h3 id="2、静态资源"><a href="#2、静态资源" class="headerlink" title="2、静态资源"></a>2、静态资源</h3><p>1. </p><h4 id="1、默认规则"><a href="#1、默认规则" class="headerlink" title="1、默认规则"></a>1、默认规则</h4><h5 id="1、静态资源映射"><a href="#1、静态资源映射" class="headerlink" title="1、静态资源映射"></a>1、静态资源映射</h5><p>静态资源映射规则在<code>WebMvcAutoConfiguration</code>中进行定义：</p><ol><li><code>/webjars/**</code>的所有路径资源都在<code>classpath:/META-INF/resources/webjars/</code></li><li><code>/**</code>的所有路径资源都在<code>classpath:/META-INF/resources/</code>、<code>classpath:/resources/</code>、<code>classpath:/static/</code>、<code>classpath:/public/</code></li></ol><h5 id="2、静态资源缓存"><a href="#2、静态资源缓存" class="headerlink" title="2、静态资源缓存"></a>2、静态资源缓存</h5><p>所有缓存的设置，直接通过配置文件：<code>spring.web</code></p><ul><li>Period：缓存周期；默认0s</li><li>cacheControl：HTTP缓存控制；默认无</li><li>useLastModified：是否使用lastModified头。默认 false</li></ul><h5 id="3、欢迎页"><a href="#3、欢迎页" class="headerlink" title="3、欢迎页"></a>3、欢迎页</h5><p>欢迎页规则在<code>WebMvcAutoConfiguration</code>中进行了定义：</p><ul><li>在静态资源目录下找  index.html</li><li>没有就在 <code>templates</code>下找 index 模板页</li></ul><h5 id="4、Favicon"><a href="#4、Favicon" class="headerlink" title="4、Favicon"></a>4、Favicon</h5><p>在静态资源目录下找<code>favicon.ico</code>，如果找到就显示到浏览器图标上。有的可能不会显示（更浏览器有关）</p><h5 id="5、缓存实验"><a href="#5、缓存实验" class="headerlink" title="5、缓存实验"></a>5、缓存实验</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#1、spring.web</span><br><span class="hljs-comment">#   1、配置国际化的区域信息</span><br><span class="hljs-comment">#   2、静态资源策略（开启，链，缓存）</span><br><span class="hljs-comment">#开启静态资源映射规则</span><br><span class="hljs-attr">spring.web.resources.add-mappings</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#设置缓存</span><br><span class="hljs-attr">spring.web.resources.cache.period</span>=<span class="hljs-string">3600</span><br><span class="hljs-comment">#缓存详细合并项控制，覆盖period配置</span><br><span class="hljs-attr">spring.web.resources.cache.cachecontrol.max-age</span>=<span class="hljs-string">7200</span><br><span class="hljs-comment">#使用资源 last-modified 时，来对比服务器和浏览器的资源是否相同没有变化。相同返回304</span><br><span class="hljs-attr">spring.web.resources.cache.use-last-modified</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h4 id="2、自定义静态资源规则"><a href="#2、自定义静态资源规则" class="headerlink" title="2、自定义静态资源规则"></a>2、自定义静态资源规则</h4><h5 id="1、配置方式"><a href="#1、配置方式" class="headerlink" title="1、配置方式"></a>1、配置方式</h5><p><code>spring.mvc</code>：静态资源访问的前缀路径</p><p><code>spring.web</code>：</p><ul><li>设置静态资源的目录</li><li>设置静态资源的缓存策略</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#2、spring.mvc</span><br><span class="hljs-comment">##  1、指定自定义webjars路径前缀</span><br><span class="hljs-attr">spring.mvc.webjars-path-pattern</span>=<span class="hljs-string">/wj/**</span><br><span class="hljs-comment">##  2、指定静态资源访问路径前缀</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/static/**</span><br><span class="hljs-comment">##  3、自定义静态资源文件夹位置</span><br><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/a/,classpath:/b/</span><br></code></pre></td></tr></table></figure><h5 id="2、代码方式"><a href="#2、代码方式" class="headerlink" title="2、代码方式"></a>2、代码方式</h5><blockquote><ul><li>容器中只要有一个WebConfigurer组件。配置的底层行为都会生效</li><li>@EnableWebMvc  &#x2F;&#x2F; 禁用boot的默认配置</li></ul></blockquote><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 告诉spring这是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 保留以前的配置</span><br>        WebMvcConfigurer.<span class="hljs-built_in">super</span>.addResourceHandlers(registry);<br><br>        <span class="hljs-comment">// 自己额外添加</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/static/**&quot;</span>)<br>            .addResourceLocations(<span class="hljs-string">&quot;classpath:/a/&quot;</span>, <span class="hljs-string">&quot;classpath:/b/&quot;</span>)<br>            .setCacheControl(CacheControl.maxAge(<span class="hljs-number">7200</span>, TimeUnit.SECONDS));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Configuration // 告诉spring这是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> <span class="hljs-comment">/*implements WebMvcConfigurer*/</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>                WebMvcConfigurer.<span class="hljs-built_in">super</span>.addResourceHandlers(registry);<br>                <span class="hljs-comment">// 自己额外添加</span><br>                registry.addResourceHandler(<span class="hljs-string">&quot;/static/**&quot;</span>)<br>                    .addResourceLocations(<span class="hljs-string">&quot;classpath:/a/&quot;</span>, <span class="hljs-string">&quot;classpath:/b/&quot;</span>)<br>                    .setCacheControl(CacheControl.maxAge(<span class="hljs-number">7200</span>, TimeUnit.SECONDS));<br>            &#125;<br>        &#125;;<br>    &#125;<br><br><br>    <span class="hljs-comment">//    @Override</span><br>    <span class="hljs-comment">//    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br>    <span class="hljs-comment">//        // 保留以前的配置</span><br>    <span class="hljs-comment">//        WebMvcConfigurer.super.addResourceHandlers(registry);</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//        // 自己额外添加</span><br>    <span class="hljs-comment">//        registry.addResourceHandler(&quot;/static/**&quot;)</span><br>    <span class="hljs-comment">//                .addResourceLocations(&quot;classpath:/a/&quot;, &quot;classpath:/b/&quot;)</span><br>    <span class="hljs-comment">//                .setCacheControl(CacheControl.maxAge(7200, TimeUnit.SECONDS));</span><br>    <span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、路径匹配"><a href="#3、路径匹配" class="headerlink" title="3、路径匹配"></a>3、路径匹配</h3><blockquote><p>Spring5.3 之后加入了更多的请求路径匹配的实现策略：</p><p>以前只支持AntPathMatcher策略，现在提供了PathPatternParser策略。并且可以让我们指定到底使用哪种策略。</p></blockquote><h4 id="1、Ant风格路径用法"><a href="#1、Ant风格路径用法" class="headerlink" title="1、Ant风格路径用法"></a>1、Ant风格路径用法</h4><p>Ant风格的路径模式语法具有以下规则：</p><ul><li><code>*</code> ：表示任意数量的字符</li><li><code>?</code> ：表示任意一个字符</li><li><code>**</code>：表示任意数量的目录</li><li><code>&#123;&#125;</code>：表示一个命名的模式占位符</li><li><code>[]</code>：表示字符集合，例如<code>[a-z]</code>表示小写字母</li></ul><p>例如：</p><ul><li><code>.html</code>匹配任意名称,扩展名为<code>.html</code>的文件</li><li><code>/folder1/*/*.java</code>匹配在<code>folder1</code>目录下的任意两级目录下的<code>.java</code>文件</li><li><code>/folder1/*/*.jsp</code>匹配在<code>folder2</code>目录下任意目录深度的<code>.jsp</code>文件</li><li><code>/&#123;type&#125;/&#123;id&#125;.html</code>匹配任意文件名为<code>&#123;id&#125;.html</code>,在任意命名的<code>&#123;type&#125;</code>目录下的文件</li></ul><p>注意：Ant风格的路径模式语法中的特殊字符需要转义，如：</p><ul><li>要匹配文件路径中的星号，则需要转义为<code>\\*</code></li><li>要匹配文件路径中的句号，则需要转义为<code>\\?</code></li></ul><h4 id="2、模式切换"><a href="#2、模式切换" class="headerlink" title="2、模式切换"></a>2、模式切换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认使用新版路径匹配器 PathPatternParser 进行路劲匹配</span><br><span class="hljs-comment">     * 不嫩匹配 ** 在中间的情况，剩下的和 antPathMatcher语法兼容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> path</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@GetMapping(&quot;/a*/b?/&#123;p1:[a-f]+&#125;/**&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@PathVariable(&quot;p1&quot;)</span> String path)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;路径变量p1：&#123;&#125;&quot;</span>, path);<br>    <span class="hljs-comment">// 获取请求路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>    <span class="hljs-keyword">return</span> requestURI;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>使用默认的路径匹配规则，是由<code>PathPatternParser</code>提供的</li><li>如果路径中间需要 ** ，替换成ant风格路径</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 改变路径匹配策略</span><br><span class="hljs-comment"># ant_path_matcher 老版特性</span><br><span class="hljs-comment"># path_pattern_parser 新版特性</span><br><span class="hljs-attr">spring.mvc.pathmatch.matching-strategy</span>=<span class="hljs-string">path_pattern_parser</span><br></code></pre></td></tr></table></figure><h3 id="4、内容协商"><a href="#4、内容协商" class="headerlink" title="4、内容协商"></a>4、内容协商</h3><blockquote><p>一套系统适配多段数据返回</p></blockquote><p><img src="/../img/mdImg/springboot/contentNegotiation.png" alt="内容协商"></p><h4 id="1、多端内容适配"><a href="#1、多端内容适配" class="headerlink" title="1、多端内容适配"></a>1、多端内容适配</h4><h5 id="1、默认规则-1"><a href="#1、默认规则-1" class="headerlink" title="1、默认规则"></a>1、默认规则</h5><ol><li><p>SpringBoot 多端内容适配</p><p>1.1 基于<strong>请求头</strong>内容协商（默认开启）</p><p>​1.1.1．客户端向服务端发送请求，携带HTTP标准的Accept请求头。<br>​1.1.1.1.   <strong>Accept:</strong> application&#x2F;json . text&#x2F;xm1 . text&#x2F; yaml</p><p>​1.1.1.2．服务端<strong>根据客户端请求头期望的数掘类型</strong>进行<strong>动态返回</strong><br>1.2.基于<strong>请求参数</strong>内容协商:（需要开启）<br>​1.2.1．发送请求<strong>GET &#x2F;projects&#x2F;spring-boot?format&#x3D;json</strong></p><p>​1.2.2．业配到**@GetMapping(“&#x2F;projects&#x2F;spring-boot”)**<br>​1.2.3．根据参数协商，优先返回json类型数据【需要开启参数匹配设置】<br>​1.2.4、发送诘求<strong>GET &#x2F;projects&#x2F;spring-boot?format-xml</strong>,优先返回xml类型数据</p></li></ol><h5 id="2、效果演示"><a href="#2、效果演示" class="headerlink" title="2、效果演示"></a>2、效果演示</h5><blockquote><p>同一个接口，可以返回json和xml不同格式的数据</p></blockquote><p>spring boot底层返回的默认就是json格式</p><ol><li>也支持xml，不过需要先导依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>然后标注注解<code>@JacksonXmlRootElement</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@JacksonXmlRootElement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>开启基于请求参数的内容协商</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 表示开启基于请求参数的内容协商功能，默认参数为format</span><br><span class="hljs-attr">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 设置请求参数的参数为type</span><br><span class="hljs-attr">spring.mvc.contentnegotiation.parameter-name</span>=<span class="hljs-string">type</span><br></code></pre></td></tr></table></figure><h4 id="2、自定义内容返回"><a href="#2、自定义内容返回" class="headerlink" title="2、自定义内容返回"></a>2、自定义内容返回</h4><h5 id="1、增加yaml返回支持"><a href="#1、增加yaml返回支持" class="headerlink" title="1、增加yaml返回支持"></a>1、增加yaml返回支持</h5><p>第一步：导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二步：把对象写出成YAML</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>    person.setId(<span class="hljs-number">1L</span>);<br>    person.setUserName(<span class="hljs-string">&quot;张三&quot;</span>);<br>    person.setEmail(<span class="hljs-string">&quot;aaa.@qq.com&quot;</span>);<br>    person.setAge(<span class="hljs-number">18</span>);<br><br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">YAMLFactory</span>());<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(person);<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><p>第三步：编写配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.mvc.contentnegotiation.media-types.yaml</span>=<span class="hljs-string">text/yaml</span><br></code></pre></td></tr></table></figure><p>第四步：编写自己的类型装换规则（MessageConverter）</p><p>MyYamlHttpMessageConverter类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyYamlHttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractHttpMessageConverter</span>&lt;Object&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyYamlHttpMessageConverter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//        // 媒体类型</span><br>        <span class="hljs-comment">//        MediaType mediaType = new MediaType(&quot;text&quot;, &quot;yaml&quot;);</span><br>        <span class="hljs-comment">// 告诉springboot这个messageConverter支持哪种媒体类型</span><br>        <span class="hljs-built_in">super</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaType</span>(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;yaml&quot;</span>));<br>        <span class="hljs-type">YAMLFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YAMLFactory</span>()<br>            .disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);<br>        <span class="hljs-built_in">this</span>.objectMapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>(factory);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-comment">// 可以在这添加判断，只要是对象类型都支持。这里就没写了</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// @RequestBody</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">readInternal</span><span class="hljs-params">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotReadableException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// @ResponseBody</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeInternal</span><span class="hljs-params">(Object methodReturnValue, HttpOutputMessage outputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException &#123;<br>        <span class="hljs-comment">// try。。。with写法，自动关流</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> outputMessage.getBody()) &#123;<br>            <span class="hljs-built_in">this</span>.objectMapper.writeValue(os, methodReturnValue);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第五步：增加<code>HttpMessageConverter</code>组件，把自定义的配置写入底层。专门负责把对象写出为yaml格式</p><p>config类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">webMvcConfigurer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurer</span>() &#123;<br>        <span class="hljs-meta">@Override</span>  <span class="hljs-comment">// 配置一个把对象转为yaml的messageConverter</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>            converters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyYamlHttpMessageConverter</span>( ));<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、思考：如何增加其他"><a href="#2、思考：如何增加其他" class="headerlink" title="2、思考：如何增加其他"></a>2、思考：如何增加其他</h5><ul><li>配置媒体类型支持</li><li>编写对应的<code>HttpMessageConverter</code></li></ul><h5 id="3、内容协商原理-HttpMessageConverter"><a href="#3、内容协商原理-HttpMessageConverter" class="headerlink" title="3、内容协商原理-HttpMessageConverter"></a>3、内容协商原理-<code>HttpMessageConverter</code></h5><blockquote><ul><li><code>HttpMessageConverter</code>怎么工作？</li><li>定制<code>HttpMessageConverter</code>来实现多端内容协商</li><li>编写<code>WebMvcConfigurer</code>提供的<code>configureMessageConverters</code>底层，修改底层的<code>MessageConverter</code></li></ul></blockquote><h6 id="1、-ResponseBody由HttpMessageConverter处理"><a href="#1、-ResponseBody由HttpMessageConverter处理" class="headerlink" title="1、@ResponseBody由HttpMessageConverter处理"></a>1、<code>@ResponseBody</code>由<code>HttpMessageConverter</code>处理</h6><blockquote><p>标注了<code>@ResponseBody</code>的返回值 将会由支持它的 <code>HttpMessageConverter</code>写给浏览器</p></blockquote><ol><li><p>如果controller方法的返回值标注了<code>@ResponseBody</code>注解</p><ol><li>请求进来先来到<code>DispatcherServlet</code>的<code>doDispatch()</code>进行处理</li><li>找到一个<code>HandlerAdapter</code>适配器，利用适配器执行目标方法</li><li>因为标了<code>RequestMapping</code>注解，所有是由<code>RequestMappingHandlerAdapter</code>来执行，最终会调用<code>invokeHandlerMethod</code>这个方法</li><li>目标方法执行之前，准备了两个东西：<ol><li><code>HandlerMethodArgumentResolver</code>：参数解析器，确定目标方法每个参数</li><li><code>HandlerMethodReturnValueHandler</code>：返回值处理器，返回的数据怎么处理</li></ol></li><li><code>RequestMappingHandlerAdapter</code>里面的<code>invokeAndHandler()</code>真正的执行目标方法</li><li>目标方法执行完成，会返回<strong>返回值对象</strong></li><li>当得到返回值对象后，先找到一个合适的返回值处理器<code>HandlerMethodReturnValueHandler</code></li><li>最终找到<code>RequestResponseBodyMethodProcessor</code>能处理 标注了<code>@ResponseBody</code>注解的方法</li><li><code>RequestResponseBodyMethodProcessor</code>调用<code>writeWithMessageConverters</code>，利用<code>MessageConverter</code>把返回值写出去</li></ol><blockquote><p>上面解释：<code>@ResponseBody</code>由<code>HttpMessageConverter</code>处理</p></blockquote></li><li><p><code>HttpMessageConverter</code>会进行内容协商</p><ol><li>遍历所有的<code>MessageConverter</code>看谁支持这种内容类型的数据</li><li><code>MessageConverter</code>有以下</li><li><img src="/../img/mdImg/springboot/contentType.png"></li><li>最终因为要JSON所以<code>MappingJackson2HttpMessageConverter</code>支持写出JSON</li><li>jackson用<code>ObjectMapper</code>把对象写出去</li></ol></li></ol><h6 id="2、WebMvcAutoConfiguration提供了几种默认HttpMessageConverters"><a href="#2、WebMvcAutoConfiguration提供了几种默认HttpMessageConverters" class="headerlink" title="2、WebMvcAutoConfiguration提供了几种默认HttpMessageConverters"></a>2、<code>WebMvcAutoConfiguration</code>提供了几种默认<code>HttpMessageConverters</code></h6><ul><li><p><code>EnableWebMvcConfigurration</code>通过<code>addDefaultHttpMessageConverters</code>添加了默认的<code>MessageConverter</code>；如下：</p><ul><li><code>ByteArrayHttpMessageConverter()</code>：支持字节数据读写</li><li><code>StringHttpMessageConverter()</code>：支持字符串读写</li><li><code>ResourceHttpMessageConverter()</code>：支持资源读写</li><li><code>ResourceRegionHttpMessageConverter()</code>：支持分区资源写出</li><li><code>AllEncompassingFormHttpMessageConverter()</code>：支持表单xml&#x2F;json读写</li><li><code>MappingJackson2XmlHttpMessageConverter</code>：支持请求响应体Json读写</li></ul><p>如果不导包，默认只要8个：</p><p><img src="/../img/mdImg/springboot/defaultContentType.png"></p><blockquote><p>系统提供默认的<code>MessageConverter</code>功能有限，仅用于json或者普通返回数据，额外增加新的内容协商功能，必须增加新的<code>HttpMessageConverter </code></p></blockquote></li></ul><h5 id="4、WebMvcConfigurationSupport"><a href="#4、WebMvcConfigurationSupport" class="headerlink" title="4、WebMvcConfigurationSupport"></a>4、WebMvcConfigurationSupport</h5><p>提供很多默认设置。</p><p>判断系统中是否有相应的类；如果有，就加入<code>HttpMessageConverter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">jackson2Present = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;<br>    ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);<br>jackson2XmlPresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);<br>jackson2SmilePresent = ClassUtils.isPresent(<span class="hljs-string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);<br></code></pre></td></tr></table></figure><h3 id="5、模板引擎"><a href="#5、模板引擎" class="headerlink" title="5、模板引擎"></a>5、模板引擎</h3><blockquote><p>由于SpringBoot使用了<strong>嵌入式Servlet容器</strong>，所以<strong>JSP</strong>默认不能使用</p><p>如果需要服务端页面渲染，优先考虑使用模板引擎</p></blockquote><p><img src="/../img/mdImg/springboot/templateEngine.png" alt="模板引擎"></p><p><strong>模板引擎</strong>页面默认放在<code>src/main/resource/templates</code></p><p>SpringBoot包括以下模板引擎的自动配置</p><ul><li>FressMarker</li><li>Groovy</li><li>Thymeleaf</li><li>Mustache</li></ul><p><strong><a href="https://www.thymeleaf.org/">Thymeleaf官网</a></strong></p><h4 id="1、Thymeleaf整合"><a href="#1、Thymeleaf整合" class="headerlink" title="1、Thymeleaf整合"></a>1、Thymeleaf整合</h4><p>导坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Thymeleaf自动配置原理：</p><ol><li>开启了<code>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration</code>自动配置</li><li>属性绑定在<code>ThymeleafProperties</code>中，对应配置文件以<code>spring.thymeleaf</code>开头</li><li>所有模板页面默认在<code>classpath:/templates</code>文件下</li></ol><h4 id="2、基础语法"><a href="#2、基础语法" class="headerlink" title="2、基础语法"></a>2、基础语法</h4><h5 id="1、核心用法"><a href="#1、核心用法" class="headerlink" title="1、核心用法"></a>1、核心用法</h5><p><strong><code>th:xxx</code>：</strong>动态渲染指定的 html 标签属性值、或则 th 指令（遍历、判断等）</p><ul><li><code>th:text</code>：用于获取标签体内的数据并渲染到页面。数据是什么样子就原原本本的展示到页面，<strong>会进行转义</strong></li><li><code>th:utext</code>：用于获取标签体内的数据并渲染到页面。如果是<strong>html</strong>样式在标签体内，会按html语法渲染到界面，<strong>不会进行转义</strong></li><li><code>th:任意html属性</code>：标签指定属性渲染</li><li><code>th:attr</code>：标签任意属性渲染</li><li><code>th:if  th:each ...</code>：其他指令</li></ul><p><strong>表达式</strong>：用来动态取值</p><ul><li><code>$&#123;&#125;</code>：变量取值；使用model共享给界面的值都直接用${}</li><li><code>@&#123;&#125;</code>：url地址取值</li><li><code>#&#123;&#125;</code>：国际化信息</li><li><code>~&#123;&#125;</code>：片段引用</li><li><code>*&#123;&#125;</code>：变量选择：需要配合 th:object 绑定对象</li></ul><p><strong>系统工具&amp;内置对象</strong>：见 <a href="https://www.thymeleaf.org/doc/tutorials/3.1/usingthymeleaf.html#appendix-b-expression-utility-objects">官方文档</a></p><h4 id="3、遍历"><a href="#3、遍历" class="headerlink" title="3、遍历"></a>3、遍历</h4><blockquote><p>语法：<code>th:each=&quot;元素名，迭代状态：$&#123;集合&#125;&quot;</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;prod : $&#123;prods&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.inStock&#125; ? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;prod,iterStat : $&#123;prods&#125;&quot;</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;iterStat.odd&#125; ? &#x27;odd&#x27;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;prod.inStock&#125; ? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>iterSat</strong>有以下属性：</p><ul><li>index ：当前遍历元素的索引，从0开始</li><li>count ：当前遍历元素的索引，从1开始</li><li>size ：需要遍历元素的总数量</li><li>current ：当前正在遍历的元素对象</li><li>even &#x2F; odd ：是否偶数 &#x2F; 奇数，返回值为 <code>true</code> OR <code>false</code></li><li>first ：是否第一个元素</li><li>last ：是否最后一个元素</li></ul><h4 id="4、判断"><a href="#4、判断" class="headerlink" title="4、判断"></a>4、判断</h4><ul><li><code>th:if</code></li><li><code>th:switch</code> … <code>th:case</code></li></ul><h4 id="5、模板布局"><a href="#5、模板布局" class="headerlink" title="5、模板布局"></a>5、模板布局</h4><ul><li>定义模板：<code>th:fragment</code></li><li>引用模板：<code>~&#123;模板名 :: 片段名&#125;</code></li><li>插入模板：<code>th:insert</code>、<code>th:replace</code></li></ul><h4 id="6、热启动"><a href="#6、热启动" class="headerlink" title="6、热启动"></a>6、热启动</h4><p><strong>devtools</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改界面后：<code>ctrl+F9</code>刷新效果</p><p>Java代码的修改，如果<code>devtools</code>热启动，可能有bug</p><h3 id="6、国际化"><a href="#6、国际化" class="headerlink" title="6、国际化"></a>6、国际化</h3><p>国际化的自动配置类是<code>MessageSourceAutoConfiguration</code></p><p>实现步骤：</p><ol><li>在资源文件夹下新建 <code>message.properties</code>配置文件<ul><li><code>message.properties</code>：默认语言</li><li><code>message-en-US.properties</code>：英文</li><li><code>message-zh-CN.properties</code>：中文</li></ul></li><li>在页面中使用表达式 <code>#&#123;&#125;</code>获取国际化配置信息</li><li>在程序中可以自动注入 <code>MessageSource</code>组件，过去国际化的配置项值</li></ol><h3 id="7、错误处理"><a href="#7、错误处理" class="headerlink" title="7、错误处理"></a>7、错误处理</h3><p><img src="/../img/mdImg/springboot/ExceptionHandler.png" alt="错误处理流程"></p><h3 id="8、嵌入式容器"><a href="#8、嵌入式容器" class="headerlink" title="8、嵌入式容器"></a>8、嵌入式容器</h3><blockquote><p><strong>Servlet容器：</strong> 管理、运行Servlet组件（Servlet、Filter、Listenere ）的环境，一般指服务器</p></blockquote><h4 id="1、自动配置原理"><a href="#1、自动配置原理" class="headerlink" title="1、自动配置原理"></a>1、自动配置原理</h4><blockquote><p>SpringBoot默认嵌入Tomcat作为Servlet容器</p></blockquote><ol><li><p><code>ServletWebServerFactoryAutoConfiguration</code>自动配置了嵌入式容器</p></li><li><p>所有的属性都绑定在了<code>ServerProperties</code>属性类中</p></li><li><p><code>ServletWebServerFactoryAutoConfiguration</code>导入了嵌入式三大服务器 tomcat、jetty、undertow</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfiguration</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="hljs-meta">@ConditionalOnClass(ServletRequest.class)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@EnableConfigurationProperties(ServerProperties.class)</span><br><span class="hljs-meta">@Import(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span><br><span class="hljs-meta">ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span><br><span class="hljs-meta">ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span><br><span class="hljs-meta">ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletWebServerFactoryAutoConfiguration</span> &#123;<br></code></pre></td></tr></table></figure><ul><li>导入这三个服务器都有条件注解<code>@ConditionalOnClass(&#123; Servlet.class, Tomcat.class, UpgradeProtocol.class &#125;)</code>、<code>@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</code></li><li>默认是tomcat，给容器中放入了<code>TomcatServletWebServerFactory</code></li><li>都在容器中<code>XXXServletWebServerFactory</code>放了一个<strong>Web服务器工厂</strong></li><li>web服务器工厂都有一个功能，<code>getWebServer</code>获取web服务器</li></ul></li></ol><h3 id="9、全面接管SpringMVC"><a href="#9、全面接管SpringMVC" class="headerlink" title="9、全面接管SpringMVC"></a>9、全面接管SpringMVC</h3><blockquote><p>spring boot默认配置好了springmvc的所有常用特性</p><p>如果我们需要全面接管springmvc的所有配置并禁用默认配置，只需要我们编写一个<code>WebMvcConfigurer</code>配置类，并标注<code>@EnableWebMvc</code></p><ul><li><code>@EnableWebMvc</code>：禁用默认配置</li><li><code>WebMvcConfigurer</code>组件：定义mvc底层行为</li></ul></blockquote><h4 id="1、WebMvcAutoConfiguration配置了哪些行为"><a href="#1、WebMvcAutoConfiguration配置了哪些行为" class="headerlink" title="1、WebMvcAutoConfiguration配置了哪些行为"></a>1、WebMvcAutoConfiguration配置了哪些行为</h4><ol><li><code>WebMvcAutoConfiguration</code> web场景的自动配置类<ol><li>支持RESTful的filter：<code>HiddenHttpMethodFilter</code></li><li>支持非POST，请求体携带数据：<code>FormContentFilter</code></li><li>导入<code>EnableWebMvcConfiguration</code></li><li><code>WebMvcAutoConfigurationAdapter</code>配置生效，它实现了<code>WebMvcConfigurer</code></li><li>mvc所有的底层行为接口都在<code>WebMvcConfigurer</code>这个接口里</li></ol></li></ol><h4 id="2、-EnableWebMvc禁用默认行为怎么实现"><a href="#2、-EnableWebMvc禁用默认行为怎么实现" class="headerlink" title="2、@EnableWebMvc禁用默认行为怎么实现"></a>2、@EnableWebMvc禁用默认行为怎么实现</h4><ol><li><code>@EnableWebMvc</code>往容器中导入了<code>DelegatingWebMvcConfiguration</code>组件，此组件又继承了<code>WebMvcConfigurationSupport</code>，相当于它就是<code>WebMvcConfigurationSupport</code></li><li><code>WebMvcAutoConfiguration</code>要生效有条核心注解<code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>，只有ioc容器中没有此组件时才会生效mvc底层的所有默认行为</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git clone下来的vue项目报错解决</title>
    <link href="/2023/06/25/git%20clone%E4%B8%8B%E6%9D%A5%E7%9A%84vue%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/06/25/git%20clone%E4%B8%8B%E6%9D%A5%E7%9A%84vue%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>报错：Error: error:0308010C:digital envelope routines::unsupported<br>            ………<br>            (node:internal&#x2F;fs&#x2F;read_file_context:68:3) {<br>            opensslErrorStack: [ ‘error:03000086:digital envelope routines::initialization error’ ],<br>            library: ‘digital envelope routines’,<br>            reason: ‘unsupported’,<br>            code: ‘ERR_OSSL_EVP_UNSUPPORTED’<br>        }</p><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>今天在运行一个老师发来的vue项目时报了一个上面的错，大概的意思就是版本不支持，因为老师他发的这个vue项目npm版本是8.2.1的对应node的版本一般是16，17那会的。具体的可以查看 [官网](<a href="https://nodejs.org/en/download/releases">Previous Releases | Node.js (nodejs.org)</a>)。ok，那么接下来说说解决方案和我在解决的过程中碰到的问题吧。以及最后还有完整的部署流程。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>因为我用的node是18.16.1的，我刚开始以为是版本问题就想着说降下版本，但是等降了版本之后还是报错，当时懵了一下，不是说错误描述是版本问题嘛！然后后面通过查网上资料，发现问题就是版本问题，不过不是这么解决的。</p><p><span style="color:red">真正的解决方案：</span>只需要修改项目下的<code>package.json</code>文件，在<code>scripts</code>里每个操作设置一下<code>NODE_OPTIONS</code>即可。</p><p>修改前：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service serve&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service build&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;test:unit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service test:unit&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;test:e2e&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service test:e2e&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service serve&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service build&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;test:unit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service test:unit&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;test:e2e&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service test:e2e&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-cli-service lint&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>其实只修该一个也行，要用哪个就设置哪个。</p><p>最后测试：输入<code>npm run serve</code>运行成功。</p><h2 id="部署流程："><a href="#部署流程：" class="headerlink" title="部署流程："></a>部署流程：</h2><blockquote><p>先确保本地环境有node.js和npm（只要下载了node.js就有npm了）</p><p><strong>如何查看node：</strong></p><ul><li>在cmd命令窗口输入<code>node -v</code>查看版本，<code>npm -v</code>查看版本</li><li>如果有版本则说明有安装node.js</li></ul></blockquote><ol><li>首先拿到一个别人手里搞来的vue项目，现在文件夹下把<code>node_modules</code>这个文件夹和<code>package-lock.json</code>这个文件删了。</li><li>然后在这个项目的目录下打开cmd，输入命令清楚一下缓存，以防后续下载因冲突报错</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 清楚缓存<br>npm cache clean -force<br></code></pre></td></tr></table></figure><ol start="3"><li>然后重新在这个项目下下载node的的环境</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 重装依赖<br>npm install<br></code></pre></td></tr></table></figure><ol start="4"><li>最后就可以运行运行了</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 运行项目<br>npm run server<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然修改起来不是很麻烦，但是一个小小的地方也能导致整个程序崩溃，所以还是要细心，尤其是版本之间的兼容性问题。</p>]]></content>
    
    
    <categories>
      
      <category>DEBUG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot3学习笔记（一）--Spring3-核心特性--快速入门</title>
    <link href="/2023/06/25/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2023/06/25/Springboot3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89--Spring3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7--%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot3快速入门"><a href="#SpringBoot3快速入门" class="headerlink" title="SpringBoot3快速入门"></a>SpringBoot3快速入门</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><h4 id="1-1-环境要求"><a href="#1-1-环境要求" class="headerlink" title="1.1 环境要求"></a>1.1 环境要求</h4><table><thead><tr><th align="center">工具</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">Springboot</td><td align="center">3.x+</td></tr><tr><td align="center">IDEA</td><td align="center">2021.2.1+</td></tr><tr><td align="center">JDK</td><td align="center">17+</td></tr><tr><td align="center">Maven</td><td align="center">3.5+</td></tr><tr><td align="center">Tomcat</td><td align="center">10.0+</td></tr><tr><td align="center">Servlet</td><td align="center">5.0+</td></tr><tr><td align="center">GraalVM Community</td><td align="center">22.3+</td></tr><tr><td align="center">Native Build Tools</td><td align="center">0.0.19+</td></tr></tbody></table><h4 id="1-2-Springboot是什么"><a href="#1-2-Springboot是什么" class="headerlink" title="1.2 Springboot是什么"></a>1.2 Springboot是什么</h4><p>Springboot帮我们简单、快速地创建一个独立的生产级别的Spring应用。大多数Springboot应用只需要编写少量配置即可快速整合Spring平台以及第三方技术。</p><p><strong>特性：</strong></p><ul><li>能够<strong>快速创建</strong>独立Spring应用</li><li>直接<strong>嵌入</strong>Tomcat，Jetty和Undertow（无需部署war包）</li><li>提供可选的<strong>starter</strong>，简化应用整合</li><li>按需<strong>自动配置</strong>Spring以及第三方库</li><li>提供<strong>生产级特性</strong>：如 监控指标、健康检查、外部化部署等</li><li>无代码生成，<strong>无xml</strong></li></ul><p>总结：简化开发、简化配置、简化整合、简化部署、简化监控、简化运维</p><h3 id="2、快速体验"><a href="#2、快速体验" class="headerlink" title="2、快速体验"></a>2、快速体验</h3><h4 id="2-1-开发流程"><a href="#2-1-开发流程" class="headerlink" title="2.1 开发流程"></a>2.1 开发流程</h4><ol><li>创建maven项目，并继承springboot父maven</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--所有springboot项目木都必须继承spring-boot-starter-parent--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>导入场景（场景启动器）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--web开发场景启动器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>主程序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>编写业务类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello,Spring Boot&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>测试</li></ol><p>默认访问：localhost:8080</p><ol start="6"><li>打包（引入打包插件）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>mvn clean</code>先清除target文件，在使用<code>mvn package</code>把项目打成jar包</p><p><code>java -jar xxxxx.jar</code>启动项目</p><p>还可以使用Spring Initializer来快速创建</p><h3 id="3、应用分析"><a href="#3、应用分析" class="headerlink" title="3、应用分析"></a>3、应用分析</h3><h4 id="3-1-依赖管理机制"><a href="#3-1-依赖管理机制" class="headerlink" title="3.1 依赖管理机制"></a>3.1 依赖管理机制</h4><p><img src="/../img/mdImg/springboot/DependencyManagementMechanism.png" alt="依赖管理机制"></p><h4 id="3-2自动配置机制"><a href="#3-2自动配置机制" class="headerlink" title="3.2自动配置机制"></a>3.2自动配置机制</h4><h5 id="1、初步理解"><a href="#1、初步理解" class="headerlink" title="1、初步理解"></a>1、初步理解</h5><ul><li><p>自动配置的Tomcat、SpringMVC等</p><ul><li><p>导入场景，容器中就会自动配置这个场景的核心组件。</p></li><li><p>以前：DispatcherServlet、ViewResolver、CharacterEncodingFilter …</p></li><li><p>现在：自动配置好这些组件</p></li><li><p>验证：容器中有什么组件，就具有什么功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// java10：局部变量类型的自动推断</span><br>    <span class="hljs-type">var</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> SpringApplication.run(MainApplication.class, args);<br><br>    <span class="hljs-comment">// 1、获取容器中所有组件的名字</span><br>    String[] names = ioc.getBeanDefinitionNames();<br>    <span class="hljs-comment">// spring boot把以前配置的核心组件现在都配置好了</span><br>    <span class="hljs-keyword">for</span> (String name : names) &#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>默认的包扫描规则</p><ul><li><p><code>@SpringBootApplication</code>标注的类就是主程序类</p></li><li><p>SpringBoot只会扫描主程序所在的包及其下面的子包，自动的component-scan功能</p></li><li><p>自定义扫描路经</p><ul><li><code>@SpringBootApplication(scanBasePackages = &quot;xxx.xxx&quot;)</code></li><li><code>@ComponentScan(xxx.xxx)</code>：直接指定扫描的路径</li></ul></li><li><p>配置默认值</p><ul><li>配置文件的所有配置项是和某个类的对象值进行一一绑定的</li><li>绑定了配置文件中每一项的值的类：<strong>配置属性类</strong></li><li>比如：<ul><li><code>ServerProperties</code>绑定了所有Tomcat服务器有关的配置</li><li><code>MultipartProperties</code>绑定了所有文件上传的相关的配置</li><li>其他参照[官网文档](<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">Common Application Properties (spring.io)</a>)</li></ul></li></ul></li><li><p>按需加载自动配置</p><ul><li>导入场景<code>spring-boot-starter-web</code></li><li>场景启动器除了会导入相关功能依赖，还导入了一个<code>spring-boot-starter</code>，是所有的<code>starter</code>的<code>starter</code>，基础核心<strong>starter</strong></li><li><code>spring-boot-starter</code>还导入了一个包，<code>spring-boot-autoconfigure</code>。包里面都是各种场景的<code>AutoConfiguration</code><strong>自动配置类</strong></li><li>虽然全场景的自动配置都在<code>spring-boot-autoconfigure</code>这个包，但是不全是开启的</li></ul></li></ul></li></ul><h5 id="2、完整流程"><a href="#2、完整流程" class="headerlink" title="2、完整流程"></a>2、完整流程</h5><p><img src="/../img/mdImg/springboot/AutoConfigurationCompleteProcess.png" alt="自动配置机制流程"></p><ul><li>一：导入<code>starter</code>：比如<code>starter-web</code>就是导入了web开发场景<ul><li>1、每个<code>starter</code>都引入了<code>spring-boot-autoconfigure</code>包</li><li>2、<code>spring-boot-autoconfigure</code>里面囊括了所有场景的所有配置</li><li>3、只要这个包下的所有类都能生效，相当于springBoot官方写好的所有整合功能生效了</li><li>4、SpringBoot默认扫描不到<code>spring-boot-autoconfigure</code>下写好的所有配置类</li></ul></li><li>二：主程序：<code>@SpringBootApplication</code><ul><li>1、<code>@SpringBootApplication</code>由三个注解组成<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code></li><li>2、SpringBoot默认只扫描自己主程序所在的包及其下面的子包，扫描不到<code>spring-boot-autoconfigure</code>包中官方写好的配置类</li><li>3、<code>@EnableAutoConfiguration</code>：SpringBoot开启自动配置的核心<ul><li>1、是由<code>@Import(&#123;AutoConfigurationImportSelector.class&#125;)</code>提供功能：批量给容器中导入组件</li><li>2、SpringBoot启动会默认加载146个配置类（版本3.1.0）</li><li>3、这146个来自于<code>METAINF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></li><li>4、按需生效：并不是这<code>146</code>个自动装配类都能生效，每一个自动装配类都有条件注解<code>@ConditionalOnXxx</code>,只有条件成立，才能生效</li></ul></li></ul></li><li>三：写业务，全程无需关心各种整合（底层都整合好了，且生效了）</li></ul><h5 id="3、如何学好SpringBoot"><a href="#3、如何学好SpringBoot" class="headerlink" title="3、如何学好SpringBoot"></a>3、如何学好SpringBoot</h5><blockquote><p>框架的框架，底层基于Spring。</p></blockquote><ol><li><p>理解<strong>自动装配原理</strong></p><p>a、<strong>导入starter</strong> –&gt; 生效xxxAutoConfiguration –&gt; <strong>组件</strong> –&gt; xxxPreperties –&gt; <strong>配置文件</strong></p></li><li><p>理解<strong>其他框架底层</strong></p></li><li><p>可以随时<strong>定制化任何组件</strong></p><p>a、改配置文件</p><p>b、自定义组件</p></li></ol><p>核心：</p><ul><li>这个场景自动配置导入了哪些组件，我们能不能Autowired进来使用</li><li>能不能通过修改配置改变组件的一些默认参数</li><li>需不需要完全定义这个组件</li><li><strong>场景定制化</strong></li></ul><h3 id="4、核心技能"><a href="#4、核心技能" class="headerlink" title="4、核心技能"></a>4、核心技能</h3><h4 id="4-1-常用注解"><a href="#4-1-常用注解" class="headerlink" title="4.1. 常用注解"></a>4.1. 常用注解</h4><blockquote><p>SpringBoot摒弃xml配置方式，改为全注解驱动</p></blockquote><h5 id="1、组件注解"><a href="#1、组件注解" class="headerlink" title="1、组件注解"></a>1、组件注解</h5><p><code>@Configuration</code>：替代以前的xml配置文件，配置类本身也是容器中的组件<br><code>@SpringBootConfiguration</code>：与@Configuration无区别，就是名字不一样<br><code>@Bean</code>：替代以前的Bean标签，组件在容器中的名字默认是方法名，如果修改了注解的值，则名字是注解的值<br><code>@Scope</code>：替代以前Bean标签里的scpoe属性，设置组件是否为单实例或多实例（默认都是单实例的）<br><code>@Import</code>：导入第三方的的组件到 ioc 容器中，组件名默认是全类名<br>@Controller、@Service、@Repository、@Component、@ComponentScan</p><p>使用步骤：</p><ol><li>编写一个配置类使用@Configuration修饰</li><li>在配置类中，自定义方法给容器中注册组件，配合@Bean</li><li>或使用@Import导入第三方的组件</li></ol><h5 id="2、条件注解"><a href="#2、条件注解" class="headerlink" title="2、条件注解"></a>2、条件注解</h5><blockquote><p>如果注解指定的条件成立，则触发指定行为</p></blockquote><p><span style="color:red">@ConditionalOnXxx</span></p><p><span style="color:blue">@ConditionalOnClass：如果类路径中存在这个类，则触发指定行为</span></p><p><span style="color:blue">@ConditionalOnMissClass：如果类路径中不存在这个类，则触发指定行为</span></p><p><span style="color:blue">@ConditionalOnBean：如果容器中存在这个Bean，则触发指定行为</span></p><p><span style="color:blue">@ConditionalOnMissBean：如果容器中不存在这个Bean，则触发指定行为</span></p><blockquote><p>场景：</p><ul><li>如果存在<code>FastsqlException</code>这个类，给容器中放一个<code>cat</code>组件，名为cat01，否则就在容器中放一个<code>Dog</code>组件，名为dog01</li><li>如果系统中有<code>dog01</code>这个组件，就在容器中放一个User组件，名为zhangsan，否则，就名叫lisi<br>实现：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig2</span> &#123;<br><br>    <span class="hljs-meta">@ConditionalOnClass(name = &quot;com.alibaba.druid.FastsqlException&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">cat01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@ConditionalOnMissingClass(value = &quot;com.alibaba.druid.FastsqlException&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">dog01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@ConditionalOnBean(name = &quot;dog01&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">zhangsan</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;dog01&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">lisi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></blockquote><h5 id="3、属性绑定"><a href="#3、属性绑定" class="headerlink" title="3、属性绑定"></a>3、属性绑定</h5><p>@ConfigurationProperties<br>@EnableConfigurationProperties ：开启某个类与配置文件的绑定</p><blockquote><p>在容器中任意组件（Bean）的<strong>属性值</strong>和<strong>配置文件</strong>的配置项的值进行绑定</p><p>1、给容器中注册组件（@Component、@Bean）</p><p>2、使用@ConfigurationProperties 声明组件和配置文件的哪些配置项进行绑定</p></blockquote><h4 id="4-2-YAML配置文件"><a href="#4-2-YAML配置文件" class="headerlink" title="4.2. YAML配置文件"></a>4.2. YAML配置文件</h4><p>加载顺序：yml &gt; yaml &gt; properties</p><blockquote><p>痛点：SpringBoot集中化管理配置，<code>application.properties</code></p><p>问题：配置多以后很难阅读和修改，层次结构辨识度不高</p></blockquote><blockquote><p><strong>YAML</strong> 目前的官方全称为 “<strong>YAML Ain’t Markup Language</strong>（YAML 不是标记语言）”，但有意思的是，其实 YAML 最初的含义是 “<strong>Yet Another Markup Language</strong>（还是一种标记语言）”</p></blockquote><blockquote><p>设计目标：为了<strong>方便阅读</strong></p><p>层次分明，更适合做配置文件</p><p>使用.yaml和.yml作为文件后缀</p></blockquote><h5 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h5><ul><li>大小写敏感</li><li>使用缩进表示层级关系，k:v，使用空格分割k，v</li><li>缩进时不允许使用Tab，只允许<strong>使用空格</strong></li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><strong># 表示注释</strong>，从这个字符一直到行尾，都会被解析器忽略</li></ul><p>支持的写法</p><ul><li>对象：<strong>键值对</strong>的集合，如：映射（map）&#x2F;哈希（hash）&#x2F;字典（dictionary）</li><li>数组：一组按次序排列的值，如：序列（sequence）&#x2F;列表（list）</li><li>纯量：单个的、不可分割的值，如：字符串、数字、bool、日期</li></ul><h5 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h5><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span>  <span class="hljs-comment">// 和配置文件中所有以person前缀进行绑定</span><br><span class="hljs-meta">@Data</span>  <span class="hljs-comment">// 自动生成JavaBean属性的getter/setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> Boolean like;<br>    <span class="hljs-keyword">private</span> Child child;<br>    <span class="hljs-keyword">private</span> List&lt;Dog&gt; dogs;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Cat&gt; cats;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; text;  <span class="hljs-comment">// 集合类型的</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>properties文件和yaml文件都是配置文件</p></blockquote><p>properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">person.name</span>=<span class="hljs-string">zhangsan</span><br><span class="hljs-attr">person.age</span>=<span class="hljs-string">18</span><br><span class="hljs-attr">person.birthday</span>=<span class="hljs-string">2001/10/10 10:10:10</span><br><span class="hljs-attr">person.like</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">person.child.name</span>=<span class="hljs-string">lisi</span><br><span class="hljs-attr">person.child.age</span>=<span class="hljs-string">12</span><br><span class="hljs-attr">person.child.birthday</span>=<span class="hljs-string">2008/10/10 10:10:10</span><br><span class="hljs-attr">person.child.text[0]</span>=<span class="hljs-string">abc</span><br><span class="hljs-attr">person.child.text[1]</span>=<span class="hljs-string">def</span><br><span class="hljs-attr">person.dogs[0].name</span>=<span class="hljs-string">xiaob</span><br><span class="hljs-attr">person.dogs[1].name</span>=<span class="hljs-string">xiaoh</span><br><span class="hljs-attr">person.cats.c1.name</span>=<span class="hljs-string">xiaol</span><br><span class="hljs-attr">person.cats.c2.name</span>=<span class="hljs-string">xiaog</span><br></code></pre></td></tr></table></figure><p>yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zhangs</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">birthday:</span> <span class="hljs-number">2001</span><span class="hljs-string">/10/10</span> <span class="hljs-number">10</span><span class="hljs-string">:10:10</span><br>  <span class="hljs-attr">like:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">child:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">lisi</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">birthday:</span> <span class="hljs-number">2008</span><span class="hljs-string">/10/10</span> <span class="hljs-number">10</span><span class="hljs-string">:10:10</span><br>    <span class="hljs-attr">text:</span> [ <span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span> ]<br>  <span class="hljs-attr">dogs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">xb</span><br>  <span class="hljs-attr">cats:</span><br>    <span class="hljs-attr">c1:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">xx</span><br>    <span class="hljs-attr">c2:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">xy</span>&#125;  <span class="hljs-comment"># 对象也可这么表示</span><br></code></pre></td></tr></table></figure><h5 id="3、使用细节"><a href="#3、使用细节" class="headerlink" title="3、使用细节"></a>3、使用细节</h5><ul><li>驼峰命名的推荐使用 - 连接。比如：birthDay &#x3D;&#x3D; birth-day</li><li>文本：<ul><li><strong>单引号</strong>不会转义【认为 \n 为普通字符】</li><li><strong>双引号</strong>会转义【 \n 为<strong>换行符</strong>】</li></ul></li><li>大文本：<ul><li><code>|</code>开头，大文本写在下层，保留文本格式，换行符正确显示</li><li><code>&gt;</code>开头，大文本写在下层，折叠换行符，以空格代替</li></ul></li><li>多文档合并<ul><li>使用<code>---</code>可以把多个yaml文档合并在一个文档中，每个文档依然内容独立</li></ul></li></ul><h4 id="4-3-日志配置"><a href="#4-3-日志配置" class="headerlink" title="4.3. 日志配置"></a>4.3. 日志配置</h4><blockquote><p>规范：项目开发不要编写<code>System.out.println() </code>，应该用<strong>日志</strong>记录信息</p></blockquote><p><img src="/../img/mdImg/springboot/LogFacadeAndlogImplementation.png" alt="日志门面和日志实现"></p><h5 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h5><ol><li>Spring使用<code>commons-logging</code>作为内部日志，但底层日志实现是开放的。可对接其他日志框架。</li><li>支持<code>java.util.logging</code>、<code>log4j</code>、<code>logback</code>。SpringBoot提供了默认的控制台输出配置，也可以配置输出文件。</li><li><code>logback</code>是默认使用的</li><li>SpringBoot使用的是<code>slf4j</code>+<code>logback</code>组合</li></ol><p>SpringBoot怎么把日志默认配置好的</p><ol><li>每个<code>starter</code>场景，都会导入一个核心场景<code>spring-boot-starter</code></li><li>核心场景引入了日志的所有功能<code>spring-boot-starter-longging</code></li><li>默认使用了<code>slf4j</code>+<code>logback</code>组合作为默认底层日志</li><li>日志系统一启动就要用，<code>xxxAutoConfiguration</code>是系统启动好后，再用到的自动配置组件</li><li>日志是利用监听器机制配置好的，<code>ApplicationListener</code></li><li>日志所有的配置都可以通过配置文件修改实现</li></ol><h5 id="2、日志格式"><a href="#2、日志格式" class="headerlink" title="2、日志格式"></a>2、日志格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">2023-06-22T23:28:38.274+08:00  INFO 17680 --- [           main] com.huang.Boot303LoggingApplication      : No active profile set, falling back to 1 default profile: &quot;default&quot;<br>2023-06-22T23:28:39.275+08:00  INFO 17680 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)<br></code></pre></td></tr></table></figure><p>默认输出格式：</p><ul><li>时间日期：毫秒级精度</li><li>日志级别：<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code>、<code>TRACE</code></li><li>进程ID</li><li><code>---</code>：消息分隔符</li><li>线程名：使用[]包括</li><li>Logger名：通常为产生日志的类名</li><li>消息：日志记录的内容</li></ul><p>注意：logback没有<code>FATAL</code>级别，对应的是<code>ERROR</code></p><h5 id="3、记录日志"><a href="#3、记录日志" class="headerlink" title="3、记录日志"></a>3、记录日志</h5><ul><li><p>方案一：可以在类中定义变量来记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br></code></pre></td></tr></table></figure></li><li><p>方案二：使用lombak注解<code>@Slf4j</code></p></li></ul><h5 id="4、日志级别"><a href="#4、日志级别" class="headerlink" title="4、日志级别"></a>4、日志级别</h5><ul><li>由低到高：<code>ALL</code>、<code>TRACE</code>、<code>DEBUG</code>、<code>INFO</code>、<code>WARN</code>、<code>ERROR</code>、<code>FATAL</code>、<code>OFF</code>；<ul><li><strong>只会打印指定级别及以上级别的日志</strong></li><li>ALL：打印所有日志</li><li>TRACE：追踪框架详细流程日志，一般不使用</li><li>DEBUG：开发调试细节日志</li><li>INFO：关键信息日志</li><li>WARN：警告但不是错误的信息日志</li><li>ERROR：业务错误日志</li><li>FATAL：致命错误日志，比如JVM系统奔溃</li><li>OFF：关闭所有日志记录</li></ul></li><li>不指定级别的所有类，都是用root指定的级别作为默认级别</li><li><span style="color:red">SpringBoot日志默认级别是INFO</span></li></ul><p>在<code>application.yaml</code>中配置<code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code>指定日志级别</p><h5 id="5、日志分组"><a href="#5、日志分组" class="headerlink" title="5、日志分组"></a>5、日志分组</h5><p>比较有用的技巧。</p><p>将相关的<strong>logger</strong>分组在一起，统一配置，SpringBoot也支持。比如：Tomcat相关的日志统一设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.grougl.tomcat</span>=<span class="hljs-string">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span><br><span class="hljs-attr">logging.level.tomcat</span>=<span class="hljs-string">trace</span><br></code></pre></td></tr></table></figure><p>SpringBoot 预定义两个组</p><table><thead><tr><th align="center">Name</th><th align="left">Loggers</th></tr></thead><tbody><tr><td align="center">web</td><td align="left"><code>org.springframework.core.codec,org.springframework.http,</code><br /><code>org.springframework.web,</code><br /><code>org.springframework.boot.actuate.endpoint.web</code>,<br /><code>org.springframework.boot.web.servlet.ServletContextinitializerBeans</code></td></tr><tr><td align="center">sql</td><td align="left"><code>org.springframework.jdbc.core</code>, <br /><code>org.hibernate.SQL</code>,<br /><code> org.jooq.tools.LoggerListener</code></td></tr></tbody></table><h5 id="6、文件输出"><a href="#6、文件输出" class="headerlink" title="6、文件输出"></a>6、文件输出</h5><p>SpringBoot默认把日志打印到控制台，如果想将日志文件保存到磁盘，可以在<code>application.yaml</code>中添加<code>logging.file.name</code>或则<code>logging.file.path</code>配置项</p><table><thead><tr><th align="center">logging.file.name</th><th align="center">logging.file.path</th><th align="center">示例</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">未指定</td><td align="center">未指定</td><td align="center"></td><td align="center">仅控制台输出</td></tr><tr><td align="center"><strong>指定</strong></td><td align="center">未指定</td><td align="center">my.log</td><td align="center">在此项目下出现<code>my.log</code>文件，也可<code>加路径</code>将其指定到其他磁盘上</td></tr><tr><td align="center">未指定</td><td align="center"><strong>指定</strong></td><td align="center">D:&#x2F;</td><td align="center">写入指定目录，文件名为<code>spring.log</code></td></tr><tr><td align="center"><strong>指定</strong></td><td align="center"><strong>指定</strong></td><td align="center"></td><td align="center">以<code>logging.file.name</code>为准</td></tr></tbody></table><h5 id="7、文件归档与滚动切割"><a href="#7、文件归档与滚动切割" class="headerlink" title="7、文件归档与滚动切割"></a>7、文件归档与滚动切割</h5><blockquote><p>归档：每一天的日志单独存到一个文档中。</p><p>切割：每个文件10MB，如果超过则切割成另一个文件。</p></blockquote><ul><li>每天的日志应该独立分割出来存档，如果使用<code>logback</code>（SpringBoot）默认整合，可以通过<code>applicaiton.preperties/yaml</code>文件指定日志滚动规则</li><li>如果是其他日志系统，需自行配置配置文件（添加<code>log4j2.xml</code>或<code>log4j2-spring.xml</code>）</li><li>支持的滚动规则设置如下：</li></ul><table><thead><tr><th align="left">配置项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>logging.logback.rollingpolicy.file-name-pattern</code></td><td align="left">日志存档的文件名称格式（默认值：<code>$&#123;LOG_FILE&#125;.%d[yyyy-MM-dd].%i.gz</code>）</td></tr><tr><td align="left"><code>logging.logback.rollingpolicy.max-file-size</code></td><td align="left">存档前，每个日志文件的最大大小（默认值：10MB）</td></tr><tr><td align="left"><code>logging.logback.rollingpolicy.clean-history-on-start</code></td><td align="left">应用启动是是否清楚以前存档（默认值：<code>false</code>）</td></tr><tr><td align="left"><code>logging.logback.rollingpolicy.total-size-cap</code></td><td align="left">日志文件被删除之前，可以容纳的最大大小（默认值：0B）.设置1GB则磁盘存储超过1BG日志后就会删除日志文件</td></tr><tr><td align="left"><code>logging.logback.rollingpolicy.max-history</code></td><td align="left">日志文件保存的最大的天数（默认值：7天）</td></tr></tbody></table><h5 id="8、自定义配置"><a href="#8、自定义配置" class="headerlink" title="8、自定义配置"></a>8、自定义配置</h5><p>通常我们配置<code>applicaiton.preperties</code>就够了。当然也可以自定义，比如：</p><table><thead><tr><th>日志系统</th><th>自定义</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>、<br /><code>logback-spring.groovy</code>、<br /><code>logback.xml</code><br /><code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> 或者 <code>log4j2.xml</code></td></tr><tr><td>JDK(Java Util Logging)</td><td><code>logging-properties</code></td></tr></tbody></table><p>如果可能，建议使用<code>-spring</code>变量（例如：<code>logback-spring.xml</code> 而不是<code>logback.xml</code>）。如果使用标准配置文件，spring无法完全控制日志初始化。</p><h5 id="9、切换日志组合"><a href="#9、切换日志组合" class="headerlink" title="9、切换日志组合"></a>9、切换日志组合</h5><p>要先使用第三方日志框架：</p><p>第一步要先排除自己默认的日志框架</p><p>第二步导入第三方框架的依赖坐标</p><p>第三步配置日志框架的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>log4j2支持yaml和json格式的配置文件</p><table><thead><tr><th>格式</th><th>依赖</th><th>文件名</th></tr></thead><tbody><tr><td>YAML</td><td>com.fastterxml.jackson.core:jackson-databind +<br />com.fasterxml.jackson.dataformat.jackson-dataformat-yaml</td><td>log4j2.yaml + log4j2.yml</td></tr><tr><td>JSON</td><td>com.fasterxml.jackson.core:jackson-databind</td><td>log4j2.json + log4j2.jsn</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法---线性结构</title>
    <link href="/2023/06/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95--%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/"/>
    <url>/2023/06/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95--%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是数据结构与算法"><a href="#什么是数据结构与算法" class="headerlink" title="什么是数据结构与算法"></a>什么是数据结构与算法</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><blockquote><p>数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313?fromModule=lemma_inlink">数据元素</a>的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。</p></blockquote><p>数据结构有哪些，看下图</p><p><img src="/../img/mdImg/dataStructure/dataStructureType.png" alt="数据结构类型"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><blockquote><p>算法是利用计算机解决问题的处理步骤，简而言之，<strong>算法就是解决问题的步骤</strong></p></blockquote><p>不同的算法，执行效率有很大的差别。衡量一个算法的复杂程度需要用到以下两个指标：</p><ul><li>时间复杂度T(n)：算法程序在执行时消耗的时间长度，一帮与输入数据的规模n有关。</li><li>空间复杂度S(n)：算法程序在执行时占用的存储单元长度，同样与数据的输入规模有关，大部分情况下，我们采用空间换时间。</li></ul><p>以下是常见的各种复杂度</p><table><thead><tr><th align="center">函数</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">O(1)</td><td align="center">常数阶</td><td align="center">最快的算法描述</td></tr><tr><td align="center">O(log<del>2</del>n)</td><td align="center">对数阶</td><td align="center">仅次于常数阶，比如二分搜索算法</td></tr><tr><td align="center">O(n)</td><td align="center">线性阶</td><td align="center">线性表的插入、删除，包括动态规划能够达到线性阶</td></tr><tr><td align="center">O(n log<del>2</del>n)</td><td align="center">线性对数阶</td><td align="center">相当于在对数阶的基础上再套了一层线性阶循环</td></tr><tr><td align="center">$O(n^2)$</td><td align="center">平方阶</td><td align="center">需要进行两轮循环的，一般都为平方阶。比如：冒泡排序</td></tr><tr><td align="center">$O(n^3)$</td><td align="center">立方阶</td><td align="center">三层循环。比如：暴力枚举</td></tr><tr><td align="center">$O(2^n)$</td><td align="center">指数阶</td><td align="center">递归，比如：斐波那契数递归算</td></tr><tr><td align="center">$O(n!)$</td><td align="center">阶乘</td><td align="center">比指数阶还复杂，一般很少算法到达</td></tr></tbody></table><h3 id="案例：二分搜索"><a href="#案例：二分搜索" class="headerlink" title="案例：二分搜索"></a>案例：二分搜索</h3><p>现有一个从小到大的排序数组，给你一个目标值<code>target</code>，现请你找到数组中的对应下标，如果没有，则返回-1</p><p>方法一：</p><p>暴力循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> numsSize,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numsSize; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(nums[i]==target) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：</p><p>二分查找–循环（推荐）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> numsSize,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = numsSize - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(left &gt; right)&#123;<br>        <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid] == target)&#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>二分查找–递归（推荐）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;<br>    <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(nums[mid] == target) <span class="hljs-keyword">return</span> mid;<br>    <span class="hljs-keyword">if</span>(nums[mid] &lt; target) <br>        <span class="hljs-keyword">return</span> binarySearch(nums, target, mid + <span class="hljs-number">1</span>, right);<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> binarySearch(nums, target, left,  mid - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> numsSize,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-keyword">return</span> binarySearch(nums, target, <span class="hljs-number">0</span>, numsSize - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>我们希望将这些数据顺序存放，并且支持在某个位置插入一条数据、删除一条数据、修改一些数据，这时候，数组就显得乏力了。因此需要使用更加高级的数据结构，就是线性表（Linear List）</p><blockquote><p>线性表是由一个类型的数据元素构成的有序存放的线性结构。线性表中元素的个数为线性表的长度，表的起始位称为表头，结束位称为表尾。当表中没有一个数据时，称为空表。</p></blockquote><p>线性表一包含以下功能：</p><ul><li><strong>初始化线性表：</strong>将一个线性表初始化，得到一个空表。</li><li><strong>获取指定位置的元素：</strong>直接获取线性表指定位置 $i$ 上的元素</li><li><strong>获取元素位置：</strong>获取某个元素在线性表上的位置 $i$</li><li><strong>插入元素：</strong>在指定位置 $i$ 上插入一个元素</li><li><strong>删除元素：</strong>删除指定位置 $i$ 上的一个元素</li><li><strong>获取长度：</strong>返回线性表的长度</li></ul><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>前面我们说到，既然数组无法实现这样的高级表结构，那么我就基于数组，对其进行强化，也就是说，我们存放数据还是使用数组,但是我们可以为其编写一些额外的操作来强化为线性表，像这样底层依然采用顺序存储实现的线性表，我们称为顺序表。</p><p>这里可以定义一个新的结构体类型，将</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span>&#123;</span><br>    E * <span class="hljs-built_in">array</span>;    <span class="hljs-comment">// 表示指向顺序表的底层数组</span><br>    <span class="hljs-type">int</span> capacity; <span class="hljs-comment">// 表示数组的容量</span><br>    <span class="hljs-type">int</span> size;  <span class="hljs-comment">// 表示表中元素的数量</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>初始化线性表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> * <span class="hljs-title">ArrayList</span>;</span>  <span class="hljs-comment">// 起别名</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = molloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">10</span>);<span class="hljs-comment">// 给array分配内存空间</span><br><span class="hljs-built_in">list</span>-&gt;capacity = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 设置容量大小为10</span><br>    <span class="hljs-built_in">list</span>-&gt;size = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 设置元素个数为0，因为没有插入值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还有一种情况需要考虑，如果申请内存空间失败，需要返回一个结果告诉使用者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = molloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 如果申请内存失败</span><br><span class="hljs-built_in">list</span>-&gt;capacity = <span class="hljs-number">10</span>;  <br>    <span class="hljs-built_in">list</span>-&gt;size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 正常返回1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样一个简单的顺序表就定义好了，我们可以通过<code>initList</code>函数来初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> <span class="hljs-title">list</span>;</span><span class="hljs-comment">// 创建新的结构体变量</span><br>    <span class="hljs-keyword">if</span>(initList(&amp;<span class="hljs-built_in">list</span>))&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化成功，可进行后续操作！&quot;</span>)<br>        ...<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化失败！&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>插入数据到线性表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>,E element,<span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-comment">// 判断插入的位置是否越界</span><br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size + <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果顺序表里的元素已经到达底层数组的最大值，此时需扩容</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;size == <span class="hljs-built_in">list</span>.capacity)&#123;<br>        <span class="hljs-comment">// 我们先计算一下容器的大小，这里用的1.5倍</span><br>        <span class="hljs-type">int</span> newCapacity = <span class="hljs-built_in">list</span>-&gt;capacity + (<span class="hljs-built_in">list</span>-&gt;capacity &gt;&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 这里使用新的函数realloc重新申请内存空间</span><br>        E * newArray = <span class="hljs-built_in">realloc</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>, newCapacity * <span class="hljs-keyword">sizeof</span>(E));<br>        <span class="hljs-comment">// 如果申请失败则返回空</span><br>        <span class="hljs-keyword">if</span> (newArray == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span> = newArray;<br>        <span class="hljs-built_in">list</span>-&gt;capacity = newCapacity;<br>    &#125;<br>    <span class="hljs-comment">// 在指定位置插入数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-built_in">list</span>-&gt;size; i &gt; index - <span class="hljs-number">1</span>; --i)&#123;<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-comment">// 首先刚初始化线性表时，插入数据</span><br>    <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index - <span class="hljs-number">1</span>] = element;<br>    <span class="hljs-built_in">list</span>-&gt;size++;  <span class="hljs-comment">// 表中元素加一</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>删除数据</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> index)</span><br>&#123;<br>    <span class="hljs-comment">// 判断越界条件</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>-&gt;size)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 删除数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index - <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">list</span>-&gt;size--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取元素个数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>-&gt;size;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取指定位置数据</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">E <span class="hljs-title function_">get</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>,<span class="hljs-type">int</span> index)</span>&#123;<br>    <span class="hljs-comment">// 如果越界则返回-1</span><br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">1</span> || index &gt; <span class="hljs-built_in">list</span>.size)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[index<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取指定数据的索引</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(ArrayList <span class="hljs-built_in">list</span>,E element)</span>&#123;<br>    <span class="hljs-comment">// 遍历，如果找到返回索引下标，如果没找到就返回-1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size; ++i)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>-&gt;<span class="hljs-built_in">array</span>[i] == element)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表不同于顺序表，顺序表底层采用数组作为存储容器，需要分配一块连续且完整的内存空间进行使用，而链表则不需要，它通过一个指针来连接各个分散的结点，形成了一个链状的结构，每个结点存放一个元素，以及一个指向下一个结点的指针，通过这样一个一个相连，最后形成了链表。它不需要申请连续的空间，只需要按照顺序连接即可，虽然物理上可能不相邻，但是在逻辑上依然是每个元素相邻存放的，这样的结构叫做链表（单链表)。</p><p>链表分为带头结点的链表和不带头结点的链表。戴头结点的链表就是会有一个头结点指向后续的整个链表，但是头结点不存放数据。如下图</p><p><img src="/../img/mdImg/dataStructure/HeadedChainedTables.png" alt="带头链表"></p><p>而不带头结点的链表就是第一个节点就是存放数据的结点，一般设计链表都会采用带头结点的结构，因为操作更加方便。如下图</p><p><img src="/../img/mdImg/dataStructure/ChainTableWithoutHeaders.png" alt="不带头链表"></p><p>下面我们写一个带头节点的链表并且初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;  <span class="hljs-comment">// 保存当前元素</span><br>    Node next;  <span class="hljs-comment">// 指向下一个结点</span><br>&#125;;<br><br><span class="hljs-comment">// 初始化函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(Node node)</span> &#123;<br>    node-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着我们来设计链表的插入和删除，前面顺序表是通过移动数据的位置来进行插入和删除，那么链表插入应该怎么样呢？</p><ul><li>首先我们得让新插入结点的指针指向当前位置结点的地址，使当前结点变为新的结点的<strong>后继结点</strong></li><li>然后上一个结点的指针指向新插入的结点的地址，使上一个结点变为新的结点的<strong>前驱结点</strong></li></ul><p>插入结点具体代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 插入结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 判断是否越界</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 到指定位置去</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-comment">// 判断是否越界</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 申请结点</span><br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-comment">// 判断结点是否为空</span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    node-&gt;element = element;<br>    <span class="hljs-comment">// 连接结点</span><br>    node-&gt;next = head-&gt;next;<br>    head-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除结点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 删除结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-comment">// 判断是否越界</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 先用临时变量存放待删除结点，之后释放</span><br>    Node temp = head-&gt;next;<br>    head-&gt;next = head-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(temp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>查找指定位置数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取指定位置的数据</span><br>E <span class="hljs-title function_">get</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">while</span> (--index);<br>    <span class="hljs-keyword">return</span> head-&gt;element;<br>&#125;<br></code></pre></td></tr></table></figure><p>查找对应元素的位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(Node head, E element)</span> &#123;<br>    <span class="hljs-comment">// 因为头节点没数据，所以先移到第一个节点</span><br>    head = head-&gt;next;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 计数器，求该数据在链表的位置</span><br>    <span class="hljs-keyword">while</span> (head) &#123;<br>        <span class="hljs-keyword">if</span> (head-&gt;element == element) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取链表长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(Node head)</span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(head-&gt;next)&#123;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by User on 2023/6/22.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;  <span class="hljs-comment">// 保存当前元素</span><br>    Node next;  <span class="hljs-comment">// 指向下一个结点</span><br>&#125;;<br><br><span class="hljs-comment">// 初始化函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(Node node)</span> &#123;<br>    node-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 插入结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 判断是否越界</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 到指定位置去</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-comment">// 判断是否越界</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 申请结点</span><br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-comment">// 判断结点是否为空</span><br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    node-&gt;element = element;<br>    <span class="hljs-comment">// 连接结点</span><br>    node-&gt;next = head-&gt;next;<br>    head-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除结点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-comment">// 判断是否越界</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 先用临时变量存放待删除结点，之后释放</span><br>    Node temp = head-&gt;next;<br>    head-&gt;next = head-&gt;next-&gt;next;<br>    <span class="hljs-built_in">free</span>(temp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取指定位置的数据</span><br>E <span class="hljs-title function_">get</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">while</span> (--index);<br>    <span class="hljs-keyword">return</span> head-&gt;element;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">(Node head, E element)</span> &#123;<br>    head = head-&gt;next;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (head) &#123;<br>        <span class="hljs-keyword">if</span> (head-&gt;element == element) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sizeList</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (head-&gt;next) &#123;<br>        head = head-&gt;next;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-comment">// 打印</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">while</span> (head-&gt;next) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, head-&gt;element);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initList(&amp;head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sizeList(&amp;head));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; ++i) &#123;<br>        insertList(&amp;head, i * <span class="hljs-number">100</span>, i);<br>    &#125;<br>    printList(&amp;head);<br>    deleteList(&amp;head, <span class="hljs-number">2</span>);<br>    printList(&amp;head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, get(&amp;head, <span class="hljs-number">2</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, getIndex(&amp;head, <span class="hljs-number">300</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sizeList(&amp;head));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题：</strong>什么情况使用顺序表，什么情况使用链表呢？</p><ul><li>通过分析顺序表和链表的特性我们不难发现，链表在随机访问元素时，需要通过遍历来完成，而顺序表则利用数组的特性直接访问得到，所以，当我们读取数据多于插入或是删除数据的情况下时，使用顺序表会更好。</li><li>而顺序表在插入元素时就显得有些鸡肋了，因为需要移动后续元素，整个移动操作会浪费时间，而链表则不需要，只需要修改结点指向即可完成插入，所以在频繁出现插入或删除的情况下，使用链表会更好。</li></ul><p>总结：当<strong>读大于写</strong>时，顺序表比链表好；当<strong>写大于读</strong>时，链表比顺序表好。</p><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>前面我们介绍了单链表，通过这样的链式存储，我们不用再像顺序表那样一次性申请一段连续的空间，而是只需要单独为结点申请内存空间，同时在插入和删除的速度上也比顺序表轻松。不过有一个问题就是，如果我们想要操作某一个结点，比如删除或是插入，那么由于单链表的性质，我们只能先去找到它的前驱结点，才能进行。</p><p>为了解决这种查找前驱结点非常麻烦的问题，我们可以让结点不仅保存指向后续结点的指针，同时也保存指向前驱结点的指针;</p><p><img src="/../img/mdImg/dataStructure/DoublyLinkedList.png" alt="双向链表"></p><p>下面我们尝试实现下双向链表，首先自定义好结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;<br>    Node prev;<br>    Node next;<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后初始化方法，初始化时前驱和后继都要设置为NULL：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 初始化方法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(Node head)</span> &#123;<br>    head-&gt;prev = head-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initList(&amp;head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 插入操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 首先判断是否越界</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 移到指定位置</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    node-&gt;element = element;<br><br>    <span class="hljs-keyword">if</span> (head-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        node-&gt;next = head-&gt;next;<br>        head-&gt;next-&gt;prev = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    head-&gt;next = node;<br>    node-&gt;prev = head;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 删除操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    Node temp = head-&gt;next;<br>    <span class="hljs-keyword">if</span> (head-&gt;next-&gt;next) &#123;<br>        head-&gt;next = temp-&gt;next;<br>        temp-&gt;next-&gt;prev = head;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(temp);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by User on 2023/6/23.</span><br><span class="hljs-comment">// 双向链表</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br>    E element;<br>    Node prev;<br>    Node next;<br>&#125;;<br><br><span class="hljs-comment">// 初始化方法</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">initList</span><span class="hljs-params">(Node head)</span> &#123;<br>    head-&gt;prev = head-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 插入操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertList</span><span class="hljs-params">(Node head, E element, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-comment">// 首先判断是否越界</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 移到指定位置</span><br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    node-&gt;element = element;<br><br>    <span class="hljs-keyword">if</span> (head-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        node-&gt;next = head-&gt;next;<br>        head-&gt;next-&gt;prev = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    head-&gt;next = node;<br>    node-&gt;prev = head;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteList</span><span class="hljs-params">(Node head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (--index) &#123;<br>        head = head-&gt;next;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    Node temp = head-&gt;next;<br>    <span class="hljs-keyword">if</span> (head-&gt;next-&gt;next) &#123;<br>        head-&gt;next = temp-&gt;next;<br>        temp-&gt;next-&gt;prev = head;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>     <span class="hljs-built_in">free</span>(temp);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> <span class="hljs-title">head</span>;</span><br>    initList(&amp;head);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; ++i) &#123;<br>        insertList(&amp;head, i * <span class="hljs-number">10</span>, i);<br>    &#125;<br><br>    Node node = &amp;head;<br><br>    deleteList(node,<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        node = node-&gt;next;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, node-&gt;element);<br>    &#125; <span class="hljs-keyword">while</span> (node-&gt;next != <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>接着我们再来简单认识一下另一种类型的链表，循环链表，这种链表实际上和前面我们讲的链表是一样的，但是它的最后一个结点是与头结点相连的，双向链表和单向链表都可以做成这样的环形结构，我们这里以单链表为例:</p><p><img src="/../img/mdImg/dataStructure/LoopLinkedList.png" alt="循环链表"></p><p>这种类型的链表实际上与普通链表的唯一区别就在于最后是否连接到头结点，因此循环链表支持从任意一个结点出发都可以到达任何的结点，而普通的链表则只能从头结点出发才能到达任意结点，同样也是为了更灵活而设计的。</p><h2 id="特殊线性表"><a href="#特殊线性表" class="headerlink" title="特殊线性表"></a>特殊线性表</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈（也叫堆栈，stack）是一种特殊的线性表，只能在表尾进行插入和删除操作。如下图：</p><p><img src="/../img/mdImg/dataStructure/Stack.png" alt="栈"></p><p>因此，它具有<strong>先进后出</strong>的特点。</p><p><img src="/../img/mdImg/dataStructure/StackOrder.png" alt="操作次序"></p><p>底部称为<strong>栈底</strong>，顶部称为<strong>栈顶</strong>，所有操作只能在<strong>栈顶</strong>进行操作。之后栈顶操作完之后才能操作下面的，它是一种先进后出的数据结构（FILO，First In，Last Out）</p><ul><li><code>pop</code>：出栈操作，在栈顶取出一个元素</li><li><code>push</code>：入栈操作，在栈顶压入一个元素</li></ul><p>代码实现，首先定义结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> *<span class="hljs-title">ArrayStack</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> &#123;</span><br>    E *<span class="hljs-built_in">array</span>;<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> top;  <span class="hljs-comment">// 这里使用top来表示但前栈顶的位置</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>初始化操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">initStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(E) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">stack</span>-&gt;capacity = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">stack</span>-&gt;top = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 初始化栈的时候，栈顶元素默认是-1，因为此时栈里还没有一个元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>入栈操作（插入）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pushStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>, E element)</span> &#123;<br>    <span class="hljs-comment">// 扩容</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stack</span>-&gt;top + <span class="hljs-number">1</span> == <span class="hljs-built_in">stack</span>-&gt;capacity) &#123;<br>        <span class="hljs-type">int</span> newCapacity = <span class="hljs-built_in">stack</span>-&gt;capacity + (<span class="hljs-built_in">stack</span>-&gt;capacity &gt;&gt; <span class="hljs-number">1</span>);<br>        E *newArray = <span class="hljs-built_in">realloc</span>(<span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>, newCapacity * <span class="hljs-keyword">sizeof</span>(E));<br>        <span class="hljs-keyword">if</span> (newArray == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> = newArray;<br>        <span class="hljs-built_in">stack</span>-&gt;capacity = newCapacity;<br>    &#125;<br>    <span class="hljs-built_in">stack</span>-&gt;top++;<br>    <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">stack</span>-&gt;top] = element;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断栈是否为空：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">stack</span>-&gt;top == <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>出栈操作（删除）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 出栈</span><br>E <span class="hljs-title function_">popStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    E num = <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">stack</span>-&gt;top];<br>    <span class="hljs-built_in">stack</span>-&gt;top--;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by User on 2023/6/23.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> *<span class="hljs-title">ArrayStack</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> &#123;</span><br>    E *<span class="hljs-built_in">array</span>;<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> top;  <span class="hljs-comment">// 这里使用top来表示但前栈顶的位置</span><br>&#125;;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">initStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(E) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">stack</span>-&gt;capacity = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">stack</span>-&gt;top = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 初始化栈的时候，栈顶元素默认是-1，因为此时栈里还没有一个元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">stack</span>-&gt;top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pushStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>, E element)</span> &#123;<br>    <span class="hljs-comment">// 扩容</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">stack</span>-&gt;top + <span class="hljs-number">1</span> == <span class="hljs-built_in">stack</span>-&gt;capacity) &#123;<br>        <span class="hljs-type">int</span> newCapacity = <span class="hljs-built_in">stack</span>-&gt;capacity + (<span class="hljs-built_in">stack</span>-&gt;capacity &gt;&gt; <span class="hljs-number">1</span>);<br>        E *newArray = <span class="hljs-built_in">realloc</span>(<span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>, newCapacity * <span class="hljs-keyword">sizeof</span>(E));<br>        <span class="hljs-keyword">if</span> (newArray == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span> = newArray;<br>        <span class="hljs-built_in">stack</span>-&gt;capacity = newCapacity;<br>    &#125;<br>    <span class="hljs-built_in">stack</span>-&gt;top++;<br>    <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">stack</span>-&gt;top] = element;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈</span><br>E <span class="hljs-title function_">popStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    E num = <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">stack</span>-&gt;top];<br>    <span class="hljs-built_in">stack</span>-&gt;top--;<br>    <span class="hljs-keyword">return</span> num;<br>&#125;<br><br><br><span class="hljs-comment">// 打印</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStack</span><span class="hljs-params">(ArrayStack <span class="hljs-built_in">stack</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-built_in">stack</span>-&gt;top; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">stack</span>-&gt;<span class="hljs-built_in">array</span>[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span> <span class="hljs-title">stack</span>;</span><br>    initStack(&amp;<span class="hljs-built_in">stack</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; ++i) &#123;<br>        pushStack(&amp;<span class="hljs-built_in">stack</span>, i * <span class="hljs-number">10</span>);<br>    &#125;<br>    printStack(&amp;<span class="hljs-built_in">stack</span>);<br>    <span class="hljs-keyword">while</span> (!isEmpty(&amp;<span class="hljs-built_in">stack</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, popStack(&amp;<span class="hljs-built_in">stack</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有时候，栈的利用率比较低，这时候我们可以将一个固定长度的数组共享给两个栈使用：</p><p><img src="/../img/mdImg/dataStructure/ShareStack.png" alt="共享栈"></p><p>数组的两头分别作为两个栈的栈底，当两个栈的栈顶指计相遇时（栈顶指针下标之差绝对值为1时)，表示栈已满。通过这种方式，我们就可以将数组占用的空间更充分地使用，这样的栈我们称为<strong>共享栈</strong></p><p>前面我们使用了顺序表实现栈，下面我们演示通过链表来实现栈。</p><p><img src="/../img/mdImg/dataStructure/LinkedListStack.png" alt="链栈"></p><p>代码实现，先定义结构体并初始化栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    E element;<br>    Node next;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initStack</span><span class="hljs-params">(Node head)</span> &#123;<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>入栈（push）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pushStack</span><span class="hljs-params">(Node head, E element)</span> &#123;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    node-&gt;element = element;<br>    node-&gt;next = head-&gt;next;<br>    head-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>出栈（pop）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 出栈</span><br>E <span class="hljs-title function_">popStack</span><span class="hljs-params">(Node head)</span> &#123;<br>    Node temp = head-&gt;next;<br>    E e = temp-&gt;element;<br>    head-&gt;next = temp-&gt;next;<br>    <span class="hljs-built_in">free</span>(temp);<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<br><br><span class="hljs-comment">// 判空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历带头链栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStack</span><span class="hljs-params">(Node head)</span> &#123;<br>    head = head-&gt;next;<br>    <span class="hljs-keyword">while</span> (head) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, head-&gt;element);<br>        head = head-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;| \n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by HYL on 2023/6/25.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">Node</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    E element;<br>    Node next;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">initStack</span><span class="hljs-params">(Node head)</span> &#123;<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pushStack</span><span class="hljs-params">(Node head, E element)</span> &#123;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    node-&gt;element = element;<br>    node-&gt;next = head-&gt;next;<br>    head-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈</span><br>E <span class="hljs-title function_">popStack</span><span class="hljs-params">(Node head)</span> &#123;<br>    Node temp = head-&gt;next;<br>    E e = temp-&gt;element;<br>    head-&gt;next = temp-&gt;next;<br>    <span class="hljs-built_in">free</span>(temp);<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<br><br><span class="hljs-comment">// 判空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(Node head)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStack</span><span class="hljs-params">(Node head)</span> &#123;<br>    head = head-&gt;next;<br>    <span class="hljs-keyword">while</span> (head) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, head-&gt;element);<br>        head = head-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;| \n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> <span class="hljs-title">head</span>;</span><br>    initStack(&amp;head);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i) &#123;<br>        pushStack(&amp;head, i * <span class="hljs-number">100</span>);<br>    &#125;<br>    printStack(&amp;head);<br><br>    <span class="hljs-keyword">while</span> (!isEmpty(&amp;head)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, popStack(&amp;head));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列像栈一样，也是一种特殊的线性表，不过它的特点是<strong>先进先出</strong>，就跟排队一样，经典的<strong>生产者-消费者</strong>问题中的缓冲区就是用的队列。</p><p>同样，队列也有两种实现方式。我们先看顺序表是如何实现的，一开始队列里没有元素，队首队尾一般初始值都是**-1**</p><p><img src="/../img/mdImg/dataStructure/Queue.png" alt="队列"></p><p><strong>入队：</strong>如果有新元素加入了，队尾向后移动一格（+1），然后在队尾所指的位置插入一个元素。</p><p><strong>出队：</strong>如果要出队的话，那就是需要将队首向后移动一格，然后排除队首所指向的元素。</p><p>但是如果就采用普通的顺序表来实现的话，那不太现实，因为这指针会不断的往后移动，不断地申请内存空间，造成了很大的浪费。所以通常我们要采用<strong>循环队列</strong>的形式来实现重复使用的队列数组，不过这样就没办法扩容了。</p><p>顺序表队列代码实现：</p><p>自定义结构体，并初始化队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> *<span class="hljs-title">ArrayQueue</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> &#123;</span><br>    <span class="hljs-type">int</span> *<span class="hljs-built_in">array</span>;<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> front, rear;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">initQueue</span><span class="hljs-params">(ArrayQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-comment">// 申请10个int类型大小的内存</span><br>    <span class="hljs-built_in">queue</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(E) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">queue</span>-&gt;<span class="hljs-built_in">array</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>-&gt;capacity = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">queue</span>-&gt;front = <span class="hljs-built_in">queue</span>-&gt;rear = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>入队操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 入队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">offerQueue</span><span class="hljs-params">(ArrayQueue <span class="hljs-built_in">queue</span>, E element)</span> &#123;<br>    <span class="hljs-comment">// 创建临时变量用来存储队尾指针的值</span><br>    <span class="hljs-type">int</span> temp = (<span class="hljs-built_in">queue</span>-&gt;rear + <span class="hljs-number">1</span>) % <span class="hljs-built_in">queue</span>-&gt;capacity;<br>    <span class="hljs-comment">// 判断该队列是否满,满了返回0</span><br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-built_in">queue</span>-&gt;front) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 移动队尾指针</span><br>    <span class="hljs-built_in">queue</span>-&gt;rear = temp;<br>    <span class="hljs-comment">// 在该位置给他赋值</span><br>    <span class="hljs-built_in">queue</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">queue</span>-&gt;rear] = element;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>出队操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 出队</span><br>E <span class="hljs-title function_">pollQueue</span><span class="hljs-params">(ArrayQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-built_in">queue</span>-&gt;front = (<span class="hljs-built_in">queue</span>-&gt;front + <span class="hljs-number">1</span>) % <span class="hljs-built_in">queue</span>-&gt;capacity;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">queue</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">queue</span>-&gt;front];<br>&#125;<br><br><span class="hljs-comment">// 判断是否为空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(ArrayQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">queue</span>-&gt;rear == <span class="hljs-built_in">queue</span>-&gt;front;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by HYL on 2023/6/30.</span><br><span class="hljs-comment">// 顺序表队列</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> *<span class="hljs-title">ArrayQueue</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> &#123;</span><br>    <span class="hljs-type">int</span> *<span class="hljs-built_in">array</span>;<br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> front, rear;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">initQueue</span><span class="hljs-params">(ArrayQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-comment">// 申请10个int类型大小的内存</span><br>    <span class="hljs-built_in">queue</span>-&gt;<span class="hljs-built_in">array</span> = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(E) * <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">queue</span>-&gt;<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>-&gt;capacity = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">queue</span>-&gt;front = <span class="hljs-built_in">queue</span>-&gt;rear = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">offerQueue</span><span class="hljs-params">(ArrayQueue <span class="hljs-built_in">queue</span>, E element)</span> &#123;<br>    <span class="hljs-comment">// 创建临时变量用来存储队尾指针的值</span><br>    <span class="hljs-type">int</span> temp = (<span class="hljs-built_in">queue</span>-&gt;rear + <span class="hljs-number">1</span>) % <span class="hljs-built_in">queue</span>-&gt;capacity;<br>    <span class="hljs-comment">// 判断该队列是否满,满了返回0</span><br>    <span class="hljs-keyword">if</span> (temp == <span class="hljs-built_in">queue</span>-&gt;front) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 移动队尾指针</span><br>    <span class="hljs-built_in">queue</span>-&gt;rear = temp;<br>    <span class="hljs-comment">// 在该位置给他赋值</span><br>    <span class="hljs-built_in">queue</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">queue</span>-&gt;rear] = element;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 出队</span><br>E <span class="hljs-title function_">pollQueue</span><span class="hljs-params">(ArrayQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-built_in">queue</span>-&gt;front = (<span class="hljs-built_in">queue</span>-&gt;front + <span class="hljs-number">1</span>) % <span class="hljs-built_in">queue</span>-&gt;capacity;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">queue</span>-&gt;<span class="hljs-built_in">array</span>[<span class="hljs-built_in">queue</span>-&gt;front];<br>&#125;<br><br><span class="hljs-comment">// 判断是否为空</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(ArrayQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">queue</span>-&gt;rear == <span class="hljs-built_in">queue</span>-&gt;front;<br>&#125;<br><br><br><span class="hljs-comment">// 打印队列</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printQueue</span><span class="hljs-params">(ArrayQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-built_in">queue</span>-&gt;front; <span class="hljs-comment">// 遍历队列需要从队首开始</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-built_in">queue</span>-&gt;capacity;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">queue</span>-&gt;<span class="hljs-built_in">array</span>[i]);<br>    &#125; <span class="hljs-keyword">while</span> (i != <span class="hljs-built_in">queue</span>-&gt;rear);  <span class="hljs-comment">// 当队首等于队尾时，结束</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> <span class="hljs-title">queue</span>;</span><br>    initQueue(&amp;<span class="hljs-built_in">queue</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br>        offerQueue(&amp;<span class="hljs-built_in">queue</span>, i * <span class="hljs-number">100</span>);<br>    &#125;<br>    printQueue(&amp;<span class="hljs-built_in">queue</span>);<br><br>    <span class="hljs-keyword">while</span> (!isEmpty(&amp;<span class="hljs-built_in">queue</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, pollQueue(&amp;<span class="hljs-built_in">queue</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面使用链表来创建队列。使用链表来创建队列的话就不用担心扩容的问题了，更加灵活。</p><p>在初始化时，我们需要两个指针来存队首和队尾，因为是单链表，所以队首需要存放指向头结点的指针，用来找到后面的数据，而队尾则直接指向尾结点即可。</p><p><img src="/../img/mdImg/dataStructure/LinkedListQueue.png" alt="链队列"></p><p><strong>入队：</strong>当有新的元素入队时，只需要在队尾拼接，然后队尾向后移动一位即可。</p><p><strong>出队：</strong>当出队时，只需要移除队首指向下一个元素即可。</p><p>链表队列代码实现</p><p>首先定义结构体（因为有两个指向结点的队首队尾指针，所以得定义一个执行存放数据结点的结构体。相当于以队首为入口去查找存放数据的结点），然后初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">Node</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> *<span class="hljs-title">LinkedQueue</span>;</span><br><br><span class="hljs-comment">// 结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    E element;<br>    Node next;<br>&#125;;<br><br><span class="hljs-comment">// 队首，队尾</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> &#123;</span><br>    <span class="hljs-comment">// 指向结点的指针</span><br>    Node front, rear;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">initQueue</span><span class="hljs-params">(LinkedQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>-&gt;rear = <span class="hljs-built_in">queue</span>-&gt;front = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>入队操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">offerQueue</span><span class="hljs-params">(LinkedQueue <span class="hljs-built_in">queue</span>, E element)</span> &#123;<br>    <span class="hljs-comment">// 链表队列入队时要创建一个新的节点</span><br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 将数据存入新创的结点的数据域</span><br>    node-&gt;element = element;<br>    <span class="hljs-comment">// 让队尾指针指向新创的结点，使结点连接起来</span><br>    <span class="hljs-built_in">queue</span>-&gt;rear-&gt;next = node;<br>    <span class="hljs-comment">// 使队尾指针向后移动一位</span><br>    <span class="hljs-built_in">queue</span>-&gt;rear = node;<br>    node-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>出队操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">E <span class="hljs-title function_">pollQueue</span><span class="hljs-params">(LinkedQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-comment">// 拿到待出队的下一个结点</span><br>    Node temp = <span class="hljs-built_in">queue</span>-&gt;front-&gt;next;<br>    E e = temp-&gt;element;<br>    <span class="hljs-comment">// 让其头结点指向它下一个的下一个</span><br>    <span class="hljs-built_in">queue</span>-&gt;front-&gt;next = temp-&gt;next;<br>    <span class="hljs-comment">// 如果队首指向的结点等于队尾了，则说明没有元素了，就要将队尾移到头结点</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">queue</span>-&gt;rear == temp) <span class="hljs-built_in">queue</span>-&gt;rear = <span class="hljs-built_in">queue</span>-&gt;front;<br>    <span class="hljs-built_in">free</span>(temp);<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by HYL on 2023/6/30.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> E;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">Node</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> *<span class="hljs-title">LinkedQueue</span>;</span><br><br><span class="hljs-comment">// 结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br>    E element;<br>    Node next;<br>&#125;;<br><br><span class="hljs-comment">// 队首，队尾</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> &#123;</span><br>    <span class="hljs-comment">// 指向结点的指针</span><br>    Node front, rear;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">initQueue</span><span class="hljs-params">(LinkedQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">queue</span>-&gt;rear = <span class="hljs-built_in">queue</span>-&gt;front = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">offerQueue</span><span class="hljs-params">(LinkedQueue <span class="hljs-built_in">queue</span>, E element)</span> &#123;<br>    <span class="hljs-comment">// 链表队列入队时要创建一个新的节点</span><br>    Node node = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 将数据存入新创的结点的数据域</span><br>    node-&gt;element = element;<br>    <span class="hljs-comment">// 让队尾指针指向新创的结点，使结点连接起来</span><br>    <span class="hljs-built_in">queue</span>-&gt;rear-&gt;next = node;<br>    <span class="hljs-comment">// 使队尾指针向后移动一位</span><br>    <span class="hljs-built_in">queue</span>-&gt;rear = node;<br>    node-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br>E <span class="hljs-title function_">pollQueue</span><span class="hljs-params">(LinkedQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-comment">// 拿到待出队的下一个结点</span><br>    Node temp = <span class="hljs-built_in">queue</span>-&gt;front-&gt;next;<br>    E e = temp-&gt;element;<br>    <span class="hljs-comment">// 让其头结点指向它下一个的下一个</span><br>    <span class="hljs-built_in">queue</span>-&gt;front-&gt;next = temp-&gt;next;<br>    <span class="hljs-comment">// 如果队首指向的结点等于队尾了，则说明没有元素了，就要将队尾移到头结点</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">queue</span>-&gt;rear == temp) <span class="hljs-built_in">queue</span>-&gt;rear = <span class="hljs-built_in">queue</span>-&gt;front;<br>    <span class="hljs-built_in">free</span>(temp);<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(LinkedQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">queue</span>-&gt;rear == <span class="hljs-built_in">queue</span>-&gt;front;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printQueue</span><span class="hljs-params">(LinkedQueue <span class="hljs-built_in">queue</span>)</span> &#123;<br>    Node node = <span class="hljs-built_in">queue</span>-&gt;front-&gt;next;<br>    <span class="hljs-keyword">while</span> (node) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, node-&gt;element);<br>        node = node-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span> <span class="hljs-title">queue</span>;</span><br>    initQueue(&amp;<span class="hljs-built_in">queue</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br>        offerQueue(&amp;<span class="hljs-built_in">queue</span>, i * <span class="hljs-number">100</span>);<br>    &#125;<br>    printQueue(&amp;<span class="hljs-built_in">queue</span>);<br><br>    <span class="hljs-keyword">while</span> (!isEmpty(&amp;<span class="hljs-built_in">queue</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, pollQueue(&amp;<span class="hljs-built_in">queue</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地Java连接虚拟机Redis报错</title>
    <link href="/2023/06/20/%E6%9C%AC%E5%9C%B0Java%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BARedis%E6%8A%A5%E9%94%99/"/>
    <url>/2023/06/20/%E6%9C%AC%E5%9C%B0Java%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BARedis%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>报错：Exception in thread “main” redis.clients.jedis.exceptions.JedisConnectionException: Failed to connect to any host resolved for DNS name.</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>连接超时错误。这种情况下先要确认虚拟机是否开启redis服务（我就是没有开启，哈哈尴尬）。如何查看服务是否开启，可以用这个命令（我的虚拟机操作系统是centos7）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ps -ef | grep redis<br></code></pre></td></tr></table></figure><p>如果出现redis进程则说明服务开启了。还报错那八成是防火墙的问题。有两个解决方案。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>一是直接关闭防火墙</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 关闭防火墙<br>systemctl stop firewalld.service <br># 重新加载防火墙<br>firewalld-<span class="hljs-built_in">cmd</span> --reload<br># 查看防火墙状态<br>systemctl status firewalld.service<br></code></pre></td></tr></table></figure><p>另一个是将redis的端口设置为开放端口</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">firewall-<span class="hljs-built_in">cmd</span> --zone=public --add-port=端口号/tcp --parmanent<br># 重新加载防火墙<br>firewall-<span class="hljs-built_in">cmd</span> --reload<br># 查看防火墙已开放的端口<br>firewall-<span class="hljs-built_in">cmd</span> --list-ports<br></code></pre></td></tr></table></figure><p><span style="color:red">另外可能还会出现以下两种报错！！！</span></p><h2 id="Connection-refused-拒绝访问"><a href="#Connection-refused-拒绝访问" class="headerlink" title="Connection refused 拒绝访问"></a>Connection refused 拒绝访问</h2><p>报错：Exception in thread “main” redis.clients.jedis.exceptions.JedisConnectionException: Connection refused</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>修改redis.conf配置文件，注释掉 bind 那行，然后重启redis服务</p><h2 id="DENIED-Redis-is-running-in-protected-mode（保护模式）"><a href="#DENIED-Redis-is-running-in-protected-mode（保护模式）" class="headerlink" title="DENIED Redis is running in protected mode（保护模式）"></a>DENIED Redis is running in protected mode（保护模式）</h2><p>报错：redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. </p><p>只截了一部分报错信息。</p><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>这是因为在redis.conf中开启了保护模式<code>protected-mode yes</code></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>将yes 改为 no即可，然后重启redis服务</p>]]></content>
    
    
    <categories>
      
      <category>DEBUG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Redis</title>
    <link href="/2023/06/20/SpringBoot%E6%95%B4%E5%90%88Redis/"/>
    <url>/2023/06/20/SpringBoot%E6%95%B4%E5%90%88Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot集成Redis"><a href="#SpringBoot集成Redis" class="headerlink" title="SpringBoot集成Redis"></a>SpringBoot集成Redis</h1><p>本地Java连接Redis常见问题</p><ul><li>bind配置注释掉</li><li>保护模式设置为no</li><li>Linux系统的防火墙设置</li><li>redis服务器的IP地址和密码是否正确</li><li>redis的服务的端口号和auth密码</li></ul><h2 id="集成Jedis"><a href="#集成Jedis" class="headerlink" title="集成Jedis"></a>集成Jedis</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Jedis Client是Redis官网推荐的一个面向Java客户端，库文件实现了对各类API进行封装调用</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1、新建项目模块</p><p>2、在<code>pom.xml</code>引入依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0-alpha2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.demo;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 9:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REDIS_IP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;192.168.197.132&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">REDIS_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-number">6379</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、指定IP和端口获得连接</span><br>        <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(REDIS_IP, REDIS_PORT);<br><br>        <span class="hljs-comment">// 2、指定访问服务器的密码</span><br>        jedis.auth(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-comment">// 3、获得到jedis客户端，可以操作了</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ping</span> <span class="hljs-operator">=</span> jedis.ping();<br>        System.out.println(ping);<br><br>        <span class="hljs-comment">// keys</span><br>        Set&lt;String&gt; keys = jedis.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        System.out.println(keys);<br><br>        <span class="hljs-comment">// string</span><br>        jedis.set(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;hello-jedis&quot;</span>);<br>        System.out.println(jedis.get(<span class="hljs-string">&quot;k3&quot;</span>));<br>        System.out.println(jedis.ttl(<span class="hljs-string">&quot;k3&quot;</span>));<br>        jedis.expire(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-number">20L</span>);<br><br>        <span class="hljs-comment">// list</span><br>        jedis.lpush(<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>);<br>        List&lt;String&gt; list = jedis.lrange(<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (String element : list) &#123;<br>            System.out.print(element + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// set</span><br>        jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;jd001&quot;</span>);<br>        jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;jd002&quot;</span>);<br>        jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;jd003&quot;</span>);<br>        Set&lt;String&gt; orders = jedis.smembers(<span class="hljs-string">&quot;orders&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (Iterator&lt;String&gt; iterator = orders.iterator(); iterator.hasNext(); ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.print(next + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        jedis.srem(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;jd002&quot;</span>);<br>        System.out.println(jedis.smembers(<span class="hljs-string">&quot;orders&quot;</span>).size());<br><br>        <span class="hljs-comment">// hash</span><br>        jedis.hset(<span class="hljs-string">&quot;hash1&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>);<br>        System.out.println(jedis.hget(<span class="hljs-string">&quot;hash1&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>));<br><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;telephone&quot;</span>, <span class="hljs-string">&quot;124421521414&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;safas&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;qeaf@qq.com&quot;</span>);<br>        jedis.hmset(<span class="hljs-string">&quot;hash2&quot;</span>, map);<br><br>        <span class="hljs-comment">// zset</span><br>        jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">60D</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>        jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">70D</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>        jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">80D</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br><br>        List&lt;String&gt; zset01 = jedis.zrange(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        zset01.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="集成Lettuce"><a href="#集成Lettuce" class="headerlink" title="集成Lettuce"></a>集成Lettuce</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​jedis和Lettuce都是Redis的客户端，它们都可以连接Redis服务器，但是在SpringBoot2.0之后默认都是使用的Lettuce这个客户端连接Redis服务器。因为当使用Jedis客户端连接Redis服务器的时候，每个线程都要拿自己创建的Jedis实例去连接Redis客户端，当有很多个线程的时候，不仅开销大需要反复的创建关闭一个Jedis连接，而且也是线程不安全的，一个线程通过Jedis实例更改Redis服务器中的数据之后会影响另一个线程。</p><p>​但是如果使用Lettuce这个客户端连接Redis服务器的时候，就不会出现上面的情况,Lettuce底层使用的是Netty,当有多个线程都需要连接Redis服务器的时候，可以保证只创建一个Lettuce连接，使所有的线程共享这一个Lettuce连接，这样可以减少创建关闭一个Lettuce连接时候的开销;而且这种方式也是线程安全的，不会出现一个线程通过Lettuce更改Redis服务器中的数据之后而影响另—个线程的情况。</p><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1、导入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.lettuce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lettuce-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.demo;<br><br><span class="hljs-keyword">import</span> io.lettuce.core.RedisClient;<br><span class="hljs-keyword">import</span> io.lettuce.core.RedisURI;<br><span class="hljs-keyword">import</span> io.lettuce.core.SortArgs;<br><span class="hljs-keyword">import</span> io.lettuce.core.api.StatefulRedisConnection;<br><span class="hljs-keyword">import</span> io.lettuce.core.api.sync.RedisCommands;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 16:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LettuceDemo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REDIS_IP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;192.168.197.132&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">REDIS_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-number">6379</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、使用构建器链式编程来builder RedisURI</span><br>        <span class="hljs-type">RedisURI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> RedisURI.Builder<br>                .redis(REDIS_IP)<br>                .withPort(REDIS_PORT)<br>                .withAuthentication(<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)<br>                .build();<br><br>        <span class="hljs-comment">// 2、创建连接客户端</span><br>        <span class="hljs-type">RedisClient</span> <span class="hljs-variable">redisClient</span> <span class="hljs-operator">=</span> RedisClient.create(uri);<br>        <span class="hljs-type">StatefulRedisConnection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> redisClient.connect();<br><br>        <span class="hljs-comment">// 3、创建操作的command</span><br>        <span class="hljs-type">RedisCommands</span> <span class="hljs-variable">commands</span> <span class="hljs-operator">=</span> connect.sync();<br><br>        <span class="hljs-comment">// =======各种操作========</span><br>        <span class="hljs-comment">// keys</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> commands.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        System.out.println(keys);<br>        <span class="hljs-comment">// string</span><br>        commands.set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;11111&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">k1</span> <span class="hljs-operator">=</span> (String) commands.get(<span class="hljs-string">&quot;k1&quot;</span>);<br>        System.out.println(k1);<br>        <span class="hljs-comment">//list</span><br>        commands.lpush(<span class="hljs-string">&quot;myList2&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>        <span class="hljs-type">List</span> <span class="hljs-variable">myList2</span> <span class="hljs-operator">=</span> commands.lrange(<span class="hljs-string">&quot;myList2&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (Object o : myList2) &#123;<br>            System.out.println(o);<br>        &#125;<br>        <span class="hljs-comment">//set</span><br>        commands.sadd(<span class="hljs-string">&quot;mySet2&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">mySet2</span> <span class="hljs-operator">=</span> commands.smembers(<span class="hljs-string">&quot;mySet2&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object o : mySet2) &#123;<br>            System.out.println(o);<br>        &#125;<br>        <span class="hljs-comment">//hash</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;12124521312&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;asfadf&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;gsasaf@qq.com&quot;</span>);<br>        commands.hset(<span class="hljs-string">&quot;myHash2&quot;</span>, map);<br>        Map&lt;String, String&gt; myHash2 = commands.hgetall(<span class="hljs-string">&quot;myHash2&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String k : myHash2.keySet()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hash k=&quot;</span> + k + <span class="hljs-string">&quot;,v=&quot;</span> + myHash2.get(k));<br>        &#125;<br>        <span class="hljs-comment">//zset</span><br>        commands.zadd(<span class="hljs-string">&quot;myZset2&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-number">110</span>, <span class="hljs-string">&quot;s2&quot;</span>, <span class="hljs-number">90</span>, <span class="hljs-string">&quot;s3&quot;</span>);<br>        <span class="hljs-type">List</span> <span class="hljs-variable">myZset2</span> <span class="hljs-operator">=</span> commands.zrange(<span class="hljs-string">&quot;myZset2&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (Object o : myZset2) &#123;<br>            System.out.println(o);<br>        &#125;<br>        <span class="hljs-comment">// sort</span><br>        <span class="hljs-type">SortArgs</span> <span class="hljs-variable">sortArgs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SortArgs</span>();<br>        sortArgs.alpha();<br>        sortArgs.desc();<br><br>        <span class="hljs-type">List</span> <span class="hljs-variable">myList21</span> <span class="hljs-operator">=</span> commands.sort(<span class="hljs-string">&quot;myList2&quot;</span>, sortArgs);<br>        <span class="hljs-keyword">for</span> (Object o : myList21) &#123;<br>            System.out.println(o);<br>        &#125;<br>        <span class="hljs-comment">// =======各种操作========</span><br><br>        <span class="hljs-comment">// 4、各种关闭释放资源</span><br>        connect.close();<br>        redisClient.shutdown();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="集成RedisTemplate-–-推荐使用"><a href="#集成RedisTemplate-–-推荐使用" class="headerlink" title="集成RedisTemplate – 推荐使用"></a>集成RedisTemplate – 推荐使用</h2><h4 id="连接单机"><a href="#连接单机" class="headerlink" title="连接单机"></a>连接单机</h4><h5 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2、修改yml文件"><a href="#2、修改yml文件" class="headerlink" title="2、修改yml文件"></a>2、修改yml文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">server.port=7777</span><br><span class="hljs-string">spring.application.name=springboot_redis</span><br><span class="hljs-comment"># ========================logging=====================</span><br><span class="hljs-string">logging.level.root=info</span><br><span class="hljs-string">logging.level.com.atguigu.redis7=info</span><br><span class="hljs-string">logging.pattern.console=%d&#123;yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss.SSS&#125;</span> [<span class="hljs-string">%thread</span>] <span class="hljs-string">%-5level</span> <span class="hljs-string">%logger-</span> <span class="hljs-string">%msg%n</span> <br><span class="hljs-string">logging.file.name=D:/mylogs2023/redis7_study.log</span><br><span class="hljs-string">logging.pattern.file=%d&#123;yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss.SSS&#125;</span> [<span class="hljs-string">%thread</span>] <span class="hljs-string">%-5level</span> <span class="hljs-string">%logger-</span> <span class="hljs-string">%msg%n</span><br><span class="hljs-comment"># ========================swagger=====================</span><br><span class="hljs-string">spring.swagger2.enabled=true</span><br><span class="hljs-comment">#在springboot2.6.X结合swagger2.9.X会提示documentationPluginsBootstrapper空指针异常，</span><br><span class="hljs-comment">#原因是在springboot2.6.X中将SpringMVC默认路径匹配策略从AntPathMatcher更改为PathPatternParser，</span><br><span class="hljs-comment"># 导致出错，解决办法是matching-strategy切换回之前ant_path_matcher</span><br><span class="hljs-string">spring.mvc.pathmatch.matching-strategy=ant_path_matcher</span><br><span class="hljs-comment"># ========================redis单机=====================</span><br><span class="hljs-string">spring.redis.database=0</span><br><span class="hljs-comment"># 修改为自己真实IP</span><br><span class="hljs-string">spring.redis.host=192.168.197.132</span><br><span class="hljs-string">spring.redis.port=6379</span><br><span class="hljs-string">spring.redis.password=123456</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-active=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-wait=-1ms</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-idle=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.min-idle=0</span><br></code></pre></td></tr></table></figure><h5 id="3、配置类"><a href="#3、配置类" class="headerlink" title="3、配置类"></a>3、配置类</h5><p>RedisConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 17:14</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * redis序列化的工具配置类，下面这个请一定开启配置</span><br><span class="hljs-comment">     * 127.0.0.1:6379&gt; keys *</span><br><span class="hljs-comment">     * 1) &quot;ord:102&quot;  序列化过</span><br><span class="hljs-comment">     * 2) &quot;\xac\xed\x00\x05t\x00\aord:102&quot;   野生，没有序列化过</span><br><span class="hljs-comment">     * this.redisTemplate.opsForValue(); //提供了操作string类型的所有方法</span><br><span class="hljs-comment">     * this.redisTemplate.opsForList(); // 提供了操作list类型的所有方法</span><br><span class="hljs-comment">     * this.redisTemplate.opsForSet(); //提供了操作set的所有方法</span><br><span class="hljs-comment">     * this.redisTemplate.opsForHash(); //提供了操作hash表的所有方法</span><br><span class="hljs-comment">     * this.redisTemplate.opsForZSet(); //提供了操作zset的所有方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(LettuceConnectionFactory lettuceConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br><br>        redisTemplate.setConnectionFactory(lettuceConnectionFactory);<br>        <span class="hljs-comment">//设置key序列化方式string</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        <span class="hljs-comment">//设置value的序列化方式json，使用GenericJackson2JsonRedisSerializer替换默认序列化</span><br>        redisTemplate.setValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br><br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br><br>        redisTemplate.afterPropertiesSet();<br><br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SwaggerConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 17:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.swagger2.enabled&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean enabled;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .enable(enabled)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.huang.springboot_redis&quot;</span>)) <span class="hljs-comment">//你自己的package</span><br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;springboot利用swagger2构建api接口文档 &quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> +<br>                        DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>).format(LocalDateTime.now()))<br>                .description(<span class="hljs-string">&quot;springboot+redis整合&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .termsOfServiceUrl(<span class="hljs-string">&quot;https://haomin.blog.csdn.net/&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OrderService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.service;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadLocalRandom;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 21:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ORDER_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ord:&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><span class="hljs-comment">//    private StringRedisTemplate redisTemplate;</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">keyId</span> <span class="hljs-operator">=</span> ThreadLocalRandom.current().nextInt(<span class="hljs-number">1000</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">serialNo</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> ORDER_KEY + keyId;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;京东订单&quot;</span> + serialNo;<br><br>        redisTemplate.opsForValue().set(key, value);<br><br>        log.info(<span class="hljs-string">&quot;key:&#123;&#125;&quot;</span>, key);<br>        log.info(<span class="hljs-string">&quot;value:&#123;&#125;&quot;</span>, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(Integer keyId)</span> &#123;<br>        <span class="hljs-keyword">return</span> (String) redisTemplate.opsForValue().get(ORDER_KEY + keyId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OrderController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.huang.springboot_redis.controller;<br><br><span class="hljs-keyword">import</span> com.huang.springboot_redis.service.OrderService;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> HYL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/20 21:39</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;订单接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;新增订单&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/order/add&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOrder</span><span class="hljs-params">()</span> &#123;<br>        orderService.addOrder();<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;按照keyId查订单&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/order/&#123;keyId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;keyId&quot;)</span> Integer keyId)</span> &#123;<br>        <span class="hljs-keyword">return</span> orderService.getOrderById(keyId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h5><p>访问 <a href="http://localhost:7777/swagger-ui.html">http://localhost:7777/swagger-ui.html</a></p><p>使用RedisTemplate会出现序列化乱码的问题，所以配置了RedisConfig.java这个配置类。这样就解决乱码了。为什么会乱码？是因为序列化默认使用的是jdk的序列化方法<code>JdkSerializationRedisSerializer</code>。使用<code>StringRedisSerializer</code>就不会乱码了。</p><h4 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h4><p>在前面单机的基础上，进一步修改</p><h6 id="1、修该yml文件"><a href="#1、修该yml文件" class="headerlink" title="1、修该yml文件"></a>1、修该yml文件</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ========================redis集群=====================</span><br><span class="hljs-string">spring.redis.password=111111</span><br><span class="hljs-comment"># 获取失败 最大重定向次数</span><br><span class="hljs-string">spring.redis.cluster.max-redirects=3</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-active=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-wait=-1ms</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-idle=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.min-idle=0</span><br><span class="hljs-string">spring.redis.cluster.nodes=***.***.***.***:6381,***.***.***.***:6382</span> <span class="hljs-string">(主机:port)</span><br></code></pre></td></tr></table></figure><h5 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h5><p>访问 <a href="http://localhost:7777/swagger-ui.html">http://localhost:7777/swagger-ui.html</a></p><h5 id="3、一台master宕机，java报错"><a href="#3、一台master宕机，java报错" class="headerlink" title="3、一台master宕机，java报错"></a>3、一台master宕机，java报错</h5><ul><li><p>让master-6381宕机，shutdown</p></li><li><p>查看集群信息 ，看slave是否上位 Cluster nodes</p></li><li><p>我们客户端再次读写</p></li><li><p>原因是因为SpringBoot客户端没有动态感知到RedisCluster的最新集群信息</p></li><li><p>导致这个的原因是：</p><ol><li>Spring Boot 2.x，Redis默认的连接池是 Lettuce</li><li>当Redis集群节点发生变化后，Lettuce默认是不会刷新节点拓扑</li></ol></li><li><p>解决方法：</p><ol><li><p>排除Lettuce采用jedis（不推荐）<br><img src="/../img/mdImg/redis/redisConnectionClusterIssue1.png" alt="解决方法1"></p></li><li><p>重写连接工厂实例（极度不推荐）</p></li><li><p>刷新节点集群拓扑动态感应（推荐）</p><p>重新修改yml文件，增加定时刷新，开启动态感应</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ========================redis集群=====================</span><br><span class="hljs-string">spring.redis.password=111111</span><br><span class="hljs-comment"># 获取失败 最大重定向次数</span><br><span class="hljs-string">spring.redis.cluster.max-redirects=3</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-active=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-wait=-1ms</span><br><span class="hljs-string">spring.redis.lettuce.pool.max-idle=8</span><br><span class="hljs-string">spring.redis.lettuce.pool.min-idle=0</span><br> <br><span class="hljs-comment"># ========================新增=====================</span><br><span class="hljs-comment">#支持集群拓扑动态感应刷新,自适应拓扑刷新是否使用所有可用的更新，默认false关闭</span><br><span class="hljs-string">spring.redis.lettuce.cluster.refresh.adaptive=true</span><br><span class="hljs-comment">#定时刷新</span><br><span class="hljs-string">spring.redis.lettuce.cluster.refresh.period=2000</span><br> <br><span class="hljs-string">spring.redis.cluster.nodes=***.***.***.***:6381,***.***.***.***:6382</span> <span class="hljs-string">(主机:port)</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><hr><p>在此redis基础已全部完成！！</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>indexOf()与lastIndexOf()区别</title>
    <link href="/2023/06/19/indexOf-%E4%B8%8ElastIndexOf-%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/06/19/indexOf-%E4%B8%8ElastIndexOf-%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="indexOf-与lastIndexOf-区别"><a href="#indexOf-与lastIndexOf-区别" class="headerlink" title="indexOf()与lastIndexOf()区别"></a>indexOf()与lastIndexOf()区别</h2><p><strong>直接上代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//indexOf()与lastIndexOf()的区别</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456789&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;888000888&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456778&quot;</span>;<br>System.out.println(s1.indexOf(<span class="hljs-string">&quot;8&quot;</span>));<span class="hljs-comment">//7</span><br>System.out.println(s1.lastIndexOf(<span class="hljs-string">&quot;8&quot;</span>));<span class="hljs-comment">//7</span><br><br>System.out.println(s1.indexOf(<span class="hljs-string">&quot;0&quot;</span>));<span class="hljs-comment">//-1</span><br>System.out.println(s1.lastIndexOf(<span class="hljs-string">&quot;0&quot;</span>));<span class="hljs-comment">//-1</span><br><br>System.out.println(s2.indexOf(<span class="hljs-string">&quot;8&quot;</span>));<span class="hljs-comment">//0</span><br>System.out.println(s2.lastIndexOf(<span class="hljs-string">&quot;8&quot;</span>));<span class="hljs-comment">//8</span><br><br>System.out.println(s3.indexOf(<span class="hljs-string">&quot;7&quot;</span>));<span class="hljs-comment">//6</span><br>System.out.println(s3.lastIndexOf(<span class="hljs-string">&quot;7&quot;</span>));<span class="hljs-comment">//7</span><br>&#125;<br></code></pre></td></tr></table></figure><p><span style="color:red">得出结论！！</span></p><ol><li><code>indexOf()</code>是从左往右查询，如果查到则返回该字符在字符串中的索引（都是从0开始）</li><li><code>lastIndexOf()</code>是从右往左查询，如果查到则返回该字符在字符串中的索引（都是从0开始）</li><li>如果没查到都是返回-1</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM框架Mybatis分页PageHelper遇到的问题</title>
    <link href="/2023/06/16/SSM%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AEPageHelper%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <url>/2023/06/16/SSM%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AEPageHelper%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p><strong>报错：</strong>Cannot convert value of type ‘com.github.pagehelper.PageHelper’ to required type ‘org.apache.ibatis.plugin.Interceptor’ for property ‘plugins[0]’: no matching editors or conversion strategy found</p><h2 id="问题描述：sqlSessionFactory初始化失败"><a href="#问题描述：sqlSessionFactory初始化失败" class="headerlink" title="问题描述：sqlSessionFactory初始化失败"></a>问题描述：sqlSessionFactory初始化失败</h2><p>修改前的applicationContext-dao.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.huang.pojo&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plugins&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--此时这里报错--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>helperDialect=mysql<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:sqlMapConfig.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h2><p>通过查阅<a href="https://pagehelper.github.io/docs/">官网</a>得知，因为上面的相关PageHelper配置是4.x版本的，老版的拦截器<code>Interceptor</code>和分页插件实现类<code>dialect</code>都是在<code>com.github.pagehelper.PageHelper</code>这个类下，但是5.x版本的<code>PageHelper</code>只是<code>dialect</code>的实现类，而新版的拦截器则是在<code>com.github.pagehelper.PageInterceptor</code>下，所以需要配置<code>PageInterceptor</code>。</p><p>pageHelper是如何在<a href="https://so.csdn.net/so/search?q=mybatis&spm=1001.2101.3001.7020">mybatis</a>中工作呢，是通过mybatis的pulgin实现了Interceptor接口，从而获得要执行的sql语句实现分页技术。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>修改后的applicationContext-dao.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.huang.pojo&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plugins&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>helperDialect=mysql<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:sqlMapConfig.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改后成功运行。</p>]]></content>
    
    
    <categories>
      
      <category>DEBUG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/15/hello-world/"/>
    <url>/2023/06/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>helloworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记（一）</title>
    <link href="/2023/06/11/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/11/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><p>请确保当前Linux环境下有gcc编译器（原因：因为redis底层是由c语言编写）可以通过下面这条命令查看</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">gcc -v<br></code></pre></td></tr></table></figure><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1、先到官网下载安装包到本地 [下载地址](<a href="https://redis.io/download/">Download | Redis</a>)</p><p>2、将安装包通过远程连接（FinalShell，或xshell）传到Linux，一般传到 <code>/opt</code>目录下</p><p>3、解压：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">tar -zxvf redis redis-<span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">11</span>.tar.gz   # 加了v<br>或<br>tar -zxf redis redis-<span class="hljs-number">7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">11</span>.tar.gz  # 不加v<br></code></pre></td></tr></table></figure><p>4、进入解压后的redis文件夹，并执行<code>make</code>命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">make &amp;&amp; make install  # 这里会同时执行，也可先执行make，然后再执行make install<br></code></pre></td></tr></table></figure><p>如果出现 <code>Hint: It&#39;s a good idea to run &#39;make test&#39;</code>则说明安装成功。默认安装目录：<code>use/local/bin</code>类似于Windows系统下的<code>C:/Program Files</code>文件夹</p><p>5、进入<code>use/local/bin</code>，查看文件</p><ul><li>redis-benchmark:性能测试工具，服务启动后运行该命令，看看自己本子性能如何</li><li>redis-check-aof:修复有问题的AOF文件，rdb和aof后面讲</li><li>redis-check-dump:修复有问题的dump.rdb文件</li><li>redis-cli:客户端，操作入口</li><li>redis-sentinel: redis集群使用</li><li>redis-server: Redis服务器启动命令</li></ul><p>6、将默认的redis.confi拷贝一份，保存到自定义的路径下，比如：&#x2F;mybatis</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">cp redis.conf /myredis/redis7.conf<br></code></pre></td></tr></table></figure><p>7、修改&#x2F;myredis目录下的redis.conf配置文件做初始化设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf">redis.conf配置文件，改完后确保生效，记得重启，记得重启<br>1、默认daemonize no 改为 daemonize yes<br>2、默认protected-mode yes 改为 protected-mode no<br>3、默认bind 127.0.0.1       改为直接注释掉(默认bind 127.0.0.1只能本机访问)或改成本机IP地址，否则影响远程IP连接<br>4、添加redis密码      改为 requirepass你自己设置的密码<br></code></pre></td></tr></table></figure><p>8、启动服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">redis-server /myredis/redis7.conf<br></code></pre></td></tr></table></figure><p>9、连接服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">redis-cli -a 密码 -p 指定端口号 <br></code></pre></td></tr></table></figure><p>10、此时就安装好redis了，可以在客户端操作了</p><p>输入<code>ping</code>出现PONG就说明没问题了</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">ping</span><br>PONG<br><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <br></code></pre></td></tr></table></figure><h2 id="Redis-数据持久化"><a href="#Redis-数据持久化" class="headerlink" title="Redis 数据持久化"></a>Redis 数据持久化</h2><p>redis提供了两种持久化操作，分别是 <strong>RDB（Redis Database）</strong> 和 <strong>AOF（Append Only File）</strong> </p><p>RDB持久化：是将redis上存储的数据在指定的时间间隔内执行的次数来将之前操作的数据集保存到指定的磁盘位置。</p><p>AOF持久化：与RDB不同的是，RDB保存的是数据集，而AOF则保存的是写操作的命令，每次写入都会被Redis放入AOF保存的缓冲区，等待被保存到磁盘上。</p><blockquote><p>同时官方文档还有关于，不使用持久化操作和RDB+AOF组合使用的操作介绍。</p></blockquote><p><strong>OK，我们知道了数据持久化的两种方式，那我们应该如何使用呢？</strong></p><p>有两种使用方法，一种是自动持久化，另一种是手动持久化。</p><h3 id="自动持久化方式"><a href="#自动持久化方式" class="headerlink" title="自动持久化方式"></a>自动持久化方式</h3><p><strong>RDB：</strong>在redsi.config配置文件里面配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf">save &quot;&quot;          # 表示不使用RDB存储<br>save 900 1<br>save 300 10<br>save 60 10000<br></code></pre></td></tr></table></figure><p>上面意思是，表示在15分钟（900秒）内至少有1个键被修改就进行快照存储，其他两个意思相同。</p><p><strong>AOF：</strong>同样在redis.cofig配置文件中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf">appendonly yes    # 通过修改参数来表示是否开启（yes/no）<br><br># appendfsync always<br>appendfsync everysec<br># appendfsync no<br></code></pre></td></tr></table></figure><p>这里主要解释以下下面三段代码，表示的是保存策略，默认是<code>everysec</code>每秒保存一次，<code>always</code>是一直执行保存，<code>no</code>是不保存。</p><h3 id="手动持久化方式"><a href="#手动持久化方式" class="headerlink" title="手动持久化方式"></a>手动持久化方式</h3><p><strong>RDB：</strong>在redis服务端通过命令的方式保存，保存路径默认是<code>./</code>，保存的名称默认为<code>dump.rdb</code></p><ul><li><code>save</code>：（不推荐使用）输入save命令后，会对redis进行进程阻塞，然后进行备份，备份完成之后恢复正常。在<strong>生产环境</strong>中不允许使用此命令！！！</li><li><code>bgsave</code>：（推荐使用）输入bgsave命令后，不影响redis正常服务，后台会fork出一个子进程，不会阻塞，以异步的方式进行备份。</li></ul><p><strong>AOF：</strong>在redis服务端通过命令的方式保存，保存路径默认<code>是RDB存储路径下出现的appendonlydir文件夹</code>，保存的名称默认为<code>appendonly.aof</code></p><ul><li><code>bgrewriteaof</code>：此命令与<code>bgsave</code>命令执行操作差不多。</li></ul><h3 id="RDB和AOF混合使用"><a href="#RDB和AOF混合使用" class="headerlink" title="RDB和AOF混合使用"></a>RDB和AOF混合使用</h3><p>两种方式可以同时打开，但是由AOF说了算。RDB作为备用恢复手段，也可以保持启用。</p><p>在同时开启RDB和AOF持久化时，重启时只会加载AOF文件，不会加载RDB文件。</p><p>通过设置redis.conf的<code>aof-use-rdb-preamble yes</code>启用混合方式，设置为no表示禁用。</p><h2 id="Redis事务（Transactions）"><a href="#Redis事务（Transactions）" class="headerlink" title="Redis事务（Transactions）"></a>Redis事务（Transactions）</h2><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>说到数据库事务，我们先能够想到<strong>关系型数据库</strong>里的事务，它包括四大特性（ACID）：原子性、一致性、隔离性、持久性。由一个或则多个SQL语句组成的、逻辑上的工件单元，必须将其视为一个不可分割的“操作序列”，这个序列中的所有SQL语句只能全部执行成功，或者全部不执行。用通俗易懂的话来说就是，在事务里的SQL语句要么全部执行，要么全部不执行。</p><p>那<strong>非关系性数据库</strong>（比如：Redsi）中的事务是什么呢？</p><p>他们执行的事情其实都是差不多的，都是为了保证命令的一致性。但是他们还是有<strong>区别</strong>的：</p><ul><li>关系型数据库采用悲观锁机制来保证了事务的隔离性和原子性；而非关系型数据库通常采用乐观锁来控制并发和保持数据一致</li><li>关系型数据库通常支持复杂的事务处理和多表关联查询，而非关系型数据库通常不支持多表关联的查询操作。Redis的事务操作采用<code>multi</code>和<code>exec</code>命令配合使用，通过一系列的命令操作来实现事务。</li></ul><p><img src="/../img/mdImg/redis/redisTransalationDifference.png" alt="redis事务区别"></p><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><ul><li><code>DISCARD</code>：取消事务，放弃执行事务块内全部命令</li><li><code>EXEC</code>：执行所有事务块内的命令</li><li><code>MULTI</code>：标记一个事务块的开始（开启事务）</li><li><code>WATCH key [key...]</code>：监视一个或多个key，如果在事务执行之前在这个key被其他命令所改动，则事务将被打断</li><li><code>UNWATCH</code>：取消<code>WATCH</code>命令对所有key的监视</li></ul><p>正常执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs redis">127.0.0.1:6379&gt; MULTI   # 开启事务<br>OK<br>127.0.0.1:6379(TX)&gt; set k1 v1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; set k3 v3<br>QUEUED<br>127.0.0.1:6379(TX)&gt; incr count<br>QUEUED<br>127.0.0.1:6379(TX)&gt; EXEC  # 执行事务<br>1) OK<br>2) OK<br>3) OK<br>4) (integer) 3<br>127.0.0.1:6379&gt; mget k1 k2 k3 count  # 查看，全部执行成功<br>1) &quot;v1&quot;<br>2) &quot;v2&quot;<br>3) &quot;v3&quot;<br>4) &quot;3&quot;<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><p>中断执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs redis">127.0.0.1:6379&gt; multi       # 开启事务<br>OK<br>127.0.0.1:6379(TX)&gt; set k1 v11<br>QUEUED<br>127.0.0.1:6379(TX)&gt; set k2 v22<br>QUEUED<br>127.0.0.1:6379(TX)&gt; DISCARD# 终止事务<br>OK<br>127.0.0.1:6379&gt; mget k1 k2<br>1) &quot;v1&quot;<br>2) &quot;v2&quot;<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><h2 id="Redis主从复制（replication）"><a href="#Redis主从复制（replication）" class="headerlink" title="Redis主从复制（replication）"></a>Redis主从复制（replication）</h2><p>高并发机制</p><p>主服务称为master，从服务称为salve。主从复制主要针对解决高并发问题。master主要负责写，slave主要负责读。</p><h3 id="主从复制如何实现"><a href="#主从复制如何实现" class="headerlink" title="主从复制如何实现"></a>主从复制如何实现</h3><h4 id="方式一：修改配置文件"><a href="#方式一：修改配置文件" class="headerlink" title="方式一：修改配置文件"></a>方式一：修改配置文件</h4><p>在配置文件redis.config中修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 老版本，redis 5 之前配置<br>slaveof &lt;masterip&gt; &lt;masterport&gt;<br># 新版本，redis 5 之后使用 replicaof 替代 slaveof<br>replicaof &lt;masterip&gt; &lt;masterport&gt;<br></code></pre></td></tr></table></figure><h4 id="方式二：启动服务参数配置"><a href="#方式二：启动服务参数配置" class="headerlink" title="方式二：启动服务参数配置"></a>方式二：启动服务参数配置</h4><p>在开启服务时输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 老版本，redis <span class="hljs-number">5</span> 之前配置<br>redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;<br># 新版本，redis <span class="hljs-number">5</span> 之后使用 replicaof 替代 slaveof<br>redis-server -replicaof &lt;masterip&gt; &lt;masterport&gt;<br></code></pre></td></tr></table></figure><h4 id="方式三：客户端发送命令连接"><a href="#方式三：客户端发送命令连接" class="headerlink" title="方式三：客户端发送命令连接"></a>方式三：客户端发送命令连接</h4><p>进入客服端之后通过输入命令的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs redis"># 老版本，redis 5 之前配置<br>127.0.0.1:6380&gt; slaveof &lt;masterip&gt; &lt;masterport&gt;<br># 新版本，redis 5 之后使用 replicaof 替代 slaveof<br>127.0.0.1:6380&gt; replicaof &lt;masterip&gt; &lt;masterport&gt;<br></code></pre></td></tr></table></figure><p>所有方式都可以在进入客户端之后，输入<code>info replication</code>查看信息。</p><h3 id="取消主从关系命令"><a href="#取消主从关系命令" class="headerlink" title="取消主从关系命令"></a>取消主从关系命令</h3><p><code>slaveof no one</code>：取消当前数据库的主从关系，使当前数据库为master身份</p><h3 id="主从复制优缺点"><a href="#主从复制优缺点" class="headerlink" title="主从复制优缺点"></a>主从复制优缺点</h3><p><strong>优点：</strong></p><ul><li>一个master，可同步多个slave</li><li>读写分离，读取效率高</li><li>数据热备份，有多个数据副本</li></ul><p><strong>缺点：</strong></p><ul><li>主机宕机，则所有的从机都无法工作</li><li>主机写操作压力大</li><li>主节点存储能力受到单机限制</li></ul><p>为了改善缺点则引入了哨兵和集群</p><h2 id="Redis哨兵模式（sentinel）"><a href="#Redis哨兵模式（sentinel）" class="headerlink" title="Redis哨兵模式（sentinel）"></a>Redis哨兵模式（sentinel）</h2><p>高可用机制</p><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>哨兵模式是一种特殊的模式，redis提供了开启哨兵的命令。哨兵是一个独立的进程，负责监控运行中的redis服务。在服务宕机后给出响应的操作。</p><h3 id="有什么作用？"><a href="#有什么作用？" class="headerlink" title="有什么作用？"></a>有什么作用？</h3><ol><li>监控redis运行的状态</li><li>当master服务宕机后，通过一种投票算法将某一个slave选举为新的master</li></ol><h3 id="能干嘛-？"><a href="#能干嘛-？" class="headerlink" title="能干嘛 ？"></a>能干嘛 ？</h3><ul><li>监控：监控redis主从机是否正常运行</li><li>通知：通过api接口将故障转移的结果发送给客户端或系统管理员</li><li>自动故障切换：如果主机master宕机，sentinel启动故障转移，将某一个slave升级为master，并使其他的salve重新指向新的master，并通知使用redis服务器的应用程序连接时要使用新的master服务地址</li><li>配置中心：客户端通过连接哨兵来获得当前redis服务的master节点</li></ul><h3 id="怎么配置？"><a href="#怎么配置？" class="headerlink" title="怎么配置？"></a>怎么配置？</h3><ol><li>配置<code>sentinel.conf</code>哨兵配置文件里的下面这条命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 在配置文件中配置这段命令<br># 其中各个参数的意思如下 <br>sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;<br></code></pre></td></tr></table></figure><p><code>master-name</code>：要监控的master服务器的名称</p><p><code>ip</code>：其IP地址</p><p><code>port</code>：其端口号</p><p><code>quorum</code>：（重点）表示最少需要几个哨兵认为此master主机为客观下线，然后才允许故障迁移（说通俗点就是选举的数量）</p><ol start="2"><li>如果master设置了密码，则需要配置以下命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;<br></code></pre></td></tr></table></figure><p><strong>配置文件里其他的命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 指定多少毫秒之后，主节点没有应答哨兵，此时哨兵主观上认为主节点下线<br>sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;<br><br># 表示允许并行同步的slave个数，当Master挂了后，哨兵会选出新的Master，剩余的slave会向新的master发起同步数据<br>sentinel parallel-syncs &lt;master-name&gt; &lt;nums&gt;<br><br># 故障转移的超时时间，进行故障转移时，如果超过设置的毫秒，表示故障转移失败<br>sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;<br><br># 配置当某一事件发生时所需要执行的脚本<br>sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;<br><br># 客户端重新配置主节点参数脚本<br>sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;<br></code></pre></td></tr></table></figure><h3 id="怎么用-（怎么运行）"><a href="#怎么用-（怎么运行）" class="headerlink" title="怎么用?（怎么运行）"></a>怎么用?（怎么运行）</h3><p>在命令窗口启动</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">redis-server 你的sentinel配置文件 --sentinel<br></code></pre></td></tr></table></figure><p>说明：启动哨兵一般是以集群的方式启动，一般不单独启动一个（推荐奇数个）</p><p>此时可以通过linux命令查看redis进程（不出意外是有三个哨兵进程运行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">ps -ef | grep redis<br></code></pre></td></tr></table></figure><p>另外：如果sentinel出现问题，还可以查看日志文件<code>sentinel.log</code>（路径到配置文件中查看）</p><p><span style="color:red">思考？？</span>如果此时master宕机之后，sentinel将会选举哪一个slave为新的master<br>回答：通过选举算法选举，权限（priority）&gt;复制偏移量（replication offset）&gt; Run ID<br><span style="color:red">思考？？</span>如果此时master宕机之后，sentinel将会选举了一个新的master，此时原来的master连上来，会出现什么情况？<br>回答：会变为新的master的slave</p><h3 id="哨兵使用建议"><a href="#哨兵使用建议" class="headerlink" title="哨兵使用建议"></a>哨兵使用建议</h3><ul><li>哨兵节点的数量应该为多个，哨兵本身就是一个集群，保证高可用</li><li>哨兵节点的数量应该是单数</li><li>各个哨兵节点的配置应该保持一致</li><li>如果哨兵节点部署在Docker等容器中，尤其要保证端口的正确映射</li><li>哨兵集群+主从 复制没并不能保证数据的零丢失（因此引入了集群）</li></ul><h2 id="Redis集群（cluster）"><a href="#Redis集群（cluster）" class="headerlink" title="Redis集群（cluster）"></a>Redis集群（cluster）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Redis集群是一个可以在多个Redis节点之间进行数据共享的程序集。并且Redis集群可以支持多个master节点。</p><p><img src="/../img/mdImg/redis/redisCluster.png" alt="redis集群"></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>Redis集群支持多个master，每个master又可以挂载多个slave。<ul><li>支持数据的读写分离，</li><li>支持高可用</li><li>支持海量数据的读写存储</li></ul></li><li>由于cluster自带sentinel的故障转移机制，内置了高可用的支持，所以再去使用哨兵功能</li><li>客户端与redis的节点连接，不再需要连接集群中的所有节点，只需要任意连接集群中的一个可用节点即可</li><li>槽位slot负责分配各个物理服务节点，由对应的集群来负责维护节点、插槽和数据之间的关系</li></ul><h3 id="集群算法-分片-槽位slot"><a href="#集群算法-分片-槽位slot" class="headerlink" title="集群算法 -分片 -槽位slot"></a>集群算法 -分片 -槽位slot</h3><p>集群的密钥空间被分成16384个槽，有效地设置了16384个主节点的集群大小上限（但是，建议的最大节点大小约为1000个节点)。<br>集群中的每个主节点处理16384个哈希槽的一个子集。当没有集群重新配置正在进行时(即哈希槽从一个节点移动到另一个节点)，集群是稳定的。当集群稳定时，单个哈希槽将由单个节点提供服务(但是，服务节点可以有一个或多个副本，在网络分裂或故障的情况下替换它，并且可以用于扩展读取陈旧数据是可接受的操作)。</p><h4 id="槽位slot"><a href="#槽位slot" class="headerlink" title="槽位slot"></a>槽位slot</h4><p>redis集群中没有使用一致性hash，而是导入了hash槽的概念。redis集群有16384个hash槽，每个key通过CRC16校验后对16384取模来决定数据放在哪个槽。集群的每个节点负责一部分hash槽。例如以下：</p><p><img src="/../img/mdImg/redis/redisSlot.png" alt="redis槽位"></p><h4 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h4><p>使用redis集群是我们会将存储的数据分散到多台redis机器上，这就称为<code>分片</code>。集群中的每个redis实例都被认为是整个数据的分片。</p><p>为了找到给定key的分片，我们对key进行CRC16(key)算法处理并通过对总分片数量取模。然后，使用确定性hash函数，这意味着给定的key将多次始终映射到同一个分片。</p><h4 id="槽位与分片的优势"><a href="#槽位与分片的优势" class="headerlink" title="槽位与分片的优势"></a>槽位与分片的优势</h4><ol><li>方便节点的扩容与缩容</li><li>方便数据分派查找</li></ol><h4 id="slot槽位映射"><a href="#slot槽位映射" class="headerlink" title="slot槽位映射"></a>slot槽位映射</h4><ul><li><p>哈希取余分区<br><img src="/../img/mdImg/redis/redisHashSurplusPartition.png" alt="reids哈希取余分区"></p><p><strong>优点：</strong>简单粗暴，只需要预估好数据，规划好节点</p><p><strong>缺点：</strong>原来规划好的节点，进行扩容或缩容比较麻烦，映射关系需全部重新计算，导致数据混乱</p></li><li><p>一致性哈希算法分区</p><p>提出一致性哈希算法的目的：当服务器个数发生变动时，尽量减少影响客户端到服务器的映射关系</p><p><span style="color:red">3大步骤</span></p><ol><li><p>算法构建一致性哈希环</p></li><li><p>redis服务器IP节点映射</p></li><li><p>key落到服务器的落键规则</p></li></ol><p><strong>优点：</strong>具备<strong>容错性</strong>和<strong>扩容性</strong></p><p><strong>缺点：</strong>容易出现<strong>数据倾斜</strong>问题</p></li><li><p>哈希槽分区</p><p><strong>概述</strong></p><p>哈希槽分区为了解决一致性哈希算法的数据倾斜问题而出现。哈希槽本质上就是一个数组，大小为 <code>2^14</code></p><p><strong>作用</strong></p><p>解决均匀分配的问题，在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系，现在就相当于节点上放的是槽，槽里放的是数据。</p><p><img src="/../img/mdImg/redis/slot.png" alt="slot"></p><p>槽解决了粒度问题，便于数据移动</p></li></ul><h4 id="为什么redis集群的最大槽数是16384个？"><a href="#为什么redis集群的最大槽数是16384个？" class="headerlink" title="为什么redis集群的最大槽数是16384个？"></a>为什么redis集群的最大槽数是16384个？</h4><p>原作者给出了回答，<br>地址如下：<a href="https://github.com/antirez/redis/issues/2576">https://github.com/antirez/redis/issues/2576</a></p><ol><li><span style="color:blue">如果槽位为65536，发送心跳信息的消息头达8k，发送的心跳包过于庞大。</span><br>在消息头中最占空间的是myslots[CLUSTER_SLOTS&#x2F;8]。当槽位为65536时，这块的大小是:65536÷8÷1024&#x3D;8kb<br>在消息头中最占空间的是myslots[CLUSTER_SLOTS&#x2F;8]。当槽位为16384时，这块的大小是:16384÷8÷1024&#x3D;2kb<br>因为每秒钟，redis节点需要发送一定数量的ping消息作为心跳包，如果槽位为65536，这个ping消息的消息头太大了，浪费带宽。</li><li><span style="color:blue">redis的集群主节点数量基本不可能超过1000个。</span><br>如上所述，集群节点越多，心跳包的消息体内携带的数据越多。如果节点过1000个，也会导致网络拥堵。因此redis作者，不建议redis cluster节点数量超过1000个。<br>那么，对于节点数在1000以内的redis cluster集群，16384个槽位够用了。没有必要拓展到65536个。</li><li><span style="color:blue">槽位越小，节点少的情况下，压缩比高</span><br>Redis主节点的配置信息中，它所负责的哈希槽是通过一张bitmap的形式来保存的，在传输过程中，会对bitmap进行压缩，但是如果bitmap的填充率slots &#x2F; N很高的话(N表示节点数)，bitmap的压缩率就很低。如果节点数很少，而哈希槽数量很多的话，bitmap的压缩率就很低。</li></ol><p>Redis集群并不保证强一致性，这意味着特定的条件下，Redis集群可能会丢掉一些被系统收到的写入请求命令</p><h3 id="集群环境配置案例"><a href="#集群环境配置案例" class="headerlink" title="集群环境配置案例"></a>集群环境配置案例</h3><p>这里准备6台redis服务器。端口：6381~6386</p><p><img src="/../img/mdImg/redis/cluster.png" alt="cluster"></p><h4 id="一、首先要新建配置文件（有几个redis服务器就有新建几个），名字自取，然后将下面配置在配置文件中保存"><a href="#一、首先要新建配置文件（有几个redis服务器就有新建几个），名字自取，然后将下面配置在配置文件中保存" class="headerlink" title="一、首先要新建配置文件（有几个redis服务器就有新建几个），名字自取，然后将下面配置在配置文件中保存"></a><strong>一、</strong>首先要新建配置文件（有几个redis服务器就有新建几个），名字自取，然后将下面配置在配置文件中保存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs conf">bind 0.0.0.0<br>daemonize yes<br>protected-mode no<br>port 6381 <br>logfile &quot;/myredis/cluster/cluster6381.log&quot;   <br>pidfile /myredis/cluster6381.pid<br>dir /myredis/cluster<br>dbfilename dump6381.rdb<br>appendonly yes<br>appendfilename &quot;appendonly6381.aof&quot;<br>requirepass 123456<br>masterauth 123456<br>cluster-enabled yes <br>cluster-config-file nodes-6381.conf<br>cluster-node-timeout 5000<br></code></pre></td></tr></table></figure><h4 id="二、启动redis服务"><a href="#二、启动redis服务" class="headerlink" title="二、启动redis服务"></a>二、启动redis服务</h4><p>分别启动6个服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">redis-server /myredis/cluster/redisCluster6381.conf<br>redis-server /myredis/cluster/redisCluster6382.conf<br>redis-server /myredis/cluster/redisCluster6383.conf<br>redis-server /myredis/cluster/redisCluster6384.conf<br>redis-server /myredis/cluster/redisCluster6385.conf<br>redis-server /myredis/cluster/redisCluster6386.conf<br></code></pre></td></tr></table></figure><h4 id="三、构建集群节点"><a href="#三、构建集群节点" class="headerlink" title="三、构建集群节点"></a>三、构建集群节点</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">redis-cli -a <span class="hljs-number">123456</span> --cluster create --cluster-replicas <span class="hljs-number">1</span> 真实IP:<span class="hljs-number">6381</span> 真实IP:<span class="hljs-number">6382</span> 真实IP:<span class="hljs-number">6383</span> 真实IP:<span class="hljs-number">6384</span> 真实IP:<span class="hljs-number">6385</span> 真实IP:<span class="hljs-number">6386</span><br></code></pre></td></tr></table></figure><ul><li><p><code>redis-cli --cluster create --cluster-replicas 1</code> 中的1代表每个主机有一个从机,所以会有3主3从</p></li><li><p>执行之后要再输入一次yes</p></li><li><p>如果没有输密码可能会报错（前提，你有密码）</p></li></ul><h4 id="四、查看集群节点"><a href="#四、查看集群节点" class="headerlink" title="四、查看集群节点"></a>四、查看集群节点</h4><p>通过输入命令</p><p><code>cluster nodes</code>：可以查看所有集群节点的关系以及身份。</p><p><code>info replication</code>：查看主从关系</p><p><code>cluster info</code>：查看某一个节点的相关信息</p><p><code>cluster keyslot 键名称</code>：可以查看此键的槽位为多少</p><p>此时集群就搭建完成了！！</p><p><strong>集群常用命令：</strong></p><p><code>cluster failover</code>：调整因主机宕机之后变为从机又想让其重新为主机的命令</p><p><code>cluster-require-full-coverage</code>：集群是否完整才能对外提供服务</p><p><code>clustter countkeysinslot 槽位数字编号</code>：查看该槽位是否被占用（1被占用，0没被占用）</p><p><code>cluster keyslot 键名称</code>：查看槽位号</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC注册驱动推荐</title>
    <link href="/2023/06/09/DriverManager.register()%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%B3%A8%E5%86%8C%E4%B8%A4%E6%AC%A1%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/06/09/DriverManager.register()%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%B3%A8%E5%86%8C%E4%B8%A4%E6%AC%A1%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="关于使用JDBC注册驱动时为什么推荐使用Class-forName-“…”-（反射）来注册，而不推荐使用DriverManager-register-来注册！！"><a href="#关于使用JDBC注册驱动时为什么推荐使用Class-forName-“…”-（反射）来注册，而不推荐使用DriverManager-register-来注册！！" class="headerlink" title="关于使用JDBC注册驱动时为什么推荐使用Class.forName(“…”)（反射）来注册，而不推荐使用DriverManager.register()来注册！！"></a>关于使用JDBC注册驱动时为什么推荐使用Class.forName(“…”)（反射）来注册，而不推荐使用DriverManager.register()来注册！！</h2><p style="font-weight:bold;font-size:20px;color:red">先说结论!!</p><p><strong>原因一：使用DriverManager.register()会注册两次驱动，在内存中会有两个Driver对象。</strong></p><p><strong>原因二：程序依赖mysql的jar包，一旦脱离mysql的jar包，程序将无法编译。</strong></p><p style="color:red">ok，我们知道了原因，但是具体为什么会这样呢？<p>通过查看<code>com.mysql.jdbc.Driver</code>源码，发现有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mysql.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Driver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NonRegisteringDriver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.sql.Driver &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Driver</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var1) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Can&#x27;t register driver!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​通过上面源码我们发现当我们执行Driver这个类的时候，它就调用了<code>DriverManager.registerDriver(new Driver())</code>这个注册方法并且new了一个Driver实例，如果我们使用<code>DriverManager.register()</code>来注册Driver驱动，我们自己new了一个Driver实例，然后Driver类下的静态代码块里面的代码也会随着Driver的执行而运行，就会再次的运行<code>DriverManager.registerDriver(new Driver())</code>这个代码，所以就注册了两次驱动。</p><p>因此在开发中更推荐使用Class.forName(“…”)来进行加载Driver驱动。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
